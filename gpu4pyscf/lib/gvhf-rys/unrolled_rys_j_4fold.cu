#include <cuda.h>
#include "vhf.cuh"
#include "rys_roots_unrolled.cu"
#include "create_tasks.cu"
int rys_j_unrolled_lmax_4fold = 6;
int rys_j_unrolled_max_order_4fold = 12;
int rys_j_unrolled_max_gout_size_4fold = 90;


__device__ static
void _rys_j_0_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(1, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(1, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 1; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 1; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    gout_0_0 += fac * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_0_0*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_0_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_1 = 0.;
        double gout_0_2 = 0.;
        double gout_0_3 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(1, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(1, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 1; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 1; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    gout_0_1 += fac * 1 * trr_01z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_2 += fac * trr_01y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_3 += trr_01x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_1*dm2[kl_pair0+1] + gout_0_2*dm2[kl_pair0+2] + gout_0_3*dm2[kl_pair0+3]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_0_1*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+2, gout_0_2*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_0_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_1 = 0.;
        double gout_0_2 = 0.;
        double gout_0_3 = 0.;
        double gout_0_4 = 0.;
        double gout_0_5 = 0.;
        double gout_0_6 = 0.;
        double gout_0_7 = 0.;
        double gout_0_8 = 0.;
        double gout_0_9 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    gout_0_1 += fac * 1 * trr_01z;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    gout_0_2 += fac * 1 * trr_02z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_3 += fac * trr_01y * wt;
                    gout_0_4 += fac * trr_01y * trr_01z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_0_5 += fac * trr_02y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_6 += trr_01x * 1 * wt;
                    gout_0_7 += trr_01x * 1 * trr_01z;
                    gout_0_8 += trr_01x * trr_01y * wt;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_0_9 += trr_02x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_1*dm2[kl_pair0+1] + gout_0_2*dm2[kl_pair0+2] + gout_0_3*dm2[kl_pair0+3] + gout_0_4*dm2[kl_pair0+4] + gout_0_5*dm2[kl_pair0+5] + gout_0_6*dm2[kl_pair0+6] + gout_0_7*dm2[kl_pair0+7] + gout_0_8*dm2[kl_pair0+8] + gout_0_9*dm2[kl_pair0+9]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_0_1*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+2, gout_0_2*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+4, gout_0_4*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+5, gout_0_5*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+6, gout_0_6*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+7, gout_0_7*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+8, gout_0_8*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+9, gout_0_9*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_0_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_2 = 0.;
        double gout_0_3 = 0.;
        double gout_0_5 = 0.;
        double gout_0_6 = 0.;
        double gout_0_7 = 0.;
        double gout_0_8 = 0.;
        double gout_0_9 = 0.;
        double gout_0_11 = 0.;
        double gout_0_12 = 0.;
        double gout_0_13 = 0.;
        double gout_0_14 = 0.;
        double gout_0_15 = 0.;
        double gout_0_16 = 0.;
        double gout_0_17 = 0.;
        double gout_0_18 = 0.;
        double gout_0_19 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    gout_0_2 += fac * 1 * trr_02z;
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    gout_0_3 += fac * 1 * trr_03z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_5 += fac * trr_01y * trr_01z;
                    gout_0_6 += fac * trr_01y * trr_02z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_0_7 += fac * trr_02y * wt;
                    gout_0_8 += fac * trr_02y * trr_01z;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    gout_0_9 += fac * trr_03y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_11 += trr_01x * 1 * trr_01z;
                    gout_0_12 += trr_01x * 1 * trr_02z;
                    gout_0_13 += trr_01x * trr_01y * wt;
                    gout_0_14 += trr_01x * trr_01y * trr_01z;
                    gout_0_15 += trr_01x * trr_02y * wt;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_0_16 += trr_02x * 1 * wt;
                    gout_0_17 += trr_02x * 1 * trr_01z;
                    gout_0_18 += trr_02x * trr_01y * wt;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    gout_0_19 += trr_03x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_2*dm2[kl_pair0+2] + gout_0_3*dm2[kl_pair0+3] + gout_0_5*dm2[kl_pair0+5] + gout_0_6*dm2[kl_pair0+6] + gout_0_7*dm2[kl_pair0+7] + gout_0_8*dm2[kl_pair0+8] + gout_0_9*dm2[kl_pair0+9] + gout_0_11*dm2[kl_pair0+11] + gout_0_12*dm2[kl_pair0+12] + gout_0_13*dm2[kl_pair0+13] + gout_0_14*dm2[kl_pair0+14] + gout_0_15*dm2[kl_pair0+15] + gout_0_16*dm2[kl_pair0+16] + gout_0_17*dm2[kl_pair0+17] + gout_0_18*dm2[kl_pair0+18] + gout_0_19*dm2[kl_pair0+19]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+2, gout_0_2*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+5, gout_0_5*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+6, gout_0_6*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+7, gout_0_7*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+8, gout_0_8*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+9, gout_0_9*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+11, gout_0_11*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+12, gout_0_12*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+13, gout_0_13*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+14, gout_0_14*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+15, gout_0_15*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+16, gout_0_16*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+17, gout_0_17*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+18, gout_0_18*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+19, gout_0_19*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_0_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_2 = 0.;
        double gout_0_3 = 0.;
        double gout_0_4 = 0.;
        double gout_0_6 = 0.;
        double gout_0_7 = 0.;
        double gout_0_8 = 0.;
        double gout_0_9 = 0.;
        double gout_0_10 = 0.;
        double gout_0_11 = 0.;
        double gout_0_12 = 0.;
        double gout_0_13 = 0.;
        double gout_0_14 = 0.;
        double gout_0_16 = 0.;
        double gout_0_17 = 0.;
        double gout_0_18 = 0.;
        double gout_0_19 = 0.;
        double gout_0_20 = 0.;
        double gout_0_21 = 0.;
        double gout_0_22 = 0.;
        double gout_0_23 = 0.;
        double gout_0_24 = 0.;
        double gout_0_25 = 0.;
        double gout_0_26 = 0.;
        double gout_0_27 = 0.;
        double gout_0_28 = 0.;
        double gout_0_29 = 0.;
        double gout_0_30 = 0.;
        double gout_0_31 = 0.;
        double gout_0_32 = 0.;
        double gout_0_33 = 0.;
        double gout_0_34 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    gout_0_2 += fac * 1 * trr_02z;
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    gout_0_3 += fac * 1 * trr_03z;
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    gout_0_4 += fac * 1 * trr_04z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_6 += fac * trr_01y * trr_01z;
                    gout_0_7 += fac * trr_01y * trr_02z;
                    gout_0_8 += fac * trr_01y * trr_03z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_0_9 += fac * trr_02y * wt;
                    gout_0_10 += fac * trr_02y * trr_01z;
                    gout_0_11 += fac * trr_02y * trr_02z;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    gout_0_12 += fac * trr_03y * wt;
                    gout_0_13 += fac * trr_03y * trr_01z;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    gout_0_14 += fac * trr_04y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_16 += trr_01x * 1 * trr_01z;
                    gout_0_17 += trr_01x * 1 * trr_02z;
                    gout_0_18 += trr_01x * 1 * trr_03z;
                    gout_0_19 += trr_01x * trr_01y * wt;
                    gout_0_20 += trr_01x * trr_01y * trr_01z;
                    gout_0_21 += trr_01x * trr_01y * trr_02z;
                    gout_0_22 += trr_01x * trr_02y * wt;
                    gout_0_23 += trr_01x * trr_02y * trr_01z;
                    gout_0_24 += trr_01x * trr_03y * wt;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_0_25 += trr_02x * 1 * wt;
                    gout_0_26 += trr_02x * 1 * trr_01z;
                    gout_0_27 += trr_02x * 1 * trr_02z;
                    gout_0_28 += trr_02x * trr_01y * wt;
                    gout_0_29 += trr_02x * trr_01y * trr_01z;
                    gout_0_30 += trr_02x * trr_02y * wt;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    gout_0_31 += trr_03x * 1 * wt;
                    gout_0_32 += trr_03x * 1 * trr_01z;
                    gout_0_33 += trr_03x * trr_01y * wt;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    gout_0_34 += trr_04x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_2*dm2[kl_pair0+2] + gout_0_3*dm2[kl_pair0+3] + gout_0_4*dm2[kl_pair0+4] + gout_0_6*dm2[kl_pair0+6] + gout_0_7*dm2[kl_pair0+7] + gout_0_8*dm2[kl_pair0+8] + gout_0_9*dm2[kl_pair0+9] + gout_0_10*dm2[kl_pair0+10] + gout_0_11*dm2[kl_pair0+11] + gout_0_12*dm2[kl_pair0+12] + gout_0_13*dm2[kl_pair0+13] + gout_0_14*dm2[kl_pair0+14] + gout_0_16*dm2[kl_pair0+16] + gout_0_17*dm2[kl_pair0+17] + gout_0_18*dm2[kl_pair0+18] + gout_0_19*dm2[kl_pair0+19] + gout_0_20*dm2[kl_pair0+20] + gout_0_21*dm2[kl_pair0+21] + gout_0_22*dm2[kl_pair0+22] + gout_0_23*dm2[kl_pair0+23] + gout_0_24*dm2[kl_pair0+24] + gout_0_25*dm2[kl_pair0+25] + gout_0_26*dm2[kl_pair0+26] + gout_0_27*dm2[kl_pair0+27] + gout_0_28*dm2[kl_pair0+28] + gout_0_29*dm2[kl_pair0+29] + gout_0_30*dm2[kl_pair0+30] + gout_0_31*dm2[kl_pair0+31] + gout_0_32*dm2[kl_pair0+32] + gout_0_33*dm2[kl_pair0+33] + gout_0_34*dm2[kl_pair0+34]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+2, gout_0_2*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+4, gout_0_4*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+6, gout_0_6*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+7, gout_0_7*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+8, gout_0_8*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+9, gout_0_9*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+10, gout_0_10*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+11, gout_0_11*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+12, gout_0_12*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+13, gout_0_13*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+14, gout_0_14*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+16, gout_0_16*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+17, gout_0_17*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+18, gout_0_18*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+19, gout_0_19*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+20, gout_0_20*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+21, gout_0_21*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+22, gout_0_22*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+23, gout_0_23*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+24, gout_0_24*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+25, gout_0_25*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+26, gout_0_26*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+27, gout_0_27*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+28, gout_0_28*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+29, gout_0_29*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+30, gout_0_30*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+31, gout_0_31*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+32, gout_0_32*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+33, gout_0_33*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+34, gout_0_34*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_0_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_3 = 0.;
        double gout_0_4 = 0.;
        double gout_0_5 = 0.;
        double gout_0_8 = 0.;
        double gout_0_9 = 0.;
        double gout_0_10 = 0.;
        double gout_0_12 = 0.;
        double gout_0_13 = 0.;
        double gout_0_14 = 0.;
        double gout_0_15 = 0.;
        double gout_0_16 = 0.;
        double gout_0_17 = 0.;
        double gout_0_18 = 0.;
        double gout_0_19 = 0.;
        double gout_0_20 = 0.;
        double gout_0_23 = 0.;
        double gout_0_24 = 0.;
        double gout_0_25 = 0.;
        double gout_0_27 = 0.;
        double gout_0_28 = 0.;
        double gout_0_29 = 0.;
        double gout_0_30 = 0.;
        double gout_0_31 = 0.;
        double gout_0_32 = 0.;
        double gout_0_33 = 0.;
        double gout_0_34 = 0.;
        double gout_0_35 = 0.;
        double gout_0_37 = 0.;
        double gout_0_38 = 0.;
        double gout_0_39 = 0.;
        double gout_0_40 = 0.;
        double gout_0_41 = 0.;
        double gout_0_42 = 0.;
        double gout_0_43 = 0.;
        double gout_0_44 = 0.;
        double gout_0_45 = 0.;
        double gout_0_46 = 0.;
        double gout_0_47 = 0.;
        double gout_0_48 = 0.;
        double gout_0_49 = 0.;
        double gout_0_50 = 0.;
        double gout_0_51 = 0.;
        double gout_0_52 = 0.;
        double gout_0_53 = 0.;
        double gout_0_54 = 0.;
        double gout_0_55 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    gout_0_3 += fac * 1 * trr_03z;
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    gout_0_4 += fac * 1 * trr_04z;
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    gout_0_5 += fac * 1 * trr_05z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_8 += fac * trr_01y * trr_02z;
                    gout_0_9 += fac * trr_01y * trr_03z;
                    gout_0_10 += fac * trr_01y * trr_04z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_0_12 += fac * trr_02y * trr_01z;
                    gout_0_13 += fac * trr_02y * trr_02z;
                    gout_0_14 += fac * trr_02y * trr_03z;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    gout_0_15 += fac * trr_03y * wt;
                    gout_0_16 += fac * trr_03y * trr_01z;
                    gout_0_17 += fac * trr_03y * trr_02z;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    gout_0_18 += fac * trr_04y * wt;
                    gout_0_19 += fac * trr_04y * trr_01z;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    gout_0_20 += fac * trr_05y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_23 += trr_01x * 1 * trr_02z;
                    gout_0_24 += trr_01x * 1 * trr_03z;
                    gout_0_25 += trr_01x * 1 * trr_04z;
                    gout_0_27 += trr_01x * trr_01y * trr_01z;
                    gout_0_28 += trr_01x * trr_01y * trr_02z;
                    gout_0_29 += trr_01x * trr_01y * trr_03z;
                    gout_0_30 += trr_01x * trr_02y * wt;
                    gout_0_31 += trr_01x * trr_02y * trr_01z;
                    gout_0_32 += trr_01x * trr_02y * trr_02z;
                    gout_0_33 += trr_01x * trr_03y * wt;
                    gout_0_34 += trr_01x * trr_03y * trr_01z;
                    gout_0_35 += trr_01x * trr_04y * wt;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_0_37 += trr_02x * 1 * trr_01z;
                    gout_0_38 += trr_02x * 1 * trr_02z;
                    gout_0_39 += trr_02x * 1 * trr_03z;
                    gout_0_40 += trr_02x * trr_01y * wt;
                    gout_0_41 += trr_02x * trr_01y * trr_01z;
                    gout_0_42 += trr_02x * trr_01y * trr_02z;
                    gout_0_43 += trr_02x * trr_02y * wt;
                    gout_0_44 += trr_02x * trr_02y * trr_01z;
                    gout_0_45 += trr_02x * trr_03y * wt;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    gout_0_46 += trr_03x * 1 * wt;
                    gout_0_47 += trr_03x * 1 * trr_01z;
                    gout_0_48 += trr_03x * 1 * trr_02z;
                    gout_0_49 += trr_03x * trr_01y * wt;
                    gout_0_50 += trr_03x * trr_01y * trr_01z;
                    gout_0_51 += trr_03x * trr_02y * wt;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    gout_0_52 += trr_04x * 1 * wt;
                    gout_0_53 += trr_04x * 1 * trr_01z;
                    gout_0_54 += trr_04x * trr_01y * wt;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    gout_0_55 += trr_05x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_3*dm2[kl_pair0+3] + gout_0_4*dm2[kl_pair0+4] + gout_0_5*dm2[kl_pair0+5] + gout_0_8*dm2[kl_pair0+8] + gout_0_9*dm2[kl_pair0+9] + gout_0_10*dm2[kl_pair0+10] + gout_0_12*dm2[kl_pair0+12] + gout_0_13*dm2[kl_pair0+13] + gout_0_14*dm2[kl_pair0+14] + gout_0_15*dm2[kl_pair0+15] + gout_0_16*dm2[kl_pair0+16] + gout_0_17*dm2[kl_pair0+17] + gout_0_18*dm2[kl_pair0+18] + gout_0_19*dm2[kl_pair0+19] + gout_0_20*dm2[kl_pair0+20] + gout_0_23*dm2[kl_pair0+23] + gout_0_24*dm2[kl_pair0+24] + gout_0_25*dm2[kl_pair0+25] + gout_0_27*dm2[kl_pair0+27] + gout_0_28*dm2[kl_pair0+28] + gout_0_29*dm2[kl_pair0+29] + gout_0_30*dm2[kl_pair0+30] + gout_0_31*dm2[kl_pair0+31] + gout_0_32*dm2[kl_pair0+32] + gout_0_33*dm2[kl_pair0+33] + gout_0_34*dm2[kl_pair0+34] + gout_0_35*dm2[kl_pair0+35] + gout_0_37*dm2[kl_pair0+37] + gout_0_38*dm2[kl_pair0+38] + gout_0_39*dm2[kl_pair0+39] + gout_0_40*dm2[kl_pair0+40] + gout_0_41*dm2[kl_pair0+41] + gout_0_42*dm2[kl_pair0+42] + gout_0_43*dm2[kl_pair0+43] + gout_0_44*dm2[kl_pair0+44] + gout_0_45*dm2[kl_pair0+45] + gout_0_46*dm2[kl_pair0+46] + gout_0_47*dm2[kl_pair0+47] + gout_0_48*dm2[kl_pair0+48] + gout_0_49*dm2[kl_pair0+49] + gout_0_50*dm2[kl_pair0+50] + gout_0_51*dm2[kl_pair0+51] + gout_0_52*dm2[kl_pair0+52] + gout_0_53*dm2[kl_pair0+53] + gout_0_54*dm2[kl_pair0+54] + gout_0_55*dm2[kl_pair0+55]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+4, gout_0_4*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+5, gout_0_5*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+8, gout_0_8*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+9, gout_0_9*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+10, gout_0_10*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+12, gout_0_12*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+13, gout_0_13*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+14, gout_0_14*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+15, gout_0_15*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+16, gout_0_16*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+17, gout_0_17*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+18, gout_0_18*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+19, gout_0_19*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+20, gout_0_20*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+23, gout_0_23*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+24, gout_0_24*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+25, gout_0_25*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+27, gout_0_27*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+28, gout_0_28*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+29, gout_0_29*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+30, gout_0_30*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+31, gout_0_31*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+32, gout_0_32*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+33, gout_0_33*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+34, gout_0_34*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+35, gout_0_35*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+37, gout_0_37*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+38, gout_0_38*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+39, gout_0_39*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+40, gout_0_40*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+41, gout_0_41*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+42, gout_0_42*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+43, gout_0_43*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+44, gout_0_44*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+45, gout_0_45*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+46, gout_0_46*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+47, gout_0_47*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+48, gout_0_48*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+49, gout_0_49*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+50, gout_0_50*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+51, gout_0_51*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+52, gout_0_52*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+53, gout_0_53*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+54, gout_0_54*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+55, gout_0_55*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_0_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_0_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_0_3 = 0.;
        double gout_0_4 = 0.;
        double gout_0_5 = 0.;
        double gout_0_6 = 0.;
        double gout_0_9 = 0.;
        double gout_0_10 = 0.;
        double gout_0_11 = 0.;
        double gout_0_12 = 0.;
        double gout_0_14 = 0.;
        double gout_0_15 = 0.;
        double gout_0_16 = 0.;
        double gout_0_17 = 0.;
        double gout_0_18 = 0.;
        double gout_0_19 = 0.;
        double gout_0_20 = 0.;
        double gout_0_21 = 0.;
        double gout_0_22 = 0.;
        double gout_0_23 = 0.;
        double gout_0_24 = 0.;
        double gout_0_25 = 0.;
        double gout_0_26 = 0.;
        double gout_0_27 = 0.;
        double gout_0_30 = 0.;
        double gout_0_31 = 0.;
        double gout_0_32 = 0.;
        double gout_0_33 = 0.;
        double gout_0_35 = 0.;
        double gout_0_36 = 0.;
        double gout_0_37 = 0.;
        double gout_0_38 = 0.;
        double gout_0_39 = 0.;
        double gout_0_40 = 0.;
        double gout_0_41 = 0.;
        double gout_0_42 = 0.;
        double gout_0_43 = 0.;
        double gout_0_44 = 0.;
        double gout_0_45 = 0.;
        double gout_0_46 = 0.;
        double gout_0_47 = 0.;
        double gout_0_48 = 0.;
        double gout_0_50 = 0.;
        double gout_0_51 = 0.;
        double gout_0_52 = 0.;
        double gout_0_53 = 0.;
        double gout_0_54 = 0.;
        double gout_0_55 = 0.;
        double gout_0_56 = 0.;
        double gout_0_57 = 0.;
        double gout_0_58 = 0.;
        double gout_0_59 = 0.;
        double gout_0_60 = 0.;
        double gout_0_61 = 0.;
        double gout_0_62 = 0.;
        double gout_0_63 = 0.;
        double gout_0_64 = 0.;
        double gout_0_65 = 0.;
        double gout_0_66 = 0.;
        double gout_0_67 = 0.;
        double gout_0_68 = 0.;
        double gout_0_69 = 0.;
        double gout_0_70 = 0.;
        double gout_0_71 = 0.;
        double gout_0_72 = 0.;
        double gout_0_73 = 0.;
        double gout_0_74 = 0.;
        double gout_0_75 = 0.;
        double gout_0_76 = 0.;
        double gout_0_77 = 0.;
        double gout_0_78 = 0.;
        double gout_0_79 = 0.;
        double gout_0_80 = 0.;
        double gout_0_81 = 0.;
        double gout_0_82 = 0.;
        double gout_0_83 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_01z = cpz * wt;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    gout_0_3 += fac * 1 * trr_03z;
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    gout_0_4 += fac * 1 * trr_04z;
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    gout_0_5 += fac * 1 * trr_05z;
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    gout_0_6 += fac * 1 * trr_06z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_0_9 += fac * trr_01y * trr_02z;
                    gout_0_10 += fac * trr_01y * trr_03z;
                    gout_0_11 += fac * trr_01y * trr_04z;
                    gout_0_12 += fac * trr_01y * trr_05z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_0_14 += fac * trr_02y * trr_01z;
                    gout_0_15 += fac * trr_02y * trr_02z;
                    gout_0_16 += fac * trr_02y * trr_03z;
                    gout_0_17 += fac * trr_02y * trr_04z;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    gout_0_18 += fac * trr_03y * wt;
                    gout_0_19 += fac * trr_03y * trr_01z;
                    gout_0_20 += fac * trr_03y * trr_02z;
                    gout_0_21 += fac * trr_03y * trr_03z;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    gout_0_22 += fac * trr_04y * wt;
                    gout_0_23 += fac * trr_04y * trr_01z;
                    gout_0_24 += fac * trr_04y * trr_02z;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    gout_0_25 += fac * trr_05y * wt;
                    gout_0_26 += fac * trr_05y * trr_01z;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    gout_0_27 += fac * trr_06y * wt;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_0_30 += trr_01x * 1 * trr_02z;
                    gout_0_31 += trr_01x * 1 * trr_03z;
                    gout_0_32 += trr_01x * 1 * trr_04z;
                    gout_0_33 += trr_01x * 1 * trr_05z;
                    gout_0_35 += trr_01x * trr_01y * trr_01z;
                    gout_0_36 += trr_01x * trr_01y * trr_02z;
                    gout_0_37 += trr_01x * trr_01y * trr_03z;
                    gout_0_38 += trr_01x * trr_01y * trr_04z;
                    gout_0_39 += trr_01x * trr_02y * wt;
                    gout_0_40 += trr_01x * trr_02y * trr_01z;
                    gout_0_41 += trr_01x * trr_02y * trr_02z;
                    gout_0_42 += trr_01x * trr_02y * trr_03z;
                    gout_0_43 += trr_01x * trr_03y * wt;
                    gout_0_44 += trr_01x * trr_03y * trr_01z;
                    gout_0_45 += trr_01x * trr_03y * trr_02z;
                    gout_0_46 += trr_01x * trr_04y * wt;
                    gout_0_47 += trr_01x * trr_04y * trr_01z;
                    gout_0_48 += trr_01x * trr_05y * wt;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_0_50 += trr_02x * 1 * trr_01z;
                    gout_0_51 += trr_02x * 1 * trr_02z;
                    gout_0_52 += trr_02x * 1 * trr_03z;
                    gout_0_53 += trr_02x * 1 * trr_04z;
                    gout_0_54 += trr_02x * trr_01y * wt;
                    gout_0_55 += trr_02x * trr_01y * trr_01z;
                    gout_0_56 += trr_02x * trr_01y * trr_02z;
                    gout_0_57 += trr_02x * trr_01y * trr_03z;
                    gout_0_58 += trr_02x * trr_02y * wt;
                    gout_0_59 += trr_02x * trr_02y * trr_01z;
                    gout_0_60 += trr_02x * trr_02y * trr_02z;
                    gout_0_61 += trr_02x * trr_03y * wt;
                    gout_0_62 += trr_02x * trr_03y * trr_01z;
                    gout_0_63 += trr_02x * trr_04y * wt;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    gout_0_64 += trr_03x * 1 * wt;
                    gout_0_65 += trr_03x * 1 * trr_01z;
                    gout_0_66 += trr_03x * 1 * trr_02z;
                    gout_0_67 += trr_03x * 1 * trr_03z;
                    gout_0_68 += trr_03x * trr_01y * wt;
                    gout_0_69 += trr_03x * trr_01y * trr_01z;
                    gout_0_70 += trr_03x * trr_01y * trr_02z;
                    gout_0_71 += trr_03x * trr_02y * wt;
                    gout_0_72 += trr_03x * trr_02y * trr_01z;
                    gout_0_73 += trr_03x * trr_03y * wt;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    gout_0_74 += trr_04x * 1 * wt;
                    gout_0_75 += trr_04x * 1 * trr_01z;
                    gout_0_76 += trr_04x * 1 * trr_02z;
                    gout_0_77 += trr_04x * trr_01y * wt;
                    gout_0_78 += trr_04x * trr_01y * trr_01z;
                    gout_0_79 += trr_04x * trr_02y * wt;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    gout_0_80 += trr_05x * 1 * wt;
                    gout_0_81 += trr_05x * 1 * trr_01z;
                    gout_0_82 += trr_05x * trr_01y * wt;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    gout_0_83 += trr_06x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+0, gout_0_3*dm2[kl_pair0+3] + gout_0_4*dm2[kl_pair0+4] + gout_0_5*dm2[kl_pair0+5] + gout_0_6*dm2[kl_pair0+6] + gout_0_9*dm2[kl_pair0+9] + gout_0_10*dm2[kl_pair0+10] + gout_0_11*dm2[kl_pair0+11] + gout_0_12*dm2[kl_pair0+12] + gout_0_14*dm2[kl_pair0+14] + gout_0_15*dm2[kl_pair0+15] + gout_0_16*dm2[kl_pair0+16] + gout_0_17*dm2[kl_pair0+17] + gout_0_18*dm2[kl_pair0+18] + gout_0_19*dm2[kl_pair0+19] + gout_0_20*dm2[kl_pair0+20] + gout_0_21*dm2[kl_pair0+21] + gout_0_22*dm2[kl_pair0+22] + gout_0_23*dm2[kl_pair0+23] + gout_0_24*dm2[kl_pair0+24] + gout_0_25*dm2[kl_pair0+25] + gout_0_26*dm2[kl_pair0+26] + gout_0_27*dm2[kl_pair0+27] + gout_0_30*dm2[kl_pair0+30] + gout_0_31*dm2[kl_pair0+31] + gout_0_32*dm2[kl_pair0+32] + gout_0_33*dm2[kl_pair0+33] + gout_0_35*dm2[kl_pair0+35] + gout_0_36*dm2[kl_pair0+36] + gout_0_37*dm2[kl_pair0+37] + gout_0_38*dm2[kl_pair0+38] + gout_0_39*dm2[kl_pair0+39] + gout_0_40*dm2[kl_pair0+40] + gout_0_41*dm2[kl_pair0+41] + gout_0_42*dm2[kl_pair0+42] + gout_0_43*dm2[kl_pair0+43] + gout_0_44*dm2[kl_pair0+44] + gout_0_45*dm2[kl_pair0+45] + gout_0_46*dm2[kl_pair0+46] + gout_0_47*dm2[kl_pair0+47] + gout_0_48*dm2[kl_pair0+48] + gout_0_50*dm2[kl_pair0+50] + gout_0_51*dm2[kl_pair0+51] + gout_0_52*dm2[kl_pair0+52] + gout_0_53*dm2[kl_pair0+53] + gout_0_54*dm2[kl_pair0+54] + gout_0_55*dm2[kl_pair0+55] + gout_0_56*dm2[kl_pair0+56] + gout_0_57*dm2[kl_pair0+57] + gout_0_58*dm2[kl_pair0+58] + gout_0_59*dm2[kl_pair0+59] + gout_0_60*dm2[kl_pair0+60] + gout_0_61*dm2[kl_pair0+61] + gout_0_62*dm2[kl_pair0+62] + gout_0_63*dm2[kl_pair0+63] + gout_0_64*dm2[kl_pair0+64] + gout_0_65*dm2[kl_pair0+65] + gout_0_66*dm2[kl_pair0+66] + gout_0_67*dm2[kl_pair0+67] + gout_0_68*dm2[kl_pair0+68] + gout_0_69*dm2[kl_pair0+69] + gout_0_70*dm2[kl_pair0+70] + gout_0_71*dm2[kl_pair0+71] + gout_0_72*dm2[kl_pair0+72] + gout_0_73*dm2[kl_pair0+73] + gout_0_74*dm2[kl_pair0+74] + gout_0_75*dm2[kl_pair0+75] + gout_0_76*dm2[kl_pair0+76] + gout_0_77*dm2[kl_pair0+77] + gout_0_78*dm2[kl_pair0+78] + gout_0_79*dm2[kl_pair0+79] + gout_0_80*dm2[kl_pair0+80] + gout_0_81*dm2[kl_pair0+81] + gout_0_82*dm2[kl_pair0+82] + gout_0_83*dm2[kl_pair0+83]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+3, gout_0_3*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+4, gout_0_4*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+5, gout_0_5*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+6, gout_0_6*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+9, gout_0_9*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+10, gout_0_10*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+11, gout_0_11*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+12, gout_0_12*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+14, gout_0_14*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+15, gout_0_15*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+16, gout_0_16*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+17, gout_0_17*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+18, gout_0_18*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+19, gout_0_19*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+20, gout_0_20*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+21, gout_0_21*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+22, gout_0_22*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+23, gout_0_23*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+24, gout_0_24*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+25, gout_0_25*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+26, gout_0_26*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+27, gout_0_27*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+30, gout_0_30*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+31, gout_0_31*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+32, gout_0_32*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+33, gout_0_33*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+35, gout_0_35*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+36, gout_0_36*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+37, gout_0_37*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+38, gout_0_38*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+39, gout_0_39*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+40, gout_0_40*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+41, gout_0_41*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+42, gout_0_42*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+43, gout_0_43*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+44, gout_0_44*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+45, gout_0_45*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+46, gout_0_46*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+47, gout_0_47*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+48, gout_0_48*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+50, gout_0_50*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+51, gout_0_51*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+52, gout_0_52*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+53, gout_0_53*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+54, gout_0_54*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+55, gout_0_55*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+56, gout_0_56*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+57, gout_0_57*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+58, gout_0_58*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+59, gout_0_59*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+60, gout_0_60*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+61, gout_0_61*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+62, gout_0_62*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+63, gout_0_63*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+64, gout_0_64*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+65, gout_0_65*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+66, gout_0_66*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+67, gout_0_67*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+68, gout_0_68*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+69, gout_0_69*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+70, gout_0_70*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+71, gout_0_71*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+72, gout_0_72*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+73, gout_0_73*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+74, gout_0_74*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+75, gout_0_75*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+76, gout_0_76*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+77, gout_0_77*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+78, gout_0_78*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+79, gout_0_79*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+80, gout_0_80*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+81, gout_0_81*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+82, gout_0_82*dm1[ij_pair0+0]);
            atomicAdd(vj2+kl_pair0+83, gout_0_83*dm1[ij_pair0+0]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_0_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_0_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_0 = 0.;
        double gout_2_0 = 0.;
        double gout_3_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(1, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(1, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 1; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 1; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    gout_1_0 += fac * 1 * trr_10z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_2_0 += fac * trr_10y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_3_0 += trr_10x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+2, gout_2_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_1_0*dm1[ij_pair0+1] + gout_2_0*dm1[ij_pair0+2] + gout_3_0*dm1[ij_pair0+3]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_1_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_1 = 0.;
        double gout_1_2 = 0.;
        double gout_1_3 = 0.;
        double gout_2_1 = 0.;
        double gout_2_2 = 0.;
        double gout_2_3 = 0.;
        double gout_3_1 = 0.;
        double gout_3_2 = 0.;
        double gout_3_3 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    gout_1_1 += fac * 1 * trr_11z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_1_2 += fac * trr_01y * trr_10z;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_1_3 += trr_01x * 1 * trr_10z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_01z = cpz * wt;
                    gout_2_1 += fac * trr_10y * trr_01z;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    gout_2_2 += fac * trr_11y * wt;
                    gout_2_3 += trr_01x * trr_10y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_3_1 += trr_10x * 1 * trr_01z;
                    gout_3_2 += trr_10x * trr_01y * wt;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    gout_3_3 += trr_11x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_1*dm2[kl_pair0+1] + gout_1_2*dm2[kl_pair0+2] + gout_1_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+2, gout_2_1*dm2[kl_pair0+1] + gout_2_2*dm2[kl_pair0+2] + gout_2_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+3, gout_3_1*dm2[kl_pair0+1] + gout_3_2*dm2[kl_pair0+2] + gout_3_3*dm2[kl_pair0+3]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_1_1*dm1[ij_pair0+1] + gout_2_1*dm1[ij_pair0+2] + gout_3_1*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+2, gout_1_2*dm1[ij_pair0+1] + gout_2_2*dm1[ij_pair0+2] + gout_3_2*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+3, gout_1_3*dm1[ij_pair0+1] + gout_2_3*dm1[ij_pair0+2] + gout_3_3*dm1[ij_pair0+3]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_1_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_1 = 0.;
        double gout_1_2 = 0.;
        double gout_1_3 = 0.;
        double gout_1_4 = 0.;
        double gout_1_5 = 0.;
        double gout_1_6 = 0.;
        double gout_1_7 = 0.;
        double gout_1_8 = 0.;
        double gout_1_9 = 0.;
        double gout_2_1 = 0.;
        double gout_2_2 = 0.;
        double gout_2_3 = 0.;
        double gout_2_4 = 0.;
        double gout_2_5 = 0.;
        double gout_2_6 = 0.;
        double gout_2_7 = 0.;
        double gout_2_8 = 0.;
        double gout_2_9 = 0.;
        double gout_3_1 = 0.;
        double gout_3_2 = 0.;
        double gout_3_3 = 0.;
        double gout_3_4 = 0.;
        double gout_3_5 = 0.;
        double gout_3_6 = 0.;
        double gout_3_7 = 0.;
        double gout_3_8 = 0.;
        double gout_3_9 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    gout_1_1 += fac * 1 * trr_11z;
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    gout_1_2 += fac * 1 * trr_12z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_1_3 += fac * trr_01y * trr_10z;
                    gout_1_4 += fac * trr_01y * trr_11z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_1_5 += fac * trr_02y * trr_10z;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_1_6 += trr_01x * 1 * trr_10z;
                    gout_1_7 += trr_01x * 1 * trr_11z;
                    gout_1_8 += trr_01x * trr_01y * trr_10z;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_1_9 += trr_02x * 1 * trr_10z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_2_1 += fac * trr_10y * trr_01z;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    gout_2_2 += fac * trr_10y * trr_02z;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    gout_2_3 += fac * trr_11y * wt;
                    gout_2_4 += fac * trr_11y * trr_01z;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    gout_2_5 += fac * trr_12y * wt;
                    gout_2_6 += trr_01x * trr_10y * wt;
                    gout_2_7 += trr_01x * trr_10y * trr_01z;
                    gout_2_8 += trr_01x * trr_11y * wt;
                    gout_2_9 += trr_02x * trr_10y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_3_1 += trr_10x * 1 * trr_01z;
                    gout_3_2 += trr_10x * 1 * trr_02z;
                    gout_3_3 += trr_10x * trr_01y * wt;
                    gout_3_4 += trr_10x * trr_01y * trr_01z;
                    gout_3_5 += trr_10x * trr_02y * wt;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    gout_3_6 += trr_11x * 1 * wt;
                    gout_3_7 += trr_11x * 1 * trr_01z;
                    gout_3_8 += trr_11x * trr_01y * wt;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    gout_3_9 += trr_12x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_1*dm2[kl_pair0+1] + gout_1_2*dm2[kl_pair0+2] + gout_1_3*dm2[kl_pair0+3] + gout_1_4*dm2[kl_pair0+4] + gout_1_5*dm2[kl_pair0+5] + gout_1_6*dm2[kl_pair0+6] + gout_1_7*dm2[kl_pair0+7] + gout_1_8*dm2[kl_pair0+8] + gout_1_9*dm2[kl_pair0+9]);
            atomicAdd(vj1+ij_pair0+2, gout_2_1*dm2[kl_pair0+1] + gout_2_2*dm2[kl_pair0+2] + gout_2_3*dm2[kl_pair0+3] + gout_2_4*dm2[kl_pair0+4] + gout_2_5*dm2[kl_pair0+5] + gout_2_6*dm2[kl_pair0+6] + gout_2_7*dm2[kl_pair0+7] + gout_2_8*dm2[kl_pair0+8] + gout_2_9*dm2[kl_pair0+9]);
            atomicAdd(vj1+ij_pair0+3, gout_3_1*dm2[kl_pair0+1] + gout_3_2*dm2[kl_pair0+2] + gout_3_3*dm2[kl_pair0+3] + gout_3_4*dm2[kl_pair0+4] + gout_3_5*dm2[kl_pair0+5] + gout_3_6*dm2[kl_pair0+6] + gout_3_7*dm2[kl_pair0+7] + gout_3_8*dm2[kl_pair0+8] + gout_3_9*dm2[kl_pair0+9]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_1_1*dm1[ij_pair0+1] + gout_2_1*dm1[ij_pair0+2] + gout_3_1*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+2, gout_1_2*dm1[ij_pair0+1] + gout_2_2*dm1[ij_pair0+2] + gout_3_2*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+3, gout_1_3*dm1[ij_pair0+1] + gout_2_3*dm1[ij_pair0+2] + gout_3_3*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+4, gout_1_4*dm1[ij_pair0+1] + gout_2_4*dm1[ij_pair0+2] + gout_3_4*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+5, gout_1_5*dm1[ij_pair0+1] + gout_2_5*dm1[ij_pair0+2] + gout_3_5*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+6, gout_1_6*dm1[ij_pair0+1] + gout_2_6*dm1[ij_pair0+2] + gout_3_6*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+7, gout_1_7*dm1[ij_pair0+1] + gout_2_7*dm1[ij_pair0+2] + gout_3_7*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+8, gout_1_8*dm1[ij_pair0+1] + gout_2_8*dm1[ij_pair0+2] + gout_3_8*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+9, gout_1_9*dm1[ij_pair0+1] + gout_2_9*dm1[ij_pair0+2] + gout_3_9*dm1[ij_pair0+3]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_1_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_2 = 0.;
        double gout_1_3 = 0.;
        double gout_1_5 = 0.;
        double gout_1_6 = 0.;
        double gout_1_7 = 0.;
        double gout_1_8 = 0.;
        double gout_1_9 = 0.;
        double gout_1_11 = 0.;
        double gout_1_12 = 0.;
        double gout_1_13 = 0.;
        double gout_1_14 = 0.;
        double gout_1_15 = 0.;
        double gout_1_16 = 0.;
        double gout_1_17 = 0.;
        double gout_1_18 = 0.;
        double gout_1_19 = 0.;
        double gout_2_2 = 0.;
        double gout_2_3 = 0.;
        double gout_2_5 = 0.;
        double gout_2_6 = 0.;
        double gout_2_7 = 0.;
        double gout_2_8 = 0.;
        double gout_2_9 = 0.;
        double gout_2_11 = 0.;
        double gout_2_12 = 0.;
        double gout_2_13 = 0.;
        double gout_2_14 = 0.;
        double gout_2_15 = 0.;
        double gout_2_16 = 0.;
        double gout_2_17 = 0.;
        double gout_2_18 = 0.;
        double gout_2_19 = 0.;
        double gout_3_2 = 0.;
        double gout_3_3 = 0.;
        double gout_3_5 = 0.;
        double gout_3_6 = 0.;
        double gout_3_7 = 0.;
        double gout_3_8 = 0.;
        double gout_3_9 = 0.;
        double gout_3_11 = 0.;
        double gout_3_12 = 0.;
        double gout_3_13 = 0.;
        double gout_3_14 = 0.;
        double gout_3_15 = 0.;
        double gout_3_16 = 0.;
        double gout_3_17 = 0.;
        double gout_3_18 = 0.;
        double gout_3_19 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    gout_1_2 += fac * 1 * trr_12z;
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    gout_1_3 += fac * 1 * trr_13z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_1_5 += fac * trr_01y * trr_11z;
                    gout_1_6 += fac * trr_01y * trr_12z;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    gout_1_7 += fac * trr_02y * trr_10z;
                    gout_1_8 += fac * trr_02y * trr_11z;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    gout_1_9 += fac * trr_03y * trr_10z;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_1_11 += trr_01x * 1 * trr_11z;
                    gout_1_12 += trr_01x * 1 * trr_12z;
                    gout_1_13 += trr_01x * trr_01y * trr_10z;
                    gout_1_14 += trr_01x * trr_01y * trr_11z;
                    gout_1_15 += trr_01x * trr_02y * trr_10z;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    gout_1_16 += trr_02x * 1 * trr_10z;
                    gout_1_17 += trr_02x * 1 * trr_11z;
                    gout_1_18 += trr_02x * trr_01y * trr_10z;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    gout_1_19 += trr_03x * 1 * trr_10z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_2_2 += fac * trr_10y * trr_02z;
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    gout_2_3 += fac * trr_10y * trr_03z;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    gout_2_5 += fac * trr_11y * trr_01z;
                    gout_2_6 += fac * trr_11y * trr_02z;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    gout_2_7 += fac * trr_12y * wt;
                    gout_2_8 += fac * trr_12y * trr_01z;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    gout_2_9 += fac * trr_13y * wt;
                    gout_2_11 += trr_01x * trr_10y * trr_01z;
                    gout_2_12 += trr_01x * trr_10y * trr_02z;
                    gout_2_13 += trr_01x * trr_11y * wt;
                    gout_2_14 += trr_01x * trr_11y * trr_01z;
                    gout_2_15 += trr_01x * trr_12y * wt;
                    gout_2_16 += trr_02x * trr_10y * wt;
                    gout_2_17 += trr_02x * trr_10y * trr_01z;
                    gout_2_18 += trr_02x * trr_11y * wt;
                    gout_2_19 += trr_03x * trr_10y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_3_2 += trr_10x * 1 * trr_02z;
                    gout_3_3 += trr_10x * 1 * trr_03z;
                    gout_3_5 += trr_10x * trr_01y * trr_01z;
                    gout_3_6 += trr_10x * trr_01y * trr_02z;
                    gout_3_7 += trr_10x * trr_02y * wt;
                    gout_3_8 += trr_10x * trr_02y * trr_01z;
                    gout_3_9 += trr_10x * trr_03y * wt;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    gout_3_11 += trr_11x * 1 * trr_01z;
                    gout_3_12 += trr_11x * 1 * trr_02z;
                    gout_3_13 += trr_11x * trr_01y * wt;
                    gout_3_14 += trr_11x * trr_01y * trr_01z;
                    gout_3_15 += trr_11x * trr_02y * wt;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    gout_3_16 += trr_12x * 1 * wt;
                    gout_3_17 += trr_12x * 1 * trr_01z;
                    gout_3_18 += trr_12x * trr_01y * wt;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    gout_3_19 += trr_13x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_2*dm2[kl_pair0+2] + gout_1_3*dm2[kl_pair0+3] + gout_1_5*dm2[kl_pair0+5] + gout_1_6*dm2[kl_pair0+6] + gout_1_7*dm2[kl_pair0+7] + gout_1_8*dm2[kl_pair0+8] + gout_1_9*dm2[kl_pair0+9] + gout_1_11*dm2[kl_pair0+11] + gout_1_12*dm2[kl_pair0+12] + gout_1_13*dm2[kl_pair0+13] + gout_1_14*dm2[kl_pair0+14] + gout_1_15*dm2[kl_pair0+15] + gout_1_16*dm2[kl_pair0+16] + gout_1_17*dm2[kl_pair0+17] + gout_1_18*dm2[kl_pair0+18] + gout_1_19*dm2[kl_pair0+19]);
            atomicAdd(vj1+ij_pair0+2, gout_2_2*dm2[kl_pair0+2] + gout_2_3*dm2[kl_pair0+3] + gout_2_5*dm2[kl_pair0+5] + gout_2_6*dm2[kl_pair0+6] + gout_2_7*dm2[kl_pair0+7] + gout_2_8*dm2[kl_pair0+8] + gout_2_9*dm2[kl_pair0+9] + gout_2_11*dm2[kl_pair0+11] + gout_2_12*dm2[kl_pair0+12] + gout_2_13*dm2[kl_pair0+13] + gout_2_14*dm2[kl_pair0+14] + gout_2_15*dm2[kl_pair0+15] + gout_2_16*dm2[kl_pair0+16] + gout_2_17*dm2[kl_pair0+17] + gout_2_18*dm2[kl_pair0+18] + gout_2_19*dm2[kl_pair0+19]);
            atomicAdd(vj1+ij_pair0+3, gout_3_2*dm2[kl_pair0+2] + gout_3_3*dm2[kl_pair0+3] + gout_3_5*dm2[kl_pair0+5] + gout_3_6*dm2[kl_pair0+6] + gout_3_7*dm2[kl_pair0+7] + gout_3_8*dm2[kl_pair0+8] + gout_3_9*dm2[kl_pair0+9] + gout_3_11*dm2[kl_pair0+11] + gout_3_12*dm2[kl_pair0+12] + gout_3_13*dm2[kl_pair0+13] + gout_3_14*dm2[kl_pair0+14] + gout_3_15*dm2[kl_pair0+15] + gout_3_16*dm2[kl_pair0+16] + gout_3_17*dm2[kl_pair0+17] + gout_3_18*dm2[kl_pair0+18] + gout_3_19*dm2[kl_pair0+19]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+2, gout_1_2*dm1[ij_pair0+1] + gout_2_2*dm1[ij_pair0+2] + gout_3_2*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+3, gout_1_3*dm1[ij_pair0+1] + gout_2_3*dm1[ij_pair0+2] + gout_3_3*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+5, gout_1_5*dm1[ij_pair0+1] + gout_2_5*dm1[ij_pair0+2] + gout_3_5*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+6, gout_1_6*dm1[ij_pair0+1] + gout_2_6*dm1[ij_pair0+2] + gout_3_6*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+7, gout_1_7*dm1[ij_pair0+1] + gout_2_7*dm1[ij_pair0+2] + gout_3_7*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+8, gout_1_8*dm1[ij_pair0+1] + gout_2_8*dm1[ij_pair0+2] + gout_3_8*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+9, gout_1_9*dm1[ij_pair0+1] + gout_2_9*dm1[ij_pair0+2] + gout_3_9*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+11, gout_1_11*dm1[ij_pair0+1] + gout_2_11*dm1[ij_pair0+2] + gout_3_11*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+12, gout_1_12*dm1[ij_pair0+1] + gout_2_12*dm1[ij_pair0+2] + gout_3_12*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+13, gout_1_13*dm1[ij_pair0+1] + gout_2_13*dm1[ij_pair0+2] + gout_3_13*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+14, gout_1_14*dm1[ij_pair0+1] + gout_2_14*dm1[ij_pair0+2] + gout_3_14*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+15, gout_1_15*dm1[ij_pair0+1] + gout_2_15*dm1[ij_pair0+2] + gout_3_15*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+16, gout_1_16*dm1[ij_pair0+1] + gout_2_16*dm1[ij_pair0+2] + gout_3_16*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+17, gout_1_17*dm1[ij_pair0+1] + gout_2_17*dm1[ij_pair0+2] + gout_3_17*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+18, gout_1_18*dm1[ij_pair0+1] + gout_2_18*dm1[ij_pair0+2] + gout_3_18*dm1[ij_pair0+3]);
            atomicAdd(vj2+kl_pair0+19, gout_1_19*dm1[ij_pair0+1] + gout_2_19*dm1[ij_pair0+2] + gout_3_19*dm1[ij_pair0+3]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_1_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 4*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 4*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_001 = 0;
        double vj_ij_010 = 0;
        double vj_ij_100 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+3*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010;
                    double dot_lij_y_100 = 1 * dot_lij_z_100;
                    double dot_lij_y_101 = 1 * dot_lij_z_101;
                    double dot_lij_y_102 = 1 * dot_lij_z_102;
                    double dot_lij_y_103 = 1 * dot_lij_z_103;
                    double dot_lij_y_104 = 1 * dot_lij_z_104;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_010);
        atomicAdd(vj1+ij_pair0+3, vj_ij_100);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_1_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 4*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 4*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_001 = 0;
        double vj_ij_010 = 0;
        double vj_ij_100 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_005 = trr_15z * dm_ij_cache[sh_ij+1*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_015 = trr_05z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_105 = trr_05z * dm_ij_cache[sh_ij+3*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010;
                    double dot_lij_y_100 = 1 * dot_lij_z_100;
                    double dot_lij_y_101 = 1 * dot_lij_z_101;
                    double dot_lij_y_102 = 1 * dot_lij_z_102;
                    double dot_lij_y_103 = 1 * dot_lij_z_103;
                    double dot_lij_y_104 = 1 * dot_lij_z_104;
                    double dot_lij_y_105 = 1 * dot_lij_z_105;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401 + trr_05x * dot_lkl_y_501;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410 + trr_05x * dot_lkl_y_510;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400 + trr_15x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_010);
        atomicAdd(vj1+ij_pair0+3, vj_ij_100);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_1_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_1_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 4*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 4*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_001 = 0;
        double vj_ij_010 = 0;
        double vj_ij_100 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_005 = trr_15z * dm_ij_cache[sh_ij+1*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double dot_lij_z_006 = trr_16z * dm_ij_cache[sh_ij+1*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_015 = trr_05z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_016 = trr_06z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_105 = trr_05z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_106 = trr_06z * dm_ij_cache[sh_ij+3*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010;
                    double dot_lij_y_100 = 1 * dot_lij_z_100;
                    double dot_lij_y_101 = 1 * dot_lij_z_101;
                    double dot_lij_y_102 = 1 * dot_lij_z_102;
                    double dot_lij_y_103 = 1 * dot_lij_z_103;
                    double dot_lij_y_104 = 1 * dot_lij_z_104;
                    double dot_lij_y_105 = 1 * dot_lij_z_105;
                    double dot_lij_y_106 = 1 * dot_lij_z_106;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401 + trr_05x * dot_lkl_y_501 + trr_06x * dot_lkl_y_601;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410 + trr_05x * dot_lkl_y_510 + trr_06x * dot_lkl_y_610;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400 + trr_15x * dot_lkl_y_500 + trr_16x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_010);
        atomicAdd(vj1+ij_pair0+3, vj_ij_100);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_1_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_1_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_0 = 0.;
        double gout_2_0 = 0.;
        double gout_3_0 = 0.;
        double gout_4_0 = 0.;
        double gout_5_0 = 0.;
        double gout_6_0 = 0.;
        double gout_7_0 = 0.;
        double gout_8_0 = 0.;
        double gout_9_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    gout_1_0 += fac * 1 * trr_10z;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    gout_2_0 += fac * 1 * trr_20z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_3_0 += fac * trr_10y * wt;
                    gout_4_0 += fac * trr_10y * trr_10z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_5_0 += fac * trr_20y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_6_0 += trr_10x * 1 * wt;
                    gout_7_0 += trr_10x * 1 * trr_10z;
                    gout_8_0 += trr_10x * trr_10y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_9_0 += trr_20x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+2, gout_2_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+4, gout_4_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+5, gout_5_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+6, gout_6_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+7, gout_7_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+8, gout_8_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+9, gout_9_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_1_0*dm1[ij_pair0+1] + gout_2_0*dm1[ij_pair0+2] + gout_3_0*dm1[ij_pair0+3] + gout_4_0*dm1[ij_pair0+4] + gout_5_0*dm1[ij_pair0+5] + gout_6_0*dm1[ij_pair0+6] + gout_7_0*dm1[ij_pair0+7] + gout_8_0*dm1[ij_pair0+8] + gout_9_0*dm1[ij_pair0+9]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
#if CUDA_VERSION >= 12040
__global__ __maxnreg__(128)
#else
__global__
#endif
void rys_j_2_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_1_1 = 0.;
        double gout_1_2 = 0.;
        double gout_1_3 = 0.;
        double gout_2_1 = 0.;
        double gout_2_2 = 0.;
        double gout_2_3 = 0.;
        double gout_3_1 = 0.;
        double gout_3_2 = 0.;
        double gout_3_3 = 0.;
        double gout_4_1 = 0.;
        double gout_4_2 = 0.;
        double gout_4_3 = 0.;
        double gout_5_1 = 0.;
        double gout_5_2 = 0.;
        double gout_5_3 = 0.;
        double gout_6_1 = 0.;
        double gout_6_2 = 0.;
        double gout_6_3 = 0.;
        double gout_7_1 = 0.;
        double gout_7_2 = 0.;
        double gout_7_3 = 0.;
        double gout_8_1 = 0.;
        double gout_8_2 = 0.;
        double gout_8_3 = 0.;
        double gout_9_1 = 0.;
        double gout_9_2 = 0.;
        double gout_9_3 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    gout_1_1 += fac * 1 * trr_11z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_1_2 += fac * trr_01y * trr_10z;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_1_3 += trr_01x * 1 * trr_10z;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    gout_2_1 += fac * 1 * trr_21z;
                    gout_2_2 += fac * trr_01y * trr_20z;
                    gout_2_3 += trr_01x * 1 * trr_20z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_01z = cpz * wt;
                    gout_3_1 += fac * trr_10y * trr_01z;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    gout_3_2 += fac * trr_11y * wt;
                    gout_3_3 += trr_01x * trr_10y * wt;
                    gout_4_1 += fac * trr_10y * trr_11z;
                    gout_4_2 += fac * trr_11y * trr_10z;
                    gout_4_3 += trr_01x * trr_10y * trr_10z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_5_1 += fac * trr_20y * trr_01z;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    gout_5_2 += fac * trr_21y * wt;
                    gout_5_3 += trr_01x * trr_20y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_6_1 += trr_10x * 1 * trr_01z;
                    gout_6_2 += trr_10x * trr_01y * wt;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    gout_6_3 += trr_11x * 1 * wt;
                    gout_7_1 += trr_10x * 1 * trr_11z;
                    gout_7_2 += trr_10x * trr_01y * trr_10z;
                    gout_7_3 += trr_11x * 1 * trr_10z;
                    gout_8_1 += trr_10x * trr_10y * trr_01z;
                    gout_8_2 += trr_10x * trr_11y * wt;
                    gout_8_3 += trr_11x * trr_10y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_9_1 += trr_20x * 1 * trr_01z;
                    gout_9_2 += trr_20x * trr_01y * wt;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    gout_9_3 += trr_21x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+1, gout_1_1*dm2[kl_pair0+1] + gout_1_2*dm2[kl_pair0+2] + gout_1_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+2, gout_2_1*dm2[kl_pair0+1] + gout_2_2*dm2[kl_pair0+2] + gout_2_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+3, gout_3_1*dm2[kl_pair0+1] + gout_3_2*dm2[kl_pair0+2] + gout_3_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+4, gout_4_1*dm2[kl_pair0+1] + gout_4_2*dm2[kl_pair0+2] + gout_4_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+5, gout_5_1*dm2[kl_pair0+1] + gout_5_2*dm2[kl_pair0+2] + gout_5_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+6, gout_6_1*dm2[kl_pair0+1] + gout_6_2*dm2[kl_pair0+2] + gout_6_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+7, gout_7_1*dm2[kl_pair0+1] + gout_7_2*dm2[kl_pair0+2] + gout_7_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+8, gout_8_1*dm2[kl_pair0+1] + gout_8_2*dm2[kl_pair0+2] + gout_8_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+9, gout_9_1*dm2[kl_pair0+1] + gout_9_2*dm2[kl_pair0+2] + gout_9_3*dm2[kl_pair0+3]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_1_1*dm1[ij_pair0+1] + gout_2_1*dm1[ij_pair0+2] + gout_3_1*dm1[ij_pair0+3] + gout_4_1*dm1[ij_pair0+4] + gout_5_1*dm1[ij_pair0+5] + gout_6_1*dm1[ij_pair0+6] + gout_7_1*dm1[ij_pair0+7] + gout_8_1*dm1[ij_pair0+8] + gout_9_1*dm1[ij_pair0+9]);
            atomicAdd(vj2+kl_pair0+2, gout_1_2*dm1[ij_pair0+1] + gout_2_2*dm1[ij_pair0+2] + gout_3_2*dm1[ij_pair0+3] + gout_4_2*dm1[ij_pair0+4] + gout_5_2*dm1[ij_pair0+5] + gout_6_2*dm1[ij_pair0+6] + gout_7_2*dm1[ij_pair0+7] + gout_8_2*dm1[ij_pair0+8] + gout_9_2*dm1[ij_pair0+9]);
            atomicAdd(vj2+kl_pair0+3, gout_1_3*dm1[ij_pair0+1] + gout_2_3*dm1[ij_pair0+2] + gout_3_3*dm1[ij_pair0+3] + gout_4_3*dm1[ij_pair0+4] + gout_5_3*dm1[ij_pair0+5] + gout_6_3*dm1[ij_pair0+6] + gout_7_3*dm1[ij_pair0+7] + gout_8_3*dm1[ij_pair0+8] + gout_9_3*dm1[ij_pair0+9]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_2_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 10*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 10*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_010 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+4];
        double dm_kl_020 = dm2[kl_pair0+5];
        double dm_kl_100 = dm2[kl_pair0+6];
        double dm_kl_101 = dm2[kl_pair0+7];
        double dm_kl_110 = dm2[kl_pair0+8];
        double dm_kl_200 = dm2[kl_pair0+9];
        double vj_ij_001 = 0;
        double vj_ij_002 = 0;
        double vj_ij_010 = 0;
        double vj_ij_011 = 0;
        double vj_ij_020 = 0;
        double vj_ij_100 = 0;
        double vj_ij_101 = 0;
        double vj_ij_110 = 0;
        double vj_ij_200 = 0;
        double vj_kl_001 = 0;
        double vj_kl_002 = 0;
        double vj_kl_010 = 0;
        double vj_kl_011 = 0;
        double vj_kl_020 = 0;
        double vj_kl_100 = 0;
        double vj_kl_101 = 0;
        double vj_kl_110 = 0;
        double vj_kl_200 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2] + trr_20z * dm_ij_cache[sh_ij+2*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2] + trr_21z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2] + trr_22z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+3*TILE2] + trr_10z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+3*TILE2] + trr_11z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+3*TILE2] + trr_12z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+6*TILE2] + trr_10z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+6*TILE2] + trr_11z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+6*TILE2] + trr_12z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110;
                    double dot_lij_y_200 = 1 * dot_lij_z_200;
                    double dot_lij_y_201 = 1 * dot_lij_z_201;
                    double dot_lij_y_202 = 1 * dot_lij_z_202;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001 + trr_02z * dm_kl_002;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001 + trr_12z * dm_kl_002;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001 + trr_22z * dm_kl_002;
                    double dot_lkl_z_010 = wt * dm_kl_010 + trr_01z * dm_kl_011;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010 + trr_11z * dm_kl_011;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010 + trr_21z * dm_kl_011;
                    double dot_lkl_z_020 = wt * dm_kl_020;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020;
                    double dot_lkl_z_100 = wt * dm_kl_100 + trr_01z * dm_kl_101;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100 + trr_11z * dm_kl_101;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100 + trr_21z * dm_kl_101;
                    double dot_lkl_z_110 = wt * dm_kl_110;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110;
                    double dot_lkl_z_200 = wt * dm_kl_200;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_010);
        atomicAdd(vj1+ij_pair0+4, vj_ij_011);
        atomicAdd(vj1+ij_pair0+5, vj_ij_020);
        atomicAdd(vj1+ij_pair0+6, vj_ij_100);
        atomicAdd(vj1+ij_pair0+7, vj_ij_101);
        atomicAdd(vj1+ij_pair0+8, vj_ij_110);
        atomicAdd(vj1+ij_pair0+9, vj_ij_200);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_010);
        atomicAdd(vj2+kl_pair0+4, vj_kl_011);
        atomicAdd(vj2+kl_pair0+5, vj_kl_020);
        atomicAdd(vj2+kl_pair0+6, vj_kl_100);
        atomicAdd(vj2+kl_pair0+7, vj_kl_101);
        atomicAdd(vj2+kl_pair0+8, vj_kl_110);
        atomicAdd(vj2+kl_pair0+9, vj_kl_200);
    }
}
__global__
void rys_j_2_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 10*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 10*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+6];
        double dm_kl_020 = dm2[kl_pair0+7];
        double dm_kl_021 = dm2[kl_pair0+8];
        double dm_kl_030 = dm2[kl_pair0+9];
        double dm_kl_101 = dm2[kl_pair0+11];
        double dm_kl_102 = dm2[kl_pair0+12];
        double dm_kl_110 = dm2[kl_pair0+13];
        double dm_kl_111 = dm2[kl_pair0+14];
        double dm_kl_120 = dm2[kl_pair0+15];
        double dm_kl_200 = dm2[kl_pair0+16];
        double dm_kl_201 = dm2[kl_pair0+17];
        double dm_kl_210 = dm2[kl_pair0+18];
        double dm_kl_300 = dm2[kl_pair0+19];
        double vj_ij_001 = 0;
        double vj_ij_002 = 0;
        double vj_ij_010 = 0;
        double vj_ij_011 = 0;
        double vj_ij_020 = 0;
        double vj_ij_100 = 0;
        double vj_ij_101 = 0;
        double vj_ij_110 = 0;
        double vj_ij_200 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_030 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_120 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_210 = 0;
        double vj_kl_300 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2] + trr_20z * dm_ij_cache[sh_ij+2*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2] + trr_21z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2] + trr_22z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2] + trr_23z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+3*TILE2] + trr_10z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+3*TILE2] + trr_11z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+3*TILE2] + trr_12z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+3*TILE2] + trr_13z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+6*TILE2] + trr_10z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+6*TILE2] + trr_11z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+6*TILE2] + trr_12z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+6*TILE2] + trr_13z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110;
                    double dot_lij_y_200 = 1 * dot_lij_z_200;
                    double dot_lij_y_201 = 1 * dot_lij_z_201;
                    double dot_lij_y_202 = 1 * dot_lij_z_202;
                    double dot_lij_y_203 = 1 * dot_lij_z_203;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021;
                    double dot_lkl_z_030 = wt * dm_kl_030;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111;
                    double dot_lkl_z_120 = wt * dm_kl_120;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201;
                    double dot_lkl_z_210 = wt * dm_kl_210;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210;
                    double dot_lkl_z_300 = wt * dm_kl_300;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_010);
        atomicAdd(vj1+ij_pair0+4, vj_ij_011);
        atomicAdd(vj1+ij_pair0+5, vj_ij_020);
        atomicAdd(vj1+ij_pair0+6, vj_ij_100);
        atomicAdd(vj1+ij_pair0+7, vj_ij_101);
        atomicAdd(vj1+ij_pair0+8, vj_ij_110);
        atomicAdd(vj1+ij_pair0+9, vj_ij_200);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+5, vj_kl_011);
        atomicAdd(vj2+kl_pair0+6, vj_kl_012);
        atomicAdd(vj2+kl_pair0+7, vj_kl_020);
        atomicAdd(vj2+kl_pair0+8, vj_kl_021);
        atomicAdd(vj2+kl_pair0+9, vj_kl_030);
        atomicAdd(vj2+kl_pair0+11, vj_kl_101);
        atomicAdd(vj2+kl_pair0+12, vj_kl_102);
        atomicAdd(vj2+kl_pair0+13, vj_kl_110);
        atomicAdd(vj2+kl_pair0+14, vj_kl_111);
        atomicAdd(vj2+kl_pair0+15, vj_kl_120);
        atomicAdd(vj2+kl_pair0+16, vj_kl_200);
        atomicAdd(vj2+kl_pair0+17, vj_kl_201);
        atomicAdd(vj2+kl_pair0+18, vj_kl_210);
        atomicAdd(vj2+kl_pair0+19, vj_kl_300);
    }
}
__global__
void rys_j_2_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 10*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 10*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_001 = 0;
        double vj_ij_002 = 0;
        double vj_ij_010 = 0;
        double vj_ij_011 = 0;
        double vj_ij_020 = 0;
        double vj_ij_100 = 0;
        double vj_ij_101 = 0;
        double vj_ij_110 = 0;
        double vj_ij_200 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2] + trr_20z * dm_ij_cache[sh_ij+2*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2] + trr_21z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2] + trr_22z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2] + trr_23z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2] + trr_24z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+3*TILE2] + trr_10z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+3*TILE2] + trr_11z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+3*TILE2] + trr_12z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+3*TILE2] + trr_13z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+3*TILE2] + trr_14z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+6*TILE2] + trr_10z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+6*TILE2] + trr_11z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+6*TILE2] + trr_12z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+6*TILE2] + trr_13z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+6*TILE2] + trr_14z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110;
                    double dot_lij_y_200 = 1 * dot_lij_z_200;
                    double dot_lij_y_201 = 1 * dot_lij_z_201;
                    double dot_lij_y_202 = 1 * dot_lij_z_202;
                    double dot_lij_y_203 = 1 * dot_lij_z_203;
                    double dot_lij_y_204 = 1 * dot_lij_z_204;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003 + trr_24z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012 + trr_23z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021 + trr_22z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102 + trr_23z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111 + trr_22z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201 + trr_22z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_010);
        atomicAdd(vj1+ij_pair0+4, vj_ij_011);
        atomicAdd(vj1+ij_pair0+5, vj_ij_020);
        atomicAdd(vj1+ij_pair0+6, vj_ij_100);
        atomicAdd(vj1+ij_pair0+7, vj_ij_101);
        atomicAdd(vj1+ij_pair0+8, vj_ij_110);
        atomicAdd(vj1+ij_pair0+9, vj_ij_200);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_2_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 10*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 10*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_001 = 0;
        double vj_ij_002 = 0;
        double vj_ij_010 = 0;
        double vj_ij_011 = 0;
        double vj_ij_020 = 0;
        double vj_ij_100 = 0;
        double vj_ij_101 = 0;
        double vj_ij_110 = 0;
        double vj_ij_200 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2] + trr_20z * dm_ij_cache[sh_ij+2*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2] + trr_21z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2] + trr_22z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2] + trr_23z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2] + trr_24z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double dot_lij_z_005 = trr_15z * dm_ij_cache[sh_ij+1*TILE2] + trr_25z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+3*TILE2] + trr_10z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+3*TILE2] + trr_11z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+3*TILE2] + trr_12z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+3*TILE2] + trr_13z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+3*TILE2] + trr_14z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_015 = trr_05z * dm_ij_cache[sh_ij+3*TILE2] + trr_15z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+6*TILE2] + trr_10z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+6*TILE2] + trr_11z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+6*TILE2] + trr_12z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+6*TILE2] + trr_13z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+6*TILE2] + trr_14z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_105 = trr_05z * dm_ij_cache[sh_ij+6*TILE2] + trr_15z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+9*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110;
                    double dot_lij_y_200 = 1 * dot_lij_z_200;
                    double dot_lij_y_201 = 1 * dot_lij_z_201;
                    double dot_lij_y_202 = 1 * dot_lij_z_202;
                    double dot_lij_y_203 = 1 * dot_lij_z_203;
                    double dot_lij_y_204 = 1 * dot_lij_z_204;
                    double dot_lij_y_205 = 1 * dot_lij_z_205;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401 + trr_05x * dot_lkl_y_501;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410 + trr_05x * dot_lkl_y_510;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400 + trr_15x * dot_lkl_y_500;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_010);
        atomicAdd(vj1+ij_pair0+4, vj_ij_011);
        atomicAdd(vj1+ij_pair0+5, vj_ij_020);
        atomicAdd(vj1+ij_pair0+6, vj_ij_100);
        atomicAdd(vj1+ij_pair0+7, vj_ij_101);
        atomicAdd(vj1+ij_pair0+8, vj_ij_110);
        atomicAdd(vj1+ij_pair0+9, vj_ij_200);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_2_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_2_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 10*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 10*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_001 = 0;
        double vj_ij_002 = 0;
        double vj_ij_010 = 0;
        double vj_ij_011 = 0;
        double vj_ij_020 = 0;
        double vj_ij_100 = 0;
        double vj_ij_101 = 0;
        double vj_ij_110 = 0;
        double vj_ij_200 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double dot_lij_z_000 = trr_10z * dm_ij_cache[sh_ij+1*TILE2] + trr_20z * dm_ij_cache[sh_ij+2*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_001 = trr_11z * dm_ij_cache[sh_ij+1*TILE2] + trr_21z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_002 = trr_12z * dm_ij_cache[sh_ij+1*TILE2] + trr_22z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_003 = trr_13z * dm_ij_cache[sh_ij+1*TILE2] + trr_23z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double dot_lij_z_004 = trr_14z * dm_ij_cache[sh_ij+1*TILE2] + trr_24z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double dot_lij_z_005 = trr_15z * dm_ij_cache[sh_ij+1*TILE2] + trr_25z * dm_ij_cache[sh_ij+2*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double trr_26z = cpz * trr_25z + 5*b01 * trr_24z + 2*b00 * trr_15z;
                    double dot_lij_z_006 = trr_16z * dm_ij_cache[sh_ij+1*TILE2] + trr_26z * dm_ij_cache[sh_ij+2*TILE2];
                    double dot_lij_z_010 = wt * dm_ij_cache[sh_ij+3*TILE2] + trr_10z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_011 = trr_01z * dm_ij_cache[sh_ij+3*TILE2] + trr_11z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_012 = trr_02z * dm_ij_cache[sh_ij+3*TILE2] + trr_12z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_013 = trr_03z * dm_ij_cache[sh_ij+3*TILE2] + trr_13z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_014 = trr_04z * dm_ij_cache[sh_ij+3*TILE2] + trr_14z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_015 = trr_05z * dm_ij_cache[sh_ij+3*TILE2] + trr_15z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_016 = trr_06z * dm_ij_cache[sh_ij+3*TILE2] + trr_16z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_026 = trr_06z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_100 = wt * dm_ij_cache[sh_ij+6*TILE2] + trr_10z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_101 = trr_01z * dm_ij_cache[sh_ij+6*TILE2] + trr_11z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_102 = trr_02z * dm_ij_cache[sh_ij+6*TILE2] + trr_12z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_103 = trr_03z * dm_ij_cache[sh_ij+6*TILE2] + trr_13z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_104 = trr_04z * dm_ij_cache[sh_ij+6*TILE2] + trr_14z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_105 = trr_05z * dm_ij_cache[sh_ij+6*TILE2] + trr_15z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_106 = trr_06z * dm_ij_cache[sh_ij+6*TILE2] + trr_16z * dm_ij_cache[sh_ij+7*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_116 = trr_06z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_206 = trr_06z * dm_ij_cache[sh_ij+9*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016 + trr_20y * dot_lij_z_026;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015 + trr_21y * dot_lij_z_025;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014 + trr_22y * dot_lij_z_024;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013 + trr_23y * dot_lij_z_023;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012 + trr_24y * dot_lij_z_022;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011 + trr_25y * dot_lij_z_021;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double trr_26y = cpy * trr_25y + 5*b01 * trr_24y + 2*b00 * trr_15y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010 + trr_26y * dot_lij_z_020;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115;
                    double dot_lij_y_106 = 1 * dot_lij_z_106 + trr_10y * dot_lij_z_116;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105 + trr_11y * dot_lij_z_115;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104 + trr_12y * dot_lij_z_114;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103 + trr_13y * dot_lij_z_113;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102 + trr_14y * dot_lij_z_112;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101 + trr_15y * dot_lij_z_111;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100 + trr_16y * dot_lij_z_110;
                    double dot_lij_y_200 = 1 * dot_lij_z_200;
                    double dot_lij_y_201 = 1 * dot_lij_z_201;
                    double dot_lij_y_202 = 1 * dot_lij_z_202;
                    double dot_lij_y_203 = 1 * dot_lij_z_203;
                    double dot_lij_y_204 = 1 * dot_lij_z_204;
                    double dot_lij_y_205 = 1 * dot_lij_z_205;
                    double dot_lij_y_206 = 1 * dot_lij_z_206;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204;
                    double dot_lij_y_215 = trr_01y * dot_lij_z_205;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203;
                    double dot_lij_y_224 = trr_02y * dot_lij_z_204;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202;
                    double dot_lij_y_233 = trr_03y * dot_lij_z_203;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201;
                    double dot_lij_y_242 = trr_04y * dot_lij_z_202;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200;
                    double dot_lij_y_251 = trr_05y * dot_lij_z_201;
                    double dot_lij_y_260 = trr_06y * dot_lij_z_200;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106 + trr_20x * dot_lij_y_206;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115 + trr_20x * dot_lij_y_215;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124 + trr_20x * dot_lij_y_224;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133 + trr_20x * dot_lij_y_233;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142 + trr_20x * dot_lij_y_242;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151 + trr_20x * dot_lij_y_251;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160 + trr_20x * dot_lij_y_260;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105 + trr_21x * dot_lij_y_205;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114 + trr_21x * dot_lij_y_214;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123 + trr_21x * dot_lij_y_223;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132 + trr_21x * dot_lij_y_232;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141 + trr_21x * dot_lij_y_241;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150 + trr_21x * dot_lij_y_250;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104 + trr_22x * dot_lij_y_204;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113 + trr_22x * dot_lij_y_213;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122 + trr_22x * dot_lij_y_222;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131 + trr_22x * dot_lij_y_231;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140 + trr_22x * dot_lij_y_240;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103 + trr_23x * dot_lij_y_203;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112 + trr_23x * dot_lij_y_212;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121 + trr_23x * dot_lij_y_221;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130 + trr_23x * dot_lij_y_230;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102 + trr_24x * dot_lij_y_202;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111 + trr_24x * dot_lij_y_211;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120 + trr_24x * dot_lij_y_220;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101 + trr_25x * dot_lij_y_201;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110 + trr_25x * dot_lij_y_210;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    double trr_26x = cpx * trr_25x + 5*b01 * trr_24x + 2*b00 * trr_15x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100 + trr_26x * dot_lij_y_200;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005 + trr_26z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014 + trr_25z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023 + trr_24z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032 + trr_23z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041 + trr_22z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050 + trr_21z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_062 = trr_20z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104 + trr_25z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113 + trr_24z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122 + trr_23z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131 + trr_22z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140 + trr_21z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_152 = trr_20z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203 + trr_24z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212 + trr_23z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221 + trr_22z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230 + trr_21z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_242 = trr_20z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302 + trr_23z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311 + trr_22z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320 + trr_21z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_332 = trr_20z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401 + trr_22z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410 + trr_21z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_422 = trr_20z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500 + trr_21z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_512 = trr_20z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_z_602 = trr_20z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052 + trr_06y * dot_lkl_z_062;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051 + trr_16y * dot_lkl_z_061;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050 + trr_26y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142 + trr_05y * dot_lkl_z_152;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141 + trr_15y * dot_lkl_z_151;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140 + trr_25y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232 + trr_04y * dot_lkl_z_242;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231 + trr_14y * dot_lkl_z_241;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230 + trr_24y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322 + trr_03y * dot_lkl_z_332;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321 + trr_13y * dot_lkl_z_331;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320 + trr_23y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412 + trr_02y * dot_lkl_z_422;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411 + trr_12y * dot_lkl_z_421;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410 + trr_22y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502 + trr_01y * dot_lkl_z_512;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501 + trr_11y * dot_lkl_z_511;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500 + trr_21y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_602 = 1 * dot_lkl_z_602;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    double dot_lkl_y_611 = trr_10y * dot_lkl_z_601;
                    double dot_lkl_y_620 = trr_20y * dot_lkl_z_600;
                    vj_ij_001 += fac * dot_lkl_y_001 + trr_01x * dot_lkl_y_101 + trr_02x * dot_lkl_y_201 + trr_03x * dot_lkl_y_301 + trr_04x * dot_lkl_y_401 + trr_05x * dot_lkl_y_501 + trr_06x * dot_lkl_y_601;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502 + trr_06x * dot_lkl_y_602;
                    vj_ij_010 += fac * dot_lkl_y_010 + trr_01x * dot_lkl_y_110 + trr_02x * dot_lkl_y_210 + trr_03x * dot_lkl_y_310 + trr_04x * dot_lkl_y_410 + trr_05x * dot_lkl_y_510 + trr_06x * dot_lkl_y_610;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511 + trr_06x * dot_lkl_y_611;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520 + trr_06x * dot_lkl_y_620;
                    vj_ij_100 += trr_10x * dot_lkl_y_000 + trr_11x * dot_lkl_y_100 + trr_12x * dot_lkl_y_200 + trr_13x * dot_lkl_y_300 + trr_14x * dot_lkl_y_400 + trr_15x * dot_lkl_y_500 + trr_16x * dot_lkl_y_600;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501 + trr_16x * dot_lkl_y_601;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510 + trr_16x * dot_lkl_y_610;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500 + trr_26x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+1, vj_ij_001);
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_010);
        atomicAdd(vj1+ij_pair0+4, vj_ij_011);
        atomicAdd(vj1+ij_pair0+5, vj_ij_020);
        atomicAdd(vj1+ij_pair0+6, vj_ij_100);
        atomicAdd(vj1+ij_pair0+7, vj_ij_101);
        atomicAdd(vj1+ij_pair0+8, vj_ij_110);
        atomicAdd(vj1+ij_pair0+9, vj_ij_200);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_2_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_2_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_2_0 = 0.;
        double gout_3_0 = 0.;
        double gout_5_0 = 0.;
        double gout_6_0 = 0.;
        double gout_7_0 = 0.;
        double gout_8_0 = 0.;
        double gout_9_0 = 0.;
        double gout_11_0 = 0.;
        double gout_12_0 = 0.;
        double gout_13_0 = 0.;
        double gout_14_0 = 0.;
        double gout_15_0 = 0.;
        double gout_16_0 = 0.;
        double gout_17_0 = 0.;
        double gout_18_0 = 0.;
        double gout_19_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(2, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(2, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 2; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 2; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    gout_2_0 += fac * 1 * trr_20z;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    gout_3_0 += fac * 1 * trr_30z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_5_0 += fac * trr_10y * trr_10z;
                    gout_6_0 += fac * trr_10y * trr_20z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_7_0 += fac * trr_20y * wt;
                    gout_8_0 += fac * trr_20y * trr_10z;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    gout_9_0 += fac * trr_30y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_11_0 += trr_10x * 1 * trr_10z;
                    gout_12_0 += trr_10x * 1 * trr_20z;
                    gout_13_0 += trr_10x * trr_10y * wt;
                    gout_14_0 += trr_10x * trr_10y * trr_10z;
                    gout_15_0 += trr_10x * trr_20y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_16_0 += trr_20x * 1 * wt;
                    gout_17_0 += trr_20x * 1 * trr_10z;
                    gout_18_0 += trr_20x * trr_10y * wt;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    gout_19_0 += trr_30x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+2, gout_2_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+5, gout_5_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+6, gout_6_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+7, gout_7_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+8, gout_8_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+9, gout_9_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+11, gout_11_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+12, gout_12_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+13, gout_13_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+14, gout_14_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+15, gout_15_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+16, gout_16_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+17, gout_17_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+18, gout_18_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+19, gout_19_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_2_0*dm1[ij_pair0+2] + gout_3_0*dm1[ij_pair0+3] + gout_5_0*dm1[ij_pair0+5] + gout_6_0*dm1[ij_pair0+6] + gout_7_0*dm1[ij_pair0+7] + gout_8_0*dm1[ij_pair0+8] + gout_9_0*dm1[ij_pair0+9] + gout_11_0*dm1[ij_pair0+11] + gout_12_0*dm1[ij_pair0+12] + gout_13_0*dm1[ij_pair0+13] + gout_14_0*dm1[ij_pair0+14] + gout_15_0*dm1[ij_pair0+15] + gout_16_0*dm1[ij_pair0+16] + gout_17_0*dm1[ij_pair0+17] + gout_18_0*dm1[ij_pair0+18] + gout_19_0*dm1[ij_pair0+19]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_3_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_2_1 = 0.;
        double gout_2_2 = 0.;
        double gout_2_3 = 0.;
        double gout_3_1 = 0.;
        double gout_3_2 = 0.;
        double gout_3_3 = 0.;
        double gout_5_1 = 0.;
        double gout_5_2 = 0.;
        double gout_5_3 = 0.;
        double gout_6_1 = 0.;
        double gout_6_2 = 0.;
        double gout_6_3 = 0.;
        double gout_7_1 = 0.;
        double gout_7_2 = 0.;
        double gout_7_3 = 0.;
        double gout_8_1 = 0.;
        double gout_8_2 = 0.;
        double gout_8_3 = 0.;
        double gout_9_1 = 0.;
        double gout_9_2 = 0.;
        double gout_9_3 = 0.;
        double gout_11_1 = 0.;
        double gout_11_2 = 0.;
        double gout_11_3 = 0.;
        double gout_12_1 = 0.;
        double gout_12_2 = 0.;
        double gout_12_3 = 0.;
        double gout_13_1 = 0.;
        double gout_13_2 = 0.;
        double gout_13_3 = 0.;
        double gout_14_1 = 0.;
        double gout_14_2 = 0.;
        double gout_14_3 = 0.;
        double gout_15_1 = 0.;
        double gout_15_2 = 0.;
        double gout_15_3 = 0.;
        double gout_16_1 = 0.;
        double gout_16_2 = 0.;
        double gout_16_3 = 0.;
        double gout_17_1 = 0.;
        double gout_17_2 = 0.;
        double gout_17_3 = 0.;
        double gout_18_1 = 0.;
        double gout_18_2 = 0.;
        double gout_18_3 = 0.;
        double gout_19_1 = 0.;
        double gout_19_2 = 0.;
        double gout_19_3 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    gout_2_1 += fac * 1 * trr_21z;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    gout_2_2 += fac * trr_01y * trr_20z;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    gout_2_3 += trr_01x * 1 * trr_20z;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    gout_3_1 += fac * 1 * trr_31z;
                    gout_3_2 += fac * trr_01y * trr_30z;
                    gout_3_3 += trr_01x * 1 * trr_30z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    gout_5_1 += fac * trr_10y * trr_11z;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    gout_5_2 += fac * trr_11y * trr_10z;
                    gout_5_3 += trr_01x * trr_10y * trr_10z;
                    gout_6_1 += fac * trr_10y * trr_21z;
                    gout_6_2 += fac * trr_11y * trr_20z;
                    gout_6_3 += trr_01x * trr_10y * trr_20z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_01z = cpz * wt;
                    gout_7_1 += fac * trr_20y * trr_01z;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    gout_7_2 += fac * trr_21y * wt;
                    gout_7_3 += trr_01x * trr_20y * wt;
                    gout_8_1 += fac * trr_20y * trr_11z;
                    gout_8_2 += fac * trr_21y * trr_10z;
                    gout_8_3 += trr_01x * trr_20y * trr_10z;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    gout_9_1 += fac * trr_30y * trr_01z;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    gout_9_2 += fac * trr_31y * wt;
                    gout_9_3 += trr_01x * trr_30y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_11_1 += trr_10x * 1 * trr_11z;
                    gout_11_2 += trr_10x * trr_01y * trr_10z;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    gout_11_3 += trr_11x * 1 * trr_10z;
                    gout_12_1 += trr_10x * 1 * trr_21z;
                    gout_12_2 += trr_10x * trr_01y * trr_20z;
                    gout_12_3 += trr_11x * 1 * trr_20z;
                    gout_13_1 += trr_10x * trr_10y * trr_01z;
                    gout_13_2 += trr_10x * trr_11y * wt;
                    gout_13_3 += trr_11x * trr_10y * wt;
                    gout_14_1 += trr_10x * trr_10y * trr_11z;
                    gout_14_2 += trr_10x * trr_11y * trr_10z;
                    gout_14_3 += trr_11x * trr_10y * trr_10z;
                    gout_15_1 += trr_10x * trr_20y * trr_01z;
                    gout_15_2 += trr_10x * trr_21y * wt;
                    gout_15_3 += trr_11x * trr_20y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_16_1 += trr_20x * 1 * trr_01z;
                    gout_16_2 += trr_20x * trr_01y * wt;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    gout_16_3 += trr_21x * 1 * wt;
                    gout_17_1 += trr_20x * 1 * trr_11z;
                    gout_17_2 += trr_20x * trr_01y * trr_10z;
                    gout_17_3 += trr_21x * 1 * trr_10z;
                    gout_18_1 += trr_20x * trr_10y * trr_01z;
                    gout_18_2 += trr_20x * trr_11y * wt;
                    gout_18_3 += trr_21x * trr_10y * wt;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    gout_19_1 += trr_30x * 1 * trr_01z;
                    gout_19_2 += trr_30x * trr_01y * wt;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    gout_19_3 += trr_31x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+2, gout_2_1*dm2[kl_pair0+1] + gout_2_2*dm2[kl_pair0+2] + gout_2_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+3, gout_3_1*dm2[kl_pair0+1] + gout_3_2*dm2[kl_pair0+2] + gout_3_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+5, gout_5_1*dm2[kl_pair0+1] + gout_5_2*dm2[kl_pair0+2] + gout_5_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+6, gout_6_1*dm2[kl_pair0+1] + gout_6_2*dm2[kl_pair0+2] + gout_6_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+7, gout_7_1*dm2[kl_pair0+1] + gout_7_2*dm2[kl_pair0+2] + gout_7_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+8, gout_8_1*dm2[kl_pair0+1] + gout_8_2*dm2[kl_pair0+2] + gout_8_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+9, gout_9_1*dm2[kl_pair0+1] + gout_9_2*dm2[kl_pair0+2] + gout_9_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+11, gout_11_1*dm2[kl_pair0+1] + gout_11_2*dm2[kl_pair0+2] + gout_11_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+12, gout_12_1*dm2[kl_pair0+1] + gout_12_2*dm2[kl_pair0+2] + gout_12_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+13, gout_13_1*dm2[kl_pair0+1] + gout_13_2*dm2[kl_pair0+2] + gout_13_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+14, gout_14_1*dm2[kl_pair0+1] + gout_14_2*dm2[kl_pair0+2] + gout_14_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+15, gout_15_1*dm2[kl_pair0+1] + gout_15_2*dm2[kl_pair0+2] + gout_15_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+16, gout_16_1*dm2[kl_pair0+1] + gout_16_2*dm2[kl_pair0+2] + gout_16_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+17, gout_17_1*dm2[kl_pair0+1] + gout_17_2*dm2[kl_pair0+2] + gout_17_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+18, gout_18_1*dm2[kl_pair0+1] + gout_18_2*dm2[kl_pair0+2] + gout_18_3*dm2[kl_pair0+3]);
            atomicAdd(vj1+ij_pair0+19, gout_19_1*dm2[kl_pair0+1] + gout_19_2*dm2[kl_pair0+2] + gout_19_3*dm2[kl_pair0+3]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+1, gout_2_1*dm1[ij_pair0+2] + gout_3_1*dm1[ij_pair0+3] + gout_5_1*dm1[ij_pair0+5] + gout_6_1*dm1[ij_pair0+6] + gout_7_1*dm1[ij_pair0+7] + gout_8_1*dm1[ij_pair0+8] + gout_9_1*dm1[ij_pair0+9] + gout_11_1*dm1[ij_pair0+11] + gout_12_1*dm1[ij_pair0+12] + gout_13_1*dm1[ij_pair0+13] + gout_14_1*dm1[ij_pair0+14] + gout_15_1*dm1[ij_pair0+15] + gout_16_1*dm1[ij_pair0+16] + gout_17_1*dm1[ij_pair0+17] + gout_18_1*dm1[ij_pair0+18] + gout_19_1*dm1[ij_pair0+19]);
            atomicAdd(vj2+kl_pair0+2, gout_2_2*dm1[ij_pair0+2] + gout_3_2*dm1[ij_pair0+3] + gout_5_2*dm1[ij_pair0+5] + gout_6_2*dm1[ij_pair0+6] + gout_7_2*dm1[ij_pair0+7] + gout_8_2*dm1[ij_pair0+8] + gout_9_2*dm1[ij_pair0+9] + gout_11_2*dm1[ij_pair0+11] + gout_12_2*dm1[ij_pair0+12] + gout_13_2*dm1[ij_pair0+13] + gout_14_2*dm1[ij_pair0+14] + gout_15_2*dm1[ij_pair0+15] + gout_16_2*dm1[ij_pair0+16] + gout_17_2*dm1[ij_pair0+17] + gout_18_2*dm1[ij_pair0+18] + gout_19_2*dm1[ij_pair0+19]);
            atomicAdd(vj2+kl_pair0+3, gout_2_3*dm1[ij_pair0+2] + gout_3_3*dm1[ij_pair0+3] + gout_5_3*dm1[ij_pair0+5] + gout_6_3*dm1[ij_pair0+6] + gout_7_3*dm1[ij_pair0+7] + gout_8_3*dm1[ij_pair0+8] + gout_9_3*dm1[ij_pair0+9] + gout_11_3*dm1[ij_pair0+11] + gout_12_3*dm1[ij_pair0+12] + gout_13_3*dm1[ij_pair0+13] + gout_14_3*dm1[ij_pair0+14] + gout_15_3*dm1[ij_pair0+15] + gout_16_3*dm1[ij_pair0+16] + gout_17_3*dm1[ij_pair0+17] + gout_18_3*dm1[ij_pair0+18] + gout_19_3*dm1[ij_pair0+19]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_3_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 20*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 20*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_010 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+4];
        double dm_kl_020 = dm2[kl_pair0+5];
        double dm_kl_100 = dm2[kl_pair0+6];
        double dm_kl_101 = dm2[kl_pair0+7];
        double dm_kl_110 = dm2[kl_pair0+8];
        double dm_kl_200 = dm2[kl_pair0+9];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_030 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_120 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_210 = 0;
        double vj_ij_300 = 0;
        double vj_kl_001 = 0;
        double vj_kl_002 = 0;
        double vj_kl_010 = 0;
        double vj_kl_011 = 0;
        double vj_kl_020 = 0;
        double vj_kl_100 = 0;
        double vj_kl_101 = 0;
        double vj_kl_110 = 0;
        double vj_kl_200 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+5*TILE2] + trr_20z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+5*TILE2] + trr_21z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+5*TILE2] + trr_22z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+7*TILE2] + trr_10z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+7*TILE2] + trr_11z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+7*TILE2] + trr_12z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+11*TILE2] + trr_20z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+11*TILE2] + trr_21z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+11*TILE2] + trr_22z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+13*TILE2] + trr_10z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+13*TILE2] + trr_11z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+13*TILE2] + trr_12z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+16*TILE2] + trr_10z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+16*TILE2] + trr_11z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+16*TILE2] + trr_12z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+19*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210;
                    double dot_lij_y_300 = 1 * dot_lij_z_300;
                    double dot_lij_y_301 = 1 * dot_lij_z_301;
                    double dot_lij_y_302 = 1 * dot_lij_z_302;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001 + trr_02z * dm_kl_002;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001 + trr_12z * dm_kl_002;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001 + trr_22z * dm_kl_002;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001 + trr_32z * dm_kl_002;
                    double dot_lkl_z_010 = wt * dm_kl_010 + trr_01z * dm_kl_011;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010 + trr_11z * dm_kl_011;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010 + trr_21z * dm_kl_011;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010 + trr_31z * dm_kl_011;
                    double dot_lkl_z_020 = wt * dm_kl_020;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020;
                    double dot_lkl_z_100 = wt * dm_kl_100 + trr_01z * dm_kl_101;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100 + trr_11z * dm_kl_101;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100 + trr_21z * dm_kl_101;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100 + trr_31z * dm_kl_101;
                    double dot_lkl_z_110 = wt * dm_kl_110;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110;
                    double dot_lkl_z_200 = wt * dm_kl_200;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+5, vj_ij_011);
        atomicAdd(vj1+ij_pair0+6, vj_ij_012);
        atomicAdd(vj1+ij_pair0+7, vj_ij_020);
        atomicAdd(vj1+ij_pair0+8, vj_ij_021);
        atomicAdd(vj1+ij_pair0+9, vj_ij_030);
        atomicAdd(vj1+ij_pair0+11, vj_ij_101);
        atomicAdd(vj1+ij_pair0+12, vj_ij_102);
        atomicAdd(vj1+ij_pair0+13, vj_ij_110);
        atomicAdd(vj1+ij_pair0+14, vj_ij_111);
        atomicAdd(vj1+ij_pair0+15, vj_ij_120);
        atomicAdd(vj1+ij_pair0+16, vj_ij_200);
        atomicAdd(vj1+ij_pair0+17, vj_ij_201);
        atomicAdd(vj1+ij_pair0+18, vj_ij_210);
        atomicAdd(vj1+ij_pair0+19, vj_ij_300);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_010);
        atomicAdd(vj2+kl_pair0+4, vj_kl_011);
        atomicAdd(vj2+kl_pair0+5, vj_kl_020);
        atomicAdd(vj2+kl_pair0+6, vj_kl_100);
        atomicAdd(vj2+kl_pair0+7, vj_kl_101);
        atomicAdd(vj2+kl_pair0+8, vj_kl_110);
        atomicAdd(vj2+kl_pair0+9, vj_kl_200);
    }
}
__global__
void rys_j_3_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 20*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 20*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+6];
        double dm_kl_020 = dm2[kl_pair0+7];
        double dm_kl_021 = dm2[kl_pair0+8];
        double dm_kl_030 = dm2[kl_pair0+9];
        double dm_kl_101 = dm2[kl_pair0+11];
        double dm_kl_102 = dm2[kl_pair0+12];
        double dm_kl_110 = dm2[kl_pair0+13];
        double dm_kl_111 = dm2[kl_pair0+14];
        double dm_kl_120 = dm2[kl_pair0+15];
        double dm_kl_200 = dm2[kl_pair0+16];
        double dm_kl_201 = dm2[kl_pair0+17];
        double dm_kl_210 = dm2[kl_pair0+18];
        double dm_kl_300 = dm2[kl_pair0+19];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_030 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_120 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_210 = 0;
        double vj_ij_300 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_030 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_120 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_210 = 0;
        double vj_kl_300 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+5*TILE2] + trr_20z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+5*TILE2] + trr_21z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+5*TILE2] + trr_22z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+5*TILE2] + trr_23z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+7*TILE2] + trr_10z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+7*TILE2] + trr_11z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+7*TILE2] + trr_12z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+7*TILE2] + trr_13z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+11*TILE2] + trr_20z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+11*TILE2] + trr_21z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+11*TILE2] + trr_22z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+11*TILE2] + trr_23z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+13*TILE2] + trr_10z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+13*TILE2] + trr_11z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+13*TILE2] + trr_12z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+13*TILE2] + trr_13z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+16*TILE2] + trr_10z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+16*TILE2] + trr_11z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+16*TILE2] + trr_12z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+16*TILE2] + trr_13z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+19*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210;
                    double dot_lij_y_300 = 1 * dot_lij_z_300;
                    double dot_lij_y_301 = 1 * dot_lij_z_301;
                    double dot_lij_y_302 = 1 * dot_lij_z_302;
                    double dot_lij_y_303 = 1 * dot_lij_z_303;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021;
                    double dot_lkl_z_030 = wt * dm_kl_030;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111;
                    double dot_lkl_z_120 = wt * dm_kl_120;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201;
                    double dot_lkl_z_210 = wt * dm_kl_210;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210;
                    double dot_lkl_z_300 = wt * dm_kl_300;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+5, vj_ij_011);
        atomicAdd(vj1+ij_pair0+6, vj_ij_012);
        atomicAdd(vj1+ij_pair0+7, vj_ij_020);
        atomicAdd(vj1+ij_pair0+8, vj_ij_021);
        atomicAdd(vj1+ij_pair0+9, vj_ij_030);
        atomicAdd(vj1+ij_pair0+11, vj_ij_101);
        atomicAdd(vj1+ij_pair0+12, vj_ij_102);
        atomicAdd(vj1+ij_pair0+13, vj_ij_110);
        atomicAdd(vj1+ij_pair0+14, vj_ij_111);
        atomicAdd(vj1+ij_pair0+15, vj_ij_120);
        atomicAdd(vj1+ij_pair0+16, vj_ij_200);
        atomicAdd(vj1+ij_pair0+17, vj_ij_201);
        atomicAdd(vj1+ij_pair0+18, vj_ij_210);
        atomicAdd(vj1+ij_pair0+19, vj_ij_300);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+5, vj_kl_011);
        atomicAdd(vj2+kl_pair0+6, vj_kl_012);
        atomicAdd(vj2+kl_pair0+7, vj_kl_020);
        atomicAdd(vj2+kl_pair0+8, vj_kl_021);
        atomicAdd(vj2+kl_pair0+9, vj_kl_030);
        atomicAdd(vj2+kl_pair0+11, vj_kl_101);
        atomicAdd(vj2+kl_pair0+12, vj_kl_102);
        atomicAdd(vj2+kl_pair0+13, vj_kl_110);
        atomicAdd(vj2+kl_pair0+14, vj_kl_111);
        atomicAdd(vj2+kl_pair0+15, vj_kl_120);
        atomicAdd(vj2+kl_pair0+16, vj_kl_200);
        atomicAdd(vj2+kl_pair0+17, vj_kl_201);
        atomicAdd(vj2+kl_pair0+18, vj_kl_210);
        atomicAdd(vj2+kl_pair0+19, vj_kl_300);
    }
}
__global__
void rys_j_3_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 20*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 20*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_030 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_120 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_210 = 0;
        double vj_ij_300 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+5*TILE2] + trr_20z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+5*TILE2] + trr_21z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+5*TILE2] + trr_22z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+5*TILE2] + trr_23z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+5*TILE2] + trr_24z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+7*TILE2] + trr_10z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+7*TILE2] + trr_11z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+7*TILE2] + trr_12z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+7*TILE2] + trr_13z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+7*TILE2] + trr_14z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+11*TILE2] + trr_20z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+11*TILE2] + trr_21z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+11*TILE2] + trr_22z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+11*TILE2] + trr_23z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+11*TILE2] + trr_24z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+13*TILE2] + trr_10z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+13*TILE2] + trr_11z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+13*TILE2] + trr_12z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+13*TILE2] + trr_13z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+13*TILE2] + trr_14z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+16*TILE2] + trr_10z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+16*TILE2] + trr_11z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+16*TILE2] + trr_12z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+16*TILE2] + trr_13z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+16*TILE2] + trr_14z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+19*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210;
                    double dot_lij_y_300 = 1 * dot_lij_z_300;
                    double dot_lij_y_301 = 1 * dot_lij_z_301;
                    double dot_lij_y_302 = 1 * dot_lij_z_302;
                    double dot_lij_y_303 = 1 * dot_lij_z_303;
                    double dot_lij_y_304 = 1 * dot_lij_z_304;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003 + trr_24z * dm_kl_004;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003 + trr_34z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012 + trr_23z * dm_kl_013;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012 + trr_33z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021 + trr_22z * dm_kl_022;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021 + trr_32z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102 + trr_23z * dm_kl_103;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102 + trr_33z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111 + trr_22z * dm_kl_112;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111 + trr_32z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201 + trr_22z * dm_kl_202;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201 + trr_32z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+5, vj_ij_011);
        atomicAdd(vj1+ij_pair0+6, vj_ij_012);
        atomicAdd(vj1+ij_pair0+7, vj_ij_020);
        atomicAdd(vj1+ij_pair0+8, vj_ij_021);
        atomicAdd(vj1+ij_pair0+9, vj_ij_030);
        atomicAdd(vj1+ij_pair0+11, vj_ij_101);
        atomicAdd(vj1+ij_pair0+12, vj_ij_102);
        atomicAdd(vj1+ij_pair0+13, vj_ij_110);
        atomicAdd(vj1+ij_pair0+14, vj_ij_111);
        atomicAdd(vj1+ij_pair0+15, vj_ij_120);
        atomicAdd(vj1+ij_pair0+16, vj_ij_200);
        atomicAdd(vj1+ij_pair0+17, vj_ij_201);
        atomicAdd(vj1+ij_pair0+18, vj_ij_210);
        atomicAdd(vj1+ij_pair0+19, vj_ij_300);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_3_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 20*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 20*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_030 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_120 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_210 = 0;
        double vj_ij_300 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double dot_lij_z_005 = trr_25z * dm_ij_cache[sh_ij+2*TILE2] + trr_35z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+5*TILE2] + trr_20z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+5*TILE2] + trr_21z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+5*TILE2] + trr_22z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+5*TILE2] + trr_23z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+5*TILE2] + trr_24z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_015 = trr_15z * dm_ij_cache[sh_ij+5*TILE2] + trr_25z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+7*TILE2] + trr_10z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+7*TILE2] + trr_11z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+7*TILE2] + trr_12z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+7*TILE2] + trr_13z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+7*TILE2] + trr_14z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+7*TILE2] + trr_15z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+11*TILE2] + trr_20z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+11*TILE2] + trr_21z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+11*TILE2] + trr_22z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+11*TILE2] + trr_23z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+11*TILE2] + trr_24z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_105 = trr_15z * dm_ij_cache[sh_ij+11*TILE2] + trr_25z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+13*TILE2] + trr_10z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+13*TILE2] + trr_11z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+13*TILE2] + trr_12z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+13*TILE2] + trr_13z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+13*TILE2] + trr_14z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+13*TILE2] + trr_15z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+16*TILE2] + trr_10z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+16*TILE2] + trr_11z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+16*TILE2] + trr_12z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+16*TILE2] + trr_13z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+16*TILE2] + trr_14z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+16*TILE2] + trr_15z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+19*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210;
                    double dot_lij_y_300 = 1 * dot_lij_z_300;
                    double dot_lij_y_301 = 1 * dot_lij_z_301;
                    double dot_lij_y_302 = 1 * dot_lij_z_302;
                    double dot_lij_y_303 = 1 * dot_lij_z_303;
                    double dot_lij_y_304 = 1 * dot_lij_z_304;
                    double dot_lij_y_305 = 1 * dot_lij_z_305;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+5, vj_ij_011);
        atomicAdd(vj1+ij_pair0+6, vj_ij_012);
        atomicAdd(vj1+ij_pair0+7, vj_ij_020);
        atomicAdd(vj1+ij_pair0+8, vj_ij_021);
        atomicAdd(vj1+ij_pair0+9, vj_ij_030);
        atomicAdd(vj1+ij_pair0+11, vj_ij_101);
        atomicAdd(vj1+ij_pair0+12, vj_ij_102);
        atomicAdd(vj1+ij_pair0+13, vj_ij_110);
        atomicAdd(vj1+ij_pair0+14, vj_ij_111);
        atomicAdd(vj1+ij_pair0+15, vj_ij_120);
        atomicAdd(vj1+ij_pair0+16, vj_ij_200);
        atomicAdd(vj1+ij_pair0+17, vj_ij_201);
        atomicAdd(vj1+ij_pair0+18, vj_ij_210);
        atomicAdd(vj1+ij_pair0+19, vj_ij_300);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_3_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_3_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 20*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 20*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_030 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_120 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_210 = 0;
        double vj_ij_300 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double dot_lij_z_005 = trr_25z * dm_ij_cache[sh_ij+2*TILE2] + trr_35z * dm_ij_cache[sh_ij+3*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_26z = cpz * trr_25z + 5*b01 * trr_24z + 2*b00 * trr_15z;
                    double trr_36z = cpz * trr_35z + 5*b01 * trr_34z + 3*b00 * trr_25z;
                    double dot_lij_z_006 = trr_26z * dm_ij_cache[sh_ij+2*TILE2] + trr_36z * dm_ij_cache[sh_ij+3*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+5*TILE2] + trr_20z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+5*TILE2] + trr_21z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+5*TILE2] + trr_22z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+5*TILE2] + trr_23z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+5*TILE2] + trr_24z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_015 = trr_15z * dm_ij_cache[sh_ij+5*TILE2] + trr_25z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double dot_lij_z_016 = trr_16z * dm_ij_cache[sh_ij+5*TILE2] + trr_26z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+7*TILE2] + trr_10z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+7*TILE2] + trr_11z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+7*TILE2] + trr_12z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+7*TILE2] + trr_13z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+7*TILE2] + trr_14z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+7*TILE2] + trr_15z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_026 = trr_06z * dm_ij_cache[sh_ij+7*TILE2] + trr_16z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_036 = trr_06z * dm_ij_cache[sh_ij+9*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+11*TILE2] + trr_20z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+11*TILE2] + trr_21z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+11*TILE2] + trr_22z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+11*TILE2] + trr_23z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+11*TILE2] + trr_24z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_105 = trr_15z * dm_ij_cache[sh_ij+11*TILE2] + trr_25z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_106 = trr_16z * dm_ij_cache[sh_ij+11*TILE2] + trr_26z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+13*TILE2] + trr_10z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+13*TILE2] + trr_11z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+13*TILE2] + trr_12z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+13*TILE2] + trr_13z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+13*TILE2] + trr_14z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+13*TILE2] + trr_15z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_116 = trr_06z * dm_ij_cache[sh_ij+13*TILE2] + trr_16z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_126 = trr_06z * dm_ij_cache[sh_ij+15*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+16*TILE2] + trr_10z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+16*TILE2] + trr_11z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+16*TILE2] + trr_12z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+16*TILE2] + trr_13z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+16*TILE2] + trr_14z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+16*TILE2] + trr_15z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_206 = trr_06z * dm_ij_cache[sh_ij+16*TILE2] + trr_16z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_216 = trr_06z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_306 = trr_06z * dm_ij_cache[sh_ij+19*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016 + trr_20y * dot_lij_z_026 + trr_30y * dot_lij_z_036;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015 + trr_21y * dot_lij_z_025 + trr_31y * dot_lij_z_035;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014 + trr_22y * dot_lij_z_024 + trr_32y * dot_lij_z_034;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013 + trr_23y * dot_lij_z_023 + trr_33y * dot_lij_z_033;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012 + trr_24y * dot_lij_z_022 + trr_34y * dot_lij_z_032;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011 + trr_25y * dot_lij_z_021 + trr_35y * dot_lij_z_031;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double trr_26y = cpy * trr_25y + 5*b01 * trr_24y + 2*b00 * trr_15y;
                    double trr_36y = cpy * trr_35y + 5*b01 * trr_34y + 3*b00 * trr_25y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010 + trr_26y * dot_lij_z_020 + trr_36y * dot_lij_z_030;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125;
                    double dot_lij_y_106 = 1 * dot_lij_z_106 + trr_10y * dot_lij_z_116 + trr_20y * dot_lij_z_126;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105 + trr_11y * dot_lij_z_115 + trr_21y * dot_lij_z_125;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104 + trr_12y * dot_lij_z_114 + trr_22y * dot_lij_z_124;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103 + trr_13y * dot_lij_z_113 + trr_23y * dot_lij_z_123;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102 + trr_14y * dot_lij_z_112 + trr_24y * dot_lij_z_122;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101 + trr_15y * dot_lij_z_111 + trr_25y * dot_lij_z_121;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100 + trr_16y * dot_lij_z_110 + trr_26y * dot_lij_z_120;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215;
                    double dot_lij_y_206 = 1 * dot_lij_z_206 + trr_10y * dot_lij_z_216;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214;
                    double dot_lij_y_215 = trr_01y * dot_lij_z_205 + trr_11y * dot_lij_z_215;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213;
                    double dot_lij_y_224 = trr_02y * dot_lij_z_204 + trr_12y * dot_lij_z_214;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212;
                    double dot_lij_y_233 = trr_03y * dot_lij_z_203 + trr_13y * dot_lij_z_213;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211;
                    double dot_lij_y_242 = trr_04y * dot_lij_z_202 + trr_14y * dot_lij_z_212;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210;
                    double dot_lij_y_251 = trr_05y * dot_lij_z_201 + trr_15y * dot_lij_z_211;
                    double dot_lij_y_260 = trr_06y * dot_lij_z_200 + trr_16y * dot_lij_z_210;
                    double dot_lij_y_300 = 1 * dot_lij_z_300;
                    double dot_lij_y_301 = 1 * dot_lij_z_301;
                    double dot_lij_y_302 = 1 * dot_lij_z_302;
                    double dot_lij_y_303 = 1 * dot_lij_z_303;
                    double dot_lij_y_304 = 1 * dot_lij_z_304;
                    double dot_lij_y_305 = 1 * dot_lij_z_305;
                    double dot_lij_y_306 = 1 * dot_lij_z_306;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304;
                    double dot_lij_y_315 = trr_01y * dot_lij_z_305;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303;
                    double dot_lij_y_324 = trr_02y * dot_lij_z_304;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302;
                    double dot_lij_y_333 = trr_03y * dot_lij_z_303;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301;
                    double dot_lij_y_342 = trr_04y * dot_lij_z_302;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300;
                    double dot_lij_y_351 = trr_05y * dot_lij_z_301;
                    double dot_lij_y_360 = trr_06y * dot_lij_z_300;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106 + trr_20x * dot_lij_y_206 + trr_30x * dot_lij_y_306;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115 + trr_20x * dot_lij_y_215 + trr_30x * dot_lij_y_315;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124 + trr_20x * dot_lij_y_224 + trr_30x * dot_lij_y_324;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133 + trr_20x * dot_lij_y_233 + trr_30x * dot_lij_y_333;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142 + trr_20x * dot_lij_y_242 + trr_30x * dot_lij_y_342;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151 + trr_20x * dot_lij_y_251 + trr_30x * dot_lij_y_351;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160 + trr_20x * dot_lij_y_260 + trr_30x * dot_lij_y_360;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105 + trr_21x * dot_lij_y_205 + trr_31x * dot_lij_y_305;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114 + trr_21x * dot_lij_y_214 + trr_31x * dot_lij_y_314;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123 + trr_21x * dot_lij_y_223 + trr_31x * dot_lij_y_323;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132 + trr_21x * dot_lij_y_232 + trr_31x * dot_lij_y_332;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141 + trr_21x * dot_lij_y_241 + trr_31x * dot_lij_y_341;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150 + trr_21x * dot_lij_y_250 + trr_31x * dot_lij_y_350;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104 + trr_22x * dot_lij_y_204 + trr_32x * dot_lij_y_304;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113 + trr_22x * dot_lij_y_213 + trr_32x * dot_lij_y_313;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122 + trr_22x * dot_lij_y_222 + trr_32x * dot_lij_y_322;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131 + trr_22x * dot_lij_y_231 + trr_32x * dot_lij_y_331;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140 + trr_22x * dot_lij_y_240 + trr_32x * dot_lij_y_340;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103 + trr_23x * dot_lij_y_203 + trr_33x * dot_lij_y_303;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112 + trr_23x * dot_lij_y_212 + trr_33x * dot_lij_y_312;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121 + trr_23x * dot_lij_y_221 + trr_33x * dot_lij_y_321;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130 + trr_23x * dot_lij_y_230 + trr_33x * dot_lij_y_330;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102 + trr_24x * dot_lij_y_202 + trr_34x * dot_lij_y_302;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111 + trr_24x * dot_lij_y_211 + trr_34x * dot_lij_y_311;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120 + trr_24x * dot_lij_y_220 + trr_34x * dot_lij_y_320;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101 + trr_25x * dot_lij_y_201 + trr_35x * dot_lij_y_301;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110 + trr_25x * dot_lij_y_210 + trr_35x * dot_lij_y_310;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    double trr_26x = cpx * trr_25x + 5*b01 * trr_24x + 2*b00 * trr_15x;
                    double trr_36x = cpx * trr_35x + 5*b01 * trr_34x + 3*b00 * trr_25x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100 + trr_26x * dot_lij_y_200 + trr_36x * dot_lij_y_300;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005 + trr_26z * dm_kl_006;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005 + trr_36z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014 + trr_25z * dm_kl_015;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014 + trr_35z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023 + trr_24z * dm_kl_024;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023 + trr_34z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032 + trr_23z * dm_kl_033;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032 + trr_33z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041 + trr_22z * dm_kl_042;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041 + trr_32z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050 + trr_21z * dm_kl_051;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050 + trr_31z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_062 = trr_20z * dm_kl_060;
                    double dot_lkl_z_063 = trr_30z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104 + trr_25z * dm_kl_105;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104 + trr_35z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113 + trr_24z * dm_kl_114;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113 + trr_34z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122 + trr_23z * dm_kl_123;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122 + trr_33z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131 + trr_22z * dm_kl_132;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131 + trr_32z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140 + trr_21z * dm_kl_141;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140 + trr_31z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_152 = trr_20z * dm_kl_150;
                    double dot_lkl_z_153 = trr_30z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203 + trr_24z * dm_kl_204;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203 + trr_34z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212 + trr_23z * dm_kl_213;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212 + trr_33z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221 + trr_22z * dm_kl_222;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221 + trr_32z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230 + trr_21z * dm_kl_231;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230 + trr_31z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_242 = trr_20z * dm_kl_240;
                    double dot_lkl_z_243 = trr_30z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302 + trr_23z * dm_kl_303;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302 + trr_33z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311 + trr_22z * dm_kl_312;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311 + trr_32z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320 + trr_21z * dm_kl_321;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320 + trr_31z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_332 = trr_20z * dm_kl_330;
                    double dot_lkl_z_333 = trr_30z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401 + trr_22z * dm_kl_402;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401 + trr_32z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410 + trr_21z * dm_kl_411;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410 + trr_31z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_422 = trr_20z * dm_kl_420;
                    double dot_lkl_z_423 = trr_30z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500 + trr_21z * dm_kl_501;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500 + trr_31z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_512 = trr_20z * dm_kl_510;
                    double dot_lkl_z_513 = trr_30z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_z_602 = trr_20z * dm_kl_600;
                    double dot_lkl_z_603 = trr_30z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052 + trr_06y * dot_lkl_z_062;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053 + trr_06y * dot_lkl_z_063;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051 + trr_16y * dot_lkl_z_061;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052 + trr_16y * dot_lkl_z_062;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050 + trr_26y * dot_lkl_z_060;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051 + trr_26y * dot_lkl_z_061;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050 + trr_36y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142 + trr_05y * dot_lkl_z_152;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143 + trr_05y * dot_lkl_z_153;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141 + trr_15y * dot_lkl_z_151;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142 + trr_15y * dot_lkl_z_152;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140 + trr_25y * dot_lkl_z_150;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141 + trr_25y * dot_lkl_z_151;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140 + trr_35y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232 + trr_04y * dot_lkl_z_242;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233 + trr_04y * dot_lkl_z_243;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231 + trr_14y * dot_lkl_z_241;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232 + trr_14y * dot_lkl_z_242;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230 + trr_24y * dot_lkl_z_240;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231 + trr_24y * dot_lkl_z_241;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230 + trr_34y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322 + trr_03y * dot_lkl_z_332;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323 + trr_03y * dot_lkl_z_333;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321 + trr_13y * dot_lkl_z_331;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322 + trr_13y * dot_lkl_z_332;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320 + trr_23y * dot_lkl_z_330;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321 + trr_23y * dot_lkl_z_331;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320 + trr_33y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412 + trr_02y * dot_lkl_z_422;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413 + trr_02y * dot_lkl_z_423;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411 + trr_12y * dot_lkl_z_421;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412 + trr_12y * dot_lkl_z_422;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410 + trr_22y * dot_lkl_z_420;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411 + trr_22y * dot_lkl_z_421;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410 + trr_32y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502 + trr_01y * dot_lkl_z_512;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503 + trr_01y * dot_lkl_z_513;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501 + trr_11y * dot_lkl_z_511;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502 + trr_11y * dot_lkl_z_512;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500 + trr_21y * dot_lkl_z_510;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501 + trr_21y * dot_lkl_z_511;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500 + trr_31y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_602 = 1 * dot_lkl_z_602;
                    double dot_lkl_y_603 = 1 * dot_lkl_z_603;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    double dot_lkl_y_611 = trr_10y * dot_lkl_z_601;
                    double dot_lkl_y_612 = trr_10y * dot_lkl_z_602;
                    double dot_lkl_y_620 = trr_20y * dot_lkl_z_600;
                    double dot_lkl_y_621 = trr_20y * dot_lkl_z_601;
                    double dot_lkl_y_630 = trr_30y * dot_lkl_z_600;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502 + trr_06x * dot_lkl_y_602;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503 + trr_06x * dot_lkl_y_603;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511 + trr_06x * dot_lkl_y_611;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512 + trr_06x * dot_lkl_y_612;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520 + trr_06x * dot_lkl_y_620;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521 + trr_06x * dot_lkl_y_621;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530 + trr_06x * dot_lkl_y_630;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501 + trr_16x * dot_lkl_y_601;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502 + trr_16x * dot_lkl_y_602;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510 + trr_16x * dot_lkl_y_610;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511 + trr_16x * dot_lkl_y_611;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520 + trr_16x * dot_lkl_y_620;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500 + trr_26x * dot_lkl_y_600;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501 + trr_26x * dot_lkl_y_601;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510 + trr_26x * dot_lkl_y_610;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500 + trr_36x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+5, vj_ij_011);
        atomicAdd(vj1+ij_pair0+6, vj_ij_012);
        atomicAdd(vj1+ij_pair0+7, vj_ij_020);
        atomicAdd(vj1+ij_pair0+8, vj_ij_021);
        atomicAdd(vj1+ij_pair0+9, vj_ij_030);
        atomicAdd(vj1+ij_pair0+11, vj_ij_101);
        atomicAdd(vj1+ij_pair0+12, vj_ij_102);
        atomicAdd(vj1+ij_pair0+13, vj_ij_110);
        atomicAdd(vj1+ij_pair0+14, vj_ij_111);
        atomicAdd(vj1+ij_pair0+15, vj_ij_120);
        atomicAdd(vj1+ij_pair0+16, vj_ij_200);
        atomicAdd(vj1+ij_pair0+17, vj_ij_201);
        atomicAdd(vj1+ij_pair0+18, vj_ij_210);
        atomicAdd(vj1+ij_pair0+19, vj_ij_300);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_3_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_3_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_2_0 = 0.;
        double gout_3_0 = 0.;
        double gout_4_0 = 0.;
        double gout_6_0 = 0.;
        double gout_7_0 = 0.;
        double gout_8_0 = 0.;
        double gout_9_0 = 0.;
        double gout_10_0 = 0.;
        double gout_11_0 = 0.;
        double gout_12_0 = 0.;
        double gout_13_0 = 0.;
        double gout_14_0 = 0.;
        double gout_16_0 = 0.;
        double gout_17_0 = 0.;
        double gout_18_0 = 0.;
        double gout_19_0 = 0.;
        double gout_20_0 = 0.;
        double gout_21_0 = 0.;
        double gout_22_0 = 0.;
        double gout_23_0 = 0.;
        double gout_24_0 = 0.;
        double gout_25_0 = 0.;
        double gout_26_0 = 0.;
        double gout_27_0 = 0.;
        double gout_28_0 = 0.;
        double gout_29_0 = 0.;
        double gout_30_0 = 0.;
        double gout_31_0 = 0.;
        double gout_32_0 = 0.;
        double gout_33_0 = 0.;
        double gout_34_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    gout_2_0 += fac * 1 * trr_20z;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    gout_3_0 += fac * 1 * trr_30z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    gout_4_0 += fac * 1 * trr_40z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_6_0 += fac * trr_10y * trr_10z;
                    gout_7_0 += fac * trr_10y * trr_20z;
                    gout_8_0 += fac * trr_10y * trr_30z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_9_0 += fac * trr_20y * wt;
                    gout_10_0 += fac * trr_20y * trr_10z;
                    gout_11_0 += fac * trr_20y * trr_20z;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    gout_12_0 += fac * trr_30y * wt;
                    gout_13_0 += fac * trr_30y * trr_10z;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    gout_14_0 += fac * trr_40y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_16_0 += trr_10x * 1 * trr_10z;
                    gout_17_0 += trr_10x * 1 * trr_20z;
                    gout_18_0 += trr_10x * 1 * trr_30z;
                    gout_19_0 += trr_10x * trr_10y * wt;
                    gout_20_0 += trr_10x * trr_10y * trr_10z;
                    gout_21_0 += trr_10x * trr_10y * trr_20z;
                    gout_22_0 += trr_10x * trr_20y * wt;
                    gout_23_0 += trr_10x * trr_20y * trr_10z;
                    gout_24_0 += trr_10x * trr_30y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_25_0 += trr_20x * 1 * wt;
                    gout_26_0 += trr_20x * 1 * trr_10z;
                    gout_27_0 += trr_20x * 1 * trr_20z;
                    gout_28_0 += trr_20x * trr_10y * wt;
                    gout_29_0 += trr_20x * trr_10y * trr_10z;
                    gout_30_0 += trr_20x * trr_20y * wt;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    gout_31_0 += trr_30x * 1 * wt;
                    gout_32_0 += trr_30x * 1 * trr_10z;
                    gout_33_0 += trr_30x * trr_10y * wt;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    gout_34_0 += trr_40x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+2, gout_2_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+4, gout_4_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+6, gout_6_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+7, gout_7_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+8, gout_8_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+9, gout_9_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+10, gout_10_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+11, gout_11_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+12, gout_12_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+13, gout_13_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+14, gout_14_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+16, gout_16_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+17, gout_17_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+18, gout_18_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+19, gout_19_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+20, gout_20_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+21, gout_21_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+22, gout_22_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+23, gout_23_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+24, gout_24_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+25, gout_25_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+26, gout_26_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+27, gout_27_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+28, gout_28_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+29, gout_29_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+30, gout_30_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+31, gout_31_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+32, gout_32_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+33, gout_33_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+34, gout_34_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_2_0*dm1[ij_pair0+2] + gout_3_0*dm1[ij_pair0+3] + gout_4_0*dm1[ij_pair0+4] + gout_6_0*dm1[ij_pair0+6] + gout_7_0*dm1[ij_pair0+7] + gout_8_0*dm1[ij_pair0+8] + gout_9_0*dm1[ij_pair0+9] + gout_10_0*dm1[ij_pair0+10] + gout_11_0*dm1[ij_pair0+11] + gout_12_0*dm1[ij_pair0+12] + gout_13_0*dm1[ij_pair0+13] + gout_14_0*dm1[ij_pair0+14] + gout_16_0*dm1[ij_pair0+16] + gout_17_0*dm1[ij_pair0+17] + gout_18_0*dm1[ij_pair0+18] + gout_19_0*dm1[ij_pair0+19] + gout_20_0*dm1[ij_pair0+20] + gout_21_0*dm1[ij_pair0+21] + gout_22_0*dm1[ij_pair0+22] + gout_23_0*dm1[ij_pair0+23] + gout_24_0*dm1[ij_pair0+24] + gout_25_0*dm1[ij_pair0+25] + gout_26_0*dm1[ij_pair0+26] + gout_27_0*dm1[ij_pair0+27] + gout_28_0*dm1[ij_pair0+28] + gout_29_0*dm1[ij_pair0+29] + gout_30_0*dm1[ij_pair0+30] + gout_31_0*dm1[ij_pair0+31] + gout_32_0*dm1[ij_pair0+32] + gout_33_0*dm1[ij_pair0+33] + gout_34_0*dm1[ij_pair0+34]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_4_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_010 = dm2[kl_pair0+2];
        double dm_kl_100 = dm2[kl_pair0+3];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_001 = 0;
        double vj_kl_010 = 0;
        double vj_kl_100 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_01z = cpz * wt;
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001;
                    double dot_lkl_z_010 = wt * dm_kl_010;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010;
                    double dot_lkl_z_100 = wt * dm_kl_100;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_010);
        atomicAdd(vj2+kl_pair0+3, vj_kl_100);
    }
}
__global__
void rys_j_4_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_010 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+4];
        double dm_kl_020 = dm2[kl_pair0+5];
        double dm_kl_100 = dm2[kl_pair0+6];
        double dm_kl_101 = dm2[kl_pair0+7];
        double dm_kl_110 = dm2[kl_pair0+8];
        double dm_kl_200 = dm2[kl_pair0+9];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_001 = 0;
        double vj_kl_002 = 0;
        double vj_kl_010 = 0;
        double vj_kl_011 = 0;
        double vj_kl_020 = 0;
        double vj_kl_100 = 0;
        double vj_kl_101 = 0;
        double vj_kl_110 = 0;
        double vj_kl_200 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+6*TILE2] + trr_22z * dm_ij_cache[sh_ij+7*TILE2] + trr_32z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+9*TILE2] + trr_12z * dm_ij_cache[sh_ij+10*TILE2] + trr_22z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+12*TILE2] + trr_12z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2] + trr_32z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+19*TILE2] + trr_12z * dm_ij_cache[sh_ij+20*TILE2] + trr_22z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2] + trr_22z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+28*TILE2] + trr_12z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+31*TILE2] + trr_12z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_402 = 1 * dot_lij_z_402;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001 + trr_02z * dm_kl_002;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001 + trr_12z * dm_kl_002;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001 + trr_22z * dm_kl_002;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001 + trr_32z * dm_kl_002;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001 + trr_42z * dm_kl_002;
                    double dot_lkl_z_010 = wt * dm_kl_010 + trr_01z * dm_kl_011;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010 + trr_11z * dm_kl_011;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010 + trr_21z * dm_kl_011;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010 + trr_31z * dm_kl_011;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010 + trr_41z * dm_kl_011;
                    double dot_lkl_z_020 = wt * dm_kl_020;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020;
                    double dot_lkl_z_100 = wt * dm_kl_100 + trr_01z * dm_kl_101;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100 + trr_11z * dm_kl_101;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100 + trr_21z * dm_kl_101;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100 + trr_31z * dm_kl_101;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100 + trr_41z * dm_kl_101;
                    double dot_lkl_z_110 = wt * dm_kl_110;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110;
                    double dot_lkl_z_200 = wt * dm_kl_200;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_010);
        atomicAdd(vj2+kl_pair0+4, vj_kl_011);
        atomicAdd(vj2+kl_pair0+5, vj_kl_020);
        atomicAdd(vj2+kl_pair0+6, vj_kl_100);
        atomicAdd(vj2+kl_pair0+7, vj_kl_101);
        atomicAdd(vj2+kl_pair0+8, vj_kl_110);
        atomicAdd(vj2+kl_pair0+9, vj_kl_200);
    }
}
__global__
void rys_j_4_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+6];
        double dm_kl_020 = dm2[kl_pair0+7];
        double dm_kl_021 = dm2[kl_pair0+8];
        double dm_kl_030 = dm2[kl_pair0+9];
        double dm_kl_101 = dm2[kl_pair0+11];
        double dm_kl_102 = dm2[kl_pair0+12];
        double dm_kl_110 = dm2[kl_pair0+13];
        double dm_kl_111 = dm2[kl_pair0+14];
        double dm_kl_120 = dm2[kl_pair0+15];
        double dm_kl_200 = dm2[kl_pair0+16];
        double dm_kl_201 = dm2[kl_pair0+17];
        double dm_kl_210 = dm2[kl_pair0+18];
        double dm_kl_300 = dm2[kl_pair0+19];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_030 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_120 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_210 = 0;
        double vj_kl_300 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+6*TILE2] + trr_22z * dm_ij_cache[sh_ij+7*TILE2] + trr_32z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+6*TILE2] + trr_23z * dm_ij_cache[sh_ij+7*TILE2] + trr_33z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+9*TILE2] + trr_12z * dm_ij_cache[sh_ij+10*TILE2] + trr_22z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+9*TILE2] + trr_13z * dm_ij_cache[sh_ij+10*TILE2] + trr_23z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+12*TILE2] + trr_12z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+12*TILE2] + trr_13z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2] + trr_32z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2] + trr_33z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+19*TILE2] + trr_12z * dm_ij_cache[sh_ij+20*TILE2] + trr_22z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+19*TILE2] + trr_13z * dm_ij_cache[sh_ij+20*TILE2] + trr_23z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2] + trr_22z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2] + trr_23z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+28*TILE2] + trr_12z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+28*TILE2] + trr_13z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+31*TILE2] + trr_12z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+31*TILE2] + trr_13z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_402 = 1 * dot_lij_z_402;
                    double dot_lij_y_403 = 1 * dot_lij_z_403;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021;
                    double dot_lkl_z_030 = wt * dm_kl_030;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111;
                    double dot_lkl_z_120 = wt * dm_kl_120;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201;
                    double dot_lkl_z_210 = wt * dm_kl_210;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210;
                    double dot_lkl_z_300 = wt * dm_kl_300;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+5, vj_kl_011);
        atomicAdd(vj2+kl_pair0+6, vj_kl_012);
        atomicAdd(vj2+kl_pair0+7, vj_kl_020);
        atomicAdd(vj2+kl_pair0+8, vj_kl_021);
        atomicAdd(vj2+kl_pair0+9, vj_kl_030);
        atomicAdd(vj2+kl_pair0+11, vj_kl_101);
        atomicAdd(vj2+kl_pair0+12, vj_kl_102);
        atomicAdd(vj2+kl_pair0+13, vj_kl_110);
        atomicAdd(vj2+kl_pair0+14, vj_kl_111);
        atomicAdd(vj2+kl_pair0+15, vj_kl_120);
        atomicAdd(vj2+kl_pair0+16, vj_kl_200);
        atomicAdd(vj2+kl_pair0+17, vj_kl_201);
        atomicAdd(vj2+kl_pair0+18, vj_kl_210);
        atomicAdd(vj2+kl_pair0+19, vj_kl_300);
    }
}
__global__
void rys_j_4_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+6*TILE2] + trr_22z * dm_ij_cache[sh_ij+7*TILE2] + trr_32z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+6*TILE2] + trr_23z * dm_ij_cache[sh_ij+7*TILE2] + trr_33z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+6*TILE2] + trr_24z * dm_ij_cache[sh_ij+7*TILE2] + trr_34z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+9*TILE2] + trr_12z * dm_ij_cache[sh_ij+10*TILE2] + trr_22z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+9*TILE2] + trr_13z * dm_ij_cache[sh_ij+10*TILE2] + trr_23z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+9*TILE2] + trr_14z * dm_ij_cache[sh_ij+10*TILE2] + trr_24z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+12*TILE2] + trr_12z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+12*TILE2] + trr_13z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+12*TILE2] + trr_14z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2] + trr_32z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2] + trr_33z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2] + trr_34z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+19*TILE2] + trr_12z * dm_ij_cache[sh_ij+20*TILE2] + trr_22z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+19*TILE2] + trr_13z * dm_ij_cache[sh_ij+20*TILE2] + trr_23z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+19*TILE2] + trr_14z * dm_ij_cache[sh_ij+20*TILE2] + trr_24z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2] + trr_22z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2] + trr_23z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2] + trr_24z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+28*TILE2] + trr_12z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+28*TILE2] + trr_13z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+28*TILE2] + trr_14z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+31*TILE2] + trr_12z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+31*TILE2] + trr_13z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+31*TILE2] + trr_14z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_402 = 1 * dot_lij_z_402;
                    double dot_lij_y_403 = 1 * dot_lij_z_403;
                    double dot_lij_y_404 = 1 * dot_lij_z_404;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003 + trr_24z * dm_kl_004;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003 + trr_34z * dm_kl_004;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003 + trr_44z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012 + trr_23z * dm_kl_013;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012 + trr_33z * dm_kl_013;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012 + trr_43z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021 + trr_22z * dm_kl_022;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021 + trr_32z * dm_kl_022;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021 + trr_42z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102 + trr_23z * dm_kl_103;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102 + trr_33z * dm_kl_103;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102 + trr_43z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111 + trr_22z * dm_kl_112;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111 + trr_32z * dm_kl_112;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111 + trr_42z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201 + trr_22z * dm_kl_202;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201 + trr_32z * dm_kl_202;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201 + trr_42z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_4_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double dot_lij_z_005 = trr_25z * dm_ij_cache[sh_ij+2*TILE2] + trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+6*TILE2] + trr_22z * dm_ij_cache[sh_ij+7*TILE2] + trr_32z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+6*TILE2] + trr_23z * dm_ij_cache[sh_ij+7*TILE2] + trr_33z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+6*TILE2] + trr_24z * dm_ij_cache[sh_ij+7*TILE2] + trr_34z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_015 = trr_15z * dm_ij_cache[sh_ij+6*TILE2] + trr_25z * dm_ij_cache[sh_ij+7*TILE2] + trr_35z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+9*TILE2] + trr_12z * dm_ij_cache[sh_ij+10*TILE2] + trr_22z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+9*TILE2] + trr_13z * dm_ij_cache[sh_ij+10*TILE2] + trr_23z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+9*TILE2] + trr_14z * dm_ij_cache[sh_ij+10*TILE2] + trr_24z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+9*TILE2] + trr_15z * dm_ij_cache[sh_ij+10*TILE2] + trr_25z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+12*TILE2] + trr_12z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+12*TILE2] + trr_13z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+12*TILE2] + trr_14z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+12*TILE2] + trr_15z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2] + trr_32z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2] + trr_33z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2] + trr_34z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_105 = trr_15z * dm_ij_cache[sh_ij+16*TILE2] + trr_25z * dm_ij_cache[sh_ij+17*TILE2] + trr_35z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+19*TILE2] + trr_12z * dm_ij_cache[sh_ij+20*TILE2] + trr_22z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+19*TILE2] + trr_13z * dm_ij_cache[sh_ij+20*TILE2] + trr_23z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+19*TILE2] + trr_14z * dm_ij_cache[sh_ij+20*TILE2] + trr_24z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+19*TILE2] + trr_15z * dm_ij_cache[sh_ij+20*TILE2] + trr_25z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+22*TILE2] + trr_15z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2] + trr_22z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2] + trr_23z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2] + trr_24z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+25*TILE2] + trr_15z * dm_ij_cache[sh_ij+26*TILE2] + trr_25z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+28*TILE2] + trr_12z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+28*TILE2] + trr_13z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+28*TILE2] + trr_14z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+28*TILE2] + trr_15z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+31*TILE2] + trr_12z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+31*TILE2] + trr_13z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+31*TILE2] + trr_14z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+31*TILE2] + trr_15z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_402 = 1 * dot_lij_z_402;
                    double dot_lij_y_403 = 1 * dot_lij_z_403;
                    double dot_lij_y_404 = 1 * dot_lij_z_404;
                    double dot_lij_y_405 = 1 * dot_lij_z_405;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_4_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_4_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 35*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 35*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_002 = 0;
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_011 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_020 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_040 = 0;
        double vj_ij_101 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_110 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_130 = 0;
        double vj_ij_200 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_220 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_310 = 0;
        double vj_ij_400 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(6, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(6, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 6; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 6; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double dot_lij_z_000 = trr_20z * dm_ij_cache[sh_ij+2*TILE2] + trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double dot_lij_z_001 = trr_21z * dm_ij_cache[sh_ij+2*TILE2] + trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double dot_lij_z_002 = trr_22z * dm_ij_cache[sh_ij+2*TILE2] + trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double dot_lij_z_003 = trr_23z * dm_ij_cache[sh_ij+2*TILE2] + trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double dot_lij_z_004 = trr_24z * dm_ij_cache[sh_ij+2*TILE2] + trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double dot_lij_z_005 = trr_25z * dm_ij_cache[sh_ij+2*TILE2] + trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_26z = cpz * trr_25z + 5*b01 * trr_24z + 2*b00 * trr_15z;
                    double trr_36z = cpz * trr_35z + 5*b01 * trr_34z + 3*b00 * trr_25z;
                    double trr_46z = cpz * trr_45z + 5*b01 * trr_44z + 4*b00 * trr_35z;
                    double dot_lij_z_006 = trr_26z * dm_ij_cache[sh_ij+2*TILE2] + trr_36z * dm_ij_cache[sh_ij+3*TILE2] + trr_46z * dm_ij_cache[sh_ij+4*TILE2];
                    double dot_lij_z_010 = trr_10z * dm_ij_cache[sh_ij+6*TILE2] + trr_20z * dm_ij_cache[sh_ij+7*TILE2] + trr_30z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_011 = trr_11z * dm_ij_cache[sh_ij+6*TILE2] + trr_21z * dm_ij_cache[sh_ij+7*TILE2] + trr_31z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_012 = trr_12z * dm_ij_cache[sh_ij+6*TILE2] + trr_22z * dm_ij_cache[sh_ij+7*TILE2] + trr_32z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_013 = trr_13z * dm_ij_cache[sh_ij+6*TILE2] + trr_23z * dm_ij_cache[sh_ij+7*TILE2] + trr_33z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_014 = trr_14z * dm_ij_cache[sh_ij+6*TILE2] + trr_24z * dm_ij_cache[sh_ij+7*TILE2] + trr_34z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_015 = trr_15z * dm_ij_cache[sh_ij+6*TILE2] + trr_25z * dm_ij_cache[sh_ij+7*TILE2] + trr_35z * dm_ij_cache[sh_ij+8*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double dot_lij_z_016 = trr_16z * dm_ij_cache[sh_ij+6*TILE2] + trr_26z * dm_ij_cache[sh_ij+7*TILE2] + trr_36z * dm_ij_cache[sh_ij+8*TILE2];
                    double dot_lij_z_020 = wt * dm_ij_cache[sh_ij+9*TILE2] + trr_10z * dm_ij_cache[sh_ij+10*TILE2] + trr_20z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_021 = trr_01z * dm_ij_cache[sh_ij+9*TILE2] + trr_11z * dm_ij_cache[sh_ij+10*TILE2] + trr_21z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_022 = trr_02z * dm_ij_cache[sh_ij+9*TILE2] + trr_12z * dm_ij_cache[sh_ij+10*TILE2] + trr_22z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_023 = trr_03z * dm_ij_cache[sh_ij+9*TILE2] + trr_13z * dm_ij_cache[sh_ij+10*TILE2] + trr_23z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_024 = trr_04z * dm_ij_cache[sh_ij+9*TILE2] + trr_14z * dm_ij_cache[sh_ij+10*TILE2] + trr_24z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_025 = trr_05z * dm_ij_cache[sh_ij+9*TILE2] + trr_15z * dm_ij_cache[sh_ij+10*TILE2] + trr_25z * dm_ij_cache[sh_ij+11*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_026 = trr_06z * dm_ij_cache[sh_ij+9*TILE2] + trr_16z * dm_ij_cache[sh_ij+10*TILE2] + trr_26z * dm_ij_cache[sh_ij+11*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+12*TILE2] + trr_10z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+12*TILE2] + trr_11z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+12*TILE2] + trr_12z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+12*TILE2] + trr_13z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+12*TILE2] + trr_14z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+12*TILE2] + trr_15z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_036 = trr_06z * dm_ij_cache[sh_ij+12*TILE2] + trr_16z * dm_ij_cache[sh_ij+13*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_046 = trr_06z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_100 = trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2] + trr_30z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_101 = trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2] + trr_31z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_102 = trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2] + trr_32z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_103 = trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2] + trr_33z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_104 = trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2] + trr_34z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_105 = trr_15z * dm_ij_cache[sh_ij+16*TILE2] + trr_25z * dm_ij_cache[sh_ij+17*TILE2] + trr_35z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_106 = trr_16z * dm_ij_cache[sh_ij+16*TILE2] + trr_26z * dm_ij_cache[sh_ij+17*TILE2] + trr_36z * dm_ij_cache[sh_ij+18*TILE2];
                    double dot_lij_z_110 = wt * dm_ij_cache[sh_ij+19*TILE2] + trr_10z * dm_ij_cache[sh_ij+20*TILE2] + trr_20z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_111 = trr_01z * dm_ij_cache[sh_ij+19*TILE2] + trr_11z * dm_ij_cache[sh_ij+20*TILE2] + trr_21z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_112 = trr_02z * dm_ij_cache[sh_ij+19*TILE2] + trr_12z * dm_ij_cache[sh_ij+20*TILE2] + trr_22z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_113 = trr_03z * dm_ij_cache[sh_ij+19*TILE2] + trr_13z * dm_ij_cache[sh_ij+20*TILE2] + trr_23z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_114 = trr_04z * dm_ij_cache[sh_ij+19*TILE2] + trr_14z * dm_ij_cache[sh_ij+20*TILE2] + trr_24z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_115 = trr_05z * dm_ij_cache[sh_ij+19*TILE2] + trr_15z * dm_ij_cache[sh_ij+20*TILE2] + trr_25z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_116 = trr_06z * dm_ij_cache[sh_ij+19*TILE2] + trr_16z * dm_ij_cache[sh_ij+20*TILE2] + trr_26z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+22*TILE2] + trr_15z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_126 = trr_06z * dm_ij_cache[sh_ij+22*TILE2] + trr_16z * dm_ij_cache[sh_ij+23*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_136 = trr_06z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_200 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2] + trr_20z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_201 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2] + trr_21z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_202 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2] + trr_22z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_203 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2] + trr_23z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_204 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2] + trr_24z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_205 = trr_05z * dm_ij_cache[sh_ij+25*TILE2] + trr_15z * dm_ij_cache[sh_ij+26*TILE2] + trr_25z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_206 = trr_06z * dm_ij_cache[sh_ij+25*TILE2] + trr_16z * dm_ij_cache[sh_ij+26*TILE2] + trr_26z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+28*TILE2] + trr_10z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+28*TILE2] + trr_11z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+28*TILE2] + trr_12z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+28*TILE2] + trr_13z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+28*TILE2] + trr_14z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+28*TILE2] + trr_15z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_216 = trr_06z * dm_ij_cache[sh_ij+28*TILE2] + trr_16z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_226 = trr_06z * dm_ij_cache[sh_ij+30*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+31*TILE2] + trr_10z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+31*TILE2] + trr_11z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+31*TILE2] + trr_12z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+31*TILE2] + trr_13z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+31*TILE2] + trr_14z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+31*TILE2] + trr_15z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_306 = trr_06z * dm_ij_cache[sh_ij+31*TILE2] + trr_16z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_316 = trr_06z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_406 = trr_06z * dm_ij_cache[sh_ij+34*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016 + trr_20y * dot_lij_z_026 + trr_30y * dot_lij_z_036 + trr_40y * dot_lij_z_046;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015 + trr_21y * dot_lij_z_025 + trr_31y * dot_lij_z_035 + trr_41y * dot_lij_z_045;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014 + trr_22y * dot_lij_z_024 + trr_32y * dot_lij_z_034 + trr_42y * dot_lij_z_044;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013 + trr_23y * dot_lij_z_023 + trr_33y * dot_lij_z_033 + trr_43y * dot_lij_z_043;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012 + trr_24y * dot_lij_z_022 + trr_34y * dot_lij_z_032 + trr_44y * dot_lij_z_042;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011 + trr_25y * dot_lij_z_021 + trr_35y * dot_lij_z_031 + trr_45y * dot_lij_z_041;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double trr_26y = cpy * trr_25y + 5*b01 * trr_24y + 2*b00 * trr_15y;
                    double trr_36y = cpy * trr_35y + 5*b01 * trr_34y + 3*b00 * trr_25y;
                    double trr_46y = cpy * trr_45y + 5*b01 * trr_44y + 4*b00 * trr_35y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010 + trr_26y * dot_lij_z_020 + trr_36y * dot_lij_z_030 + trr_46y * dot_lij_z_040;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135;
                    double dot_lij_y_106 = 1 * dot_lij_z_106 + trr_10y * dot_lij_z_116 + trr_20y * dot_lij_z_126 + trr_30y * dot_lij_z_136;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105 + trr_11y * dot_lij_z_115 + trr_21y * dot_lij_z_125 + trr_31y * dot_lij_z_135;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104 + trr_12y * dot_lij_z_114 + trr_22y * dot_lij_z_124 + trr_32y * dot_lij_z_134;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103 + trr_13y * dot_lij_z_113 + trr_23y * dot_lij_z_123 + trr_33y * dot_lij_z_133;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102 + trr_14y * dot_lij_z_112 + trr_24y * dot_lij_z_122 + trr_34y * dot_lij_z_132;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101 + trr_15y * dot_lij_z_111 + trr_25y * dot_lij_z_121 + trr_35y * dot_lij_z_131;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100 + trr_16y * dot_lij_z_110 + trr_26y * dot_lij_z_120 + trr_36y * dot_lij_z_130;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225;
                    double dot_lij_y_206 = 1 * dot_lij_z_206 + trr_10y * dot_lij_z_216 + trr_20y * dot_lij_z_226;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224;
                    double dot_lij_y_215 = trr_01y * dot_lij_z_205 + trr_11y * dot_lij_z_215 + trr_21y * dot_lij_z_225;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223;
                    double dot_lij_y_224 = trr_02y * dot_lij_z_204 + trr_12y * dot_lij_z_214 + trr_22y * dot_lij_z_224;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222;
                    double dot_lij_y_233 = trr_03y * dot_lij_z_203 + trr_13y * dot_lij_z_213 + trr_23y * dot_lij_z_223;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221;
                    double dot_lij_y_242 = trr_04y * dot_lij_z_202 + trr_14y * dot_lij_z_212 + trr_24y * dot_lij_z_222;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220;
                    double dot_lij_y_251 = trr_05y * dot_lij_z_201 + trr_15y * dot_lij_z_211 + trr_25y * dot_lij_z_221;
                    double dot_lij_y_260 = trr_06y * dot_lij_z_200 + trr_16y * dot_lij_z_210 + trr_26y * dot_lij_z_220;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315;
                    double dot_lij_y_306 = 1 * dot_lij_z_306 + trr_10y * dot_lij_z_316;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314;
                    double dot_lij_y_315 = trr_01y * dot_lij_z_305 + trr_11y * dot_lij_z_315;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313;
                    double dot_lij_y_324 = trr_02y * dot_lij_z_304 + trr_12y * dot_lij_z_314;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312;
                    double dot_lij_y_333 = trr_03y * dot_lij_z_303 + trr_13y * dot_lij_z_313;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311;
                    double dot_lij_y_342 = trr_04y * dot_lij_z_302 + trr_14y * dot_lij_z_312;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310;
                    double dot_lij_y_351 = trr_05y * dot_lij_z_301 + trr_15y * dot_lij_z_311;
                    double dot_lij_y_360 = trr_06y * dot_lij_z_300 + trr_16y * dot_lij_z_310;
                    double dot_lij_y_400 = 1 * dot_lij_z_400;
                    double dot_lij_y_401 = 1 * dot_lij_z_401;
                    double dot_lij_y_402 = 1 * dot_lij_z_402;
                    double dot_lij_y_403 = 1 * dot_lij_z_403;
                    double dot_lij_y_404 = 1 * dot_lij_z_404;
                    double dot_lij_y_405 = 1 * dot_lij_z_405;
                    double dot_lij_y_406 = 1 * dot_lij_z_406;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404;
                    double dot_lij_y_415 = trr_01y * dot_lij_z_405;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403;
                    double dot_lij_y_424 = trr_02y * dot_lij_z_404;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402;
                    double dot_lij_y_433 = trr_03y * dot_lij_z_403;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401;
                    double dot_lij_y_442 = trr_04y * dot_lij_z_402;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400;
                    double dot_lij_y_451 = trr_05y * dot_lij_z_401;
                    double dot_lij_y_460 = trr_06y * dot_lij_z_400;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106 + trr_20x * dot_lij_y_206 + trr_30x * dot_lij_y_306 + trr_40x * dot_lij_y_406;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115 + trr_20x * dot_lij_y_215 + trr_30x * dot_lij_y_315 + trr_40x * dot_lij_y_415;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124 + trr_20x * dot_lij_y_224 + trr_30x * dot_lij_y_324 + trr_40x * dot_lij_y_424;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133 + trr_20x * dot_lij_y_233 + trr_30x * dot_lij_y_333 + trr_40x * dot_lij_y_433;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142 + trr_20x * dot_lij_y_242 + trr_30x * dot_lij_y_342 + trr_40x * dot_lij_y_442;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151 + trr_20x * dot_lij_y_251 + trr_30x * dot_lij_y_351 + trr_40x * dot_lij_y_451;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160 + trr_20x * dot_lij_y_260 + trr_30x * dot_lij_y_360 + trr_40x * dot_lij_y_460;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105 + trr_21x * dot_lij_y_205 + trr_31x * dot_lij_y_305 + trr_41x * dot_lij_y_405;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114 + trr_21x * dot_lij_y_214 + trr_31x * dot_lij_y_314 + trr_41x * dot_lij_y_414;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123 + trr_21x * dot_lij_y_223 + trr_31x * dot_lij_y_323 + trr_41x * dot_lij_y_423;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132 + trr_21x * dot_lij_y_232 + trr_31x * dot_lij_y_332 + trr_41x * dot_lij_y_432;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141 + trr_21x * dot_lij_y_241 + trr_31x * dot_lij_y_341 + trr_41x * dot_lij_y_441;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150 + trr_21x * dot_lij_y_250 + trr_31x * dot_lij_y_350 + trr_41x * dot_lij_y_450;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104 + trr_22x * dot_lij_y_204 + trr_32x * dot_lij_y_304 + trr_42x * dot_lij_y_404;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113 + trr_22x * dot_lij_y_213 + trr_32x * dot_lij_y_313 + trr_42x * dot_lij_y_413;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122 + trr_22x * dot_lij_y_222 + trr_32x * dot_lij_y_322 + trr_42x * dot_lij_y_422;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131 + trr_22x * dot_lij_y_231 + trr_32x * dot_lij_y_331 + trr_42x * dot_lij_y_431;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140 + trr_22x * dot_lij_y_240 + trr_32x * dot_lij_y_340 + trr_42x * dot_lij_y_440;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103 + trr_23x * dot_lij_y_203 + trr_33x * dot_lij_y_303 + trr_43x * dot_lij_y_403;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112 + trr_23x * dot_lij_y_212 + trr_33x * dot_lij_y_312 + trr_43x * dot_lij_y_412;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121 + trr_23x * dot_lij_y_221 + trr_33x * dot_lij_y_321 + trr_43x * dot_lij_y_421;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130 + trr_23x * dot_lij_y_230 + trr_33x * dot_lij_y_330 + trr_43x * dot_lij_y_430;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102 + trr_24x * dot_lij_y_202 + trr_34x * dot_lij_y_302 + trr_44x * dot_lij_y_402;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111 + trr_24x * dot_lij_y_211 + trr_34x * dot_lij_y_311 + trr_44x * dot_lij_y_411;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120 + trr_24x * dot_lij_y_220 + trr_34x * dot_lij_y_320 + trr_44x * dot_lij_y_420;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101 + trr_25x * dot_lij_y_201 + trr_35x * dot_lij_y_301 + trr_45x * dot_lij_y_401;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110 + trr_25x * dot_lij_y_210 + trr_35x * dot_lij_y_310 + trr_45x * dot_lij_y_410;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    double trr_26x = cpx * trr_25x + 5*b01 * trr_24x + 2*b00 * trr_15x;
                    double trr_36x = cpx * trr_35x + 5*b01 * trr_34x + 3*b00 * trr_25x;
                    double trr_46x = cpx * trr_45x + 5*b01 * trr_44x + 4*b00 * trr_35x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100 + trr_26x * dot_lij_y_200 + trr_36x * dot_lij_y_300 + trr_46x * dot_lij_y_400;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005 + trr_26z * dm_kl_006;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005 + trr_36z * dm_kl_006;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005 + trr_46z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014 + trr_25z * dm_kl_015;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014 + trr_35z * dm_kl_015;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014 + trr_45z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023 + trr_24z * dm_kl_024;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023 + trr_34z * dm_kl_024;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023 + trr_44z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032 + trr_23z * dm_kl_033;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032 + trr_33z * dm_kl_033;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032 + trr_43z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041 + trr_22z * dm_kl_042;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041 + trr_32z * dm_kl_042;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041 + trr_42z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050 + trr_21z * dm_kl_051;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050 + trr_31z * dm_kl_051;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050 + trr_41z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_062 = trr_20z * dm_kl_060;
                    double dot_lkl_z_063 = trr_30z * dm_kl_060;
                    double dot_lkl_z_064 = trr_40z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104 + trr_25z * dm_kl_105;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104 + trr_35z * dm_kl_105;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104 + trr_45z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113 + trr_24z * dm_kl_114;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113 + trr_34z * dm_kl_114;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113 + trr_44z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122 + trr_23z * dm_kl_123;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122 + trr_33z * dm_kl_123;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122 + trr_43z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131 + trr_22z * dm_kl_132;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131 + trr_32z * dm_kl_132;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131 + trr_42z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140 + trr_21z * dm_kl_141;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140 + trr_31z * dm_kl_141;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140 + trr_41z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_152 = trr_20z * dm_kl_150;
                    double dot_lkl_z_153 = trr_30z * dm_kl_150;
                    double dot_lkl_z_154 = trr_40z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203 + trr_24z * dm_kl_204;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203 + trr_34z * dm_kl_204;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203 + trr_44z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212 + trr_23z * dm_kl_213;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212 + trr_33z * dm_kl_213;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212 + trr_43z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221 + trr_22z * dm_kl_222;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221 + trr_32z * dm_kl_222;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221 + trr_42z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230 + trr_21z * dm_kl_231;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230 + trr_31z * dm_kl_231;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230 + trr_41z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_242 = trr_20z * dm_kl_240;
                    double dot_lkl_z_243 = trr_30z * dm_kl_240;
                    double dot_lkl_z_244 = trr_40z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302 + trr_23z * dm_kl_303;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302 + trr_33z * dm_kl_303;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302 + trr_43z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311 + trr_22z * dm_kl_312;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311 + trr_32z * dm_kl_312;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311 + trr_42z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320 + trr_21z * dm_kl_321;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320 + trr_31z * dm_kl_321;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320 + trr_41z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_332 = trr_20z * dm_kl_330;
                    double dot_lkl_z_333 = trr_30z * dm_kl_330;
                    double dot_lkl_z_334 = trr_40z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401 + trr_22z * dm_kl_402;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401 + trr_32z * dm_kl_402;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401 + trr_42z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410 + trr_21z * dm_kl_411;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410 + trr_31z * dm_kl_411;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410 + trr_41z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_422 = trr_20z * dm_kl_420;
                    double dot_lkl_z_423 = trr_30z * dm_kl_420;
                    double dot_lkl_z_424 = trr_40z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500 + trr_21z * dm_kl_501;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500 + trr_31z * dm_kl_501;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500 + trr_41z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_512 = trr_20z * dm_kl_510;
                    double dot_lkl_z_513 = trr_30z * dm_kl_510;
                    double dot_lkl_z_514 = trr_40z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_z_602 = trr_20z * dm_kl_600;
                    double dot_lkl_z_603 = trr_30z * dm_kl_600;
                    double dot_lkl_z_604 = trr_40z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052 + trr_06y * dot_lkl_z_062;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053 + trr_06y * dot_lkl_z_063;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054 + trr_06y * dot_lkl_z_064;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051 + trr_16y * dot_lkl_z_061;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052 + trr_16y * dot_lkl_z_062;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053 + trr_16y * dot_lkl_z_063;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050 + trr_26y * dot_lkl_z_060;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051 + trr_26y * dot_lkl_z_061;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052 + trr_26y * dot_lkl_z_062;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050 + trr_36y * dot_lkl_z_060;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051 + trr_36y * dot_lkl_z_061;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050 + trr_46y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142 + trr_05y * dot_lkl_z_152;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143 + trr_05y * dot_lkl_z_153;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144 + trr_05y * dot_lkl_z_154;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141 + trr_15y * dot_lkl_z_151;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142 + trr_15y * dot_lkl_z_152;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143 + trr_15y * dot_lkl_z_153;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140 + trr_25y * dot_lkl_z_150;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141 + trr_25y * dot_lkl_z_151;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142 + trr_25y * dot_lkl_z_152;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140 + trr_35y * dot_lkl_z_150;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141 + trr_35y * dot_lkl_z_151;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140 + trr_45y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232 + trr_04y * dot_lkl_z_242;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233 + trr_04y * dot_lkl_z_243;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234 + trr_04y * dot_lkl_z_244;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231 + trr_14y * dot_lkl_z_241;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232 + trr_14y * dot_lkl_z_242;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233 + trr_14y * dot_lkl_z_243;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230 + trr_24y * dot_lkl_z_240;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231 + trr_24y * dot_lkl_z_241;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232 + trr_24y * dot_lkl_z_242;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230 + trr_34y * dot_lkl_z_240;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231 + trr_34y * dot_lkl_z_241;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230 + trr_44y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322 + trr_03y * dot_lkl_z_332;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323 + trr_03y * dot_lkl_z_333;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324 + trr_03y * dot_lkl_z_334;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321 + trr_13y * dot_lkl_z_331;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322 + trr_13y * dot_lkl_z_332;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323 + trr_13y * dot_lkl_z_333;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320 + trr_23y * dot_lkl_z_330;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321 + trr_23y * dot_lkl_z_331;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322 + trr_23y * dot_lkl_z_332;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320 + trr_33y * dot_lkl_z_330;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321 + trr_33y * dot_lkl_z_331;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320 + trr_43y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412 + trr_02y * dot_lkl_z_422;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413 + trr_02y * dot_lkl_z_423;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414 + trr_02y * dot_lkl_z_424;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411 + trr_12y * dot_lkl_z_421;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412 + trr_12y * dot_lkl_z_422;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413 + trr_12y * dot_lkl_z_423;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410 + trr_22y * dot_lkl_z_420;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411 + trr_22y * dot_lkl_z_421;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412 + trr_22y * dot_lkl_z_422;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410 + trr_32y * dot_lkl_z_420;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411 + trr_32y * dot_lkl_z_421;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410 + trr_42y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502 + trr_01y * dot_lkl_z_512;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503 + trr_01y * dot_lkl_z_513;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504 + trr_01y * dot_lkl_z_514;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501 + trr_11y * dot_lkl_z_511;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502 + trr_11y * dot_lkl_z_512;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503 + trr_11y * dot_lkl_z_513;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500 + trr_21y * dot_lkl_z_510;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501 + trr_21y * dot_lkl_z_511;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502 + trr_21y * dot_lkl_z_512;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500 + trr_31y * dot_lkl_z_510;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501 + trr_31y * dot_lkl_z_511;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500 + trr_41y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_602 = 1 * dot_lkl_z_602;
                    double dot_lkl_y_603 = 1 * dot_lkl_z_603;
                    double dot_lkl_y_604 = 1 * dot_lkl_z_604;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    double dot_lkl_y_611 = trr_10y * dot_lkl_z_601;
                    double dot_lkl_y_612 = trr_10y * dot_lkl_z_602;
                    double dot_lkl_y_613 = trr_10y * dot_lkl_z_603;
                    double dot_lkl_y_620 = trr_20y * dot_lkl_z_600;
                    double dot_lkl_y_621 = trr_20y * dot_lkl_z_601;
                    double dot_lkl_y_622 = trr_20y * dot_lkl_z_602;
                    double dot_lkl_y_630 = trr_30y * dot_lkl_z_600;
                    double dot_lkl_y_631 = trr_30y * dot_lkl_z_601;
                    double dot_lkl_y_640 = trr_40y * dot_lkl_z_600;
                    vj_ij_002 += fac * dot_lkl_y_002 + trr_01x * dot_lkl_y_102 + trr_02x * dot_lkl_y_202 + trr_03x * dot_lkl_y_302 + trr_04x * dot_lkl_y_402 + trr_05x * dot_lkl_y_502 + trr_06x * dot_lkl_y_602;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503 + trr_06x * dot_lkl_y_603;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504 + trr_06x * dot_lkl_y_604;
                    vj_ij_011 += fac * dot_lkl_y_011 + trr_01x * dot_lkl_y_111 + trr_02x * dot_lkl_y_211 + trr_03x * dot_lkl_y_311 + trr_04x * dot_lkl_y_411 + trr_05x * dot_lkl_y_511 + trr_06x * dot_lkl_y_611;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512 + trr_06x * dot_lkl_y_612;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513 + trr_06x * dot_lkl_y_613;
                    vj_ij_020 += fac * dot_lkl_y_020 + trr_01x * dot_lkl_y_120 + trr_02x * dot_lkl_y_220 + trr_03x * dot_lkl_y_320 + trr_04x * dot_lkl_y_420 + trr_05x * dot_lkl_y_520 + trr_06x * dot_lkl_y_620;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521 + trr_06x * dot_lkl_y_621;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522 + trr_06x * dot_lkl_y_622;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530 + trr_06x * dot_lkl_y_630;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531 + trr_06x * dot_lkl_y_631;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540 + trr_06x * dot_lkl_y_640;
                    vj_ij_101 += trr_10x * dot_lkl_y_001 + trr_11x * dot_lkl_y_101 + trr_12x * dot_lkl_y_201 + trr_13x * dot_lkl_y_301 + trr_14x * dot_lkl_y_401 + trr_15x * dot_lkl_y_501 + trr_16x * dot_lkl_y_601;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502 + trr_16x * dot_lkl_y_602;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503 + trr_16x * dot_lkl_y_603;
                    vj_ij_110 += trr_10x * dot_lkl_y_010 + trr_11x * dot_lkl_y_110 + trr_12x * dot_lkl_y_210 + trr_13x * dot_lkl_y_310 + trr_14x * dot_lkl_y_410 + trr_15x * dot_lkl_y_510 + trr_16x * dot_lkl_y_610;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511 + trr_16x * dot_lkl_y_611;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512 + trr_16x * dot_lkl_y_612;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520 + trr_16x * dot_lkl_y_620;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521 + trr_16x * dot_lkl_y_621;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530 + trr_16x * dot_lkl_y_630;
                    vj_ij_200 += trr_20x * dot_lkl_y_000 + trr_21x * dot_lkl_y_100 + trr_22x * dot_lkl_y_200 + trr_23x * dot_lkl_y_300 + trr_24x * dot_lkl_y_400 + trr_25x * dot_lkl_y_500 + trr_26x * dot_lkl_y_600;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501 + trr_26x * dot_lkl_y_601;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502 + trr_26x * dot_lkl_y_602;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510 + trr_26x * dot_lkl_y_610;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511 + trr_26x * dot_lkl_y_611;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520 + trr_26x * dot_lkl_y_620;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500 + trr_36x * dot_lkl_y_600;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501 + trr_36x * dot_lkl_y_601;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510 + trr_36x * dot_lkl_y_610;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500 + trr_46x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+2, vj_ij_002);
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+6, vj_ij_011);
        atomicAdd(vj1+ij_pair0+7, vj_ij_012);
        atomicAdd(vj1+ij_pair0+8, vj_ij_013);
        atomicAdd(vj1+ij_pair0+9, vj_ij_020);
        atomicAdd(vj1+ij_pair0+10, vj_ij_021);
        atomicAdd(vj1+ij_pair0+11, vj_ij_022);
        atomicAdd(vj1+ij_pair0+12, vj_ij_030);
        atomicAdd(vj1+ij_pair0+13, vj_ij_031);
        atomicAdd(vj1+ij_pair0+14, vj_ij_040);
        atomicAdd(vj1+ij_pair0+16, vj_ij_101);
        atomicAdd(vj1+ij_pair0+17, vj_ij_102);
        atomicAdd(vj1+ij_pair0+18, vj_ij_103);
        atomicAdd(vj1+ij_pair0+19, vj_ij_110);
        atomicAdd(vj1+ij_pair0+20, vj_ij_111);
        atomicAdd(vj1+ij_pair0+21, vj_ij_112);
        atomicAdd(vj1+ij_pair0+22, vj_ij_120);
        atomicAdd(vj1+ij_pair0+23, vj_ij_121);
        atomicAdd(vj1+ij_pair0+24, vj_ij_130);
        atomicAdd(vj1+ij_pair0+25, vj_ij_200);
        atomicAdd(vj1+ij_pair0+26, vj_ij_201);
        atomicAdd(vj1+ij_pair0+27, vj_ij_202);
        atomicAdd(vj1+ij_pair0+28, vj_ij_210);
        atomicAdd(vj1+ij_pair0+29, vj_ij_211);
        atomicAdd(vj1+ij_pair0+30, vj_ij_220);
        atomicAdd(vj1+ij_pair0+31, vj_ij_300);
        atomicAdd(vj1+ij_pair0+32, vj_ij_301);
        atomicAdd(vj1+ij_pair0+33, vj_ij_310);
        atomicAdd(vj1+ij_pair0+34, vj_ij_400);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_4_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_4_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_3_0 = 0.;
        double gout_4_0 = 0.;
        double gout_5_0 = 0.;
        double gout_8_0 = 0.;
        double gout_9_0 = 0.;
        double gout_10_0 = 0.;
        double gout_12_0 = 0.;
        double gout_13_0 = 0.;
        double gout_14_0 = 0.;
        double gout_15_0 = 0.;
        double gout_16_0 = 0.;
        double gout_17_0 = 0.;
        double gout_18_0 = 0.;
        double gout_19_0 = 0.;
        double gout_20_0 = 0.;
        double gout_23_0 = 0.;
        double gout_24_0 = 0.;
        double gout_25_0 = 0.;
        double gout_27_0 = 0.;
        double gout_28_0 = 0.;
        double gout_29_0 = 0.;
        double gout_30_0 = 0.;
        double gout_31_0 = 0.;
        double gout_32_0 = 0.;
        double gout_33_0 = 0.;
        double gout_34_0 = 0.;
        double gout_35_0 = 0.;
        double gout_37_0 = 0.;
        double gout_38_0 = 0.;
        double gout_39_0 = 0.;
        double gout_40_0 = 0.;
        double gout_41_0 = 0.;
        double gout_42_0 = 0.;
        double gout_43_0 = 0.;
        double gout_44_0 = 0.;
        double gout_45_0 = 0.;
        double gout_46_0 = 0.;
        double gout_47_0 = 0.;
        double gout_48_0 = 0.;
        double gout_49_0 = 0.;
        double gout_50_0 = 0.;
        double gout_51_0 = 0.;
        double gout_52_0 = 0.;
        double gout_53_0 = 0.;
        double gout_54_0 = 0.;
        double gout_55_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(3, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(3, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 3; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 3; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    gout_3_0 += fac * 1 * trr_30z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    gout_4_0 += fac * 1 * trr_40z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    gout_5_0 += fac * 1 * trr_50z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_8_0 += fac * trr_10y * trr_20z;
                    gout_9_0 += fac * trr_10y * trr_30z;
                    gout_10_0 += fac * trr_10y * trr_40z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_12_0 += fac * trr_20y * trr_10z;
                    gout_13_0 += fac * trr_20y * trr_20z;
                    gout_14_0 += fac * trr_20y * trr_30z;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    gout_15_0 += fac * trr_30y * wt;
                    gout_16_0 += fac * trr_30y * trr_10z;
                    gout_17_0 += fac * trr_30y * trr_20z;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    gout_18_0 += fac * trr_40y * wt;
                    gout_19_0 += fac * trr_40y * trr_10z;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    gout_20_0 += fac * trr_50y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_23_0 += trr_10x * 1 * trr_20z;
                    gout_24_0 += trr_10x * 1 * trr_30z;
                    gout_25_0 += trr_10x * 1 * trr_40z;
                    gout_27_0 += trr_10x * trr_10y * trr_10z;
                    gout_28_0 += trr_10x * trr_10y * trr_20z;
                    gout_29_0 += trr_10x * trr_10y * trr_30z;
                    gout_30_0 += trr_10x * trr_20y * wt;
                    gout_31_0 += trr_10x * trr_20y * trr_10z;
                    gout_32_0 += trr_10x * trr_20y * trr_20z;
                    gout_33_0 += trr_10x * trr_30y * wt;
                    gout_34_0 += trr_10x * trr_30y * trr_10z;
                    gout_35_0 += trr_10x * trr_40y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_37_0 += trr_20x * 1 * trr_10z;
                    gout_38_0 += trr_20x * 1 * trr_20z;
                    gout_39_0 += trr_20x * 1 * trr_30z;
                    gout_40_0 += trr_20x * trr_10y * wt;
                    gout_41_0 += trr_20x * trr_10y * trr_10z;
                    gout_42_0 += trr_20x * trr_10y * trr_20z;
                    gout_43_0 += trr_20x * trr_20y * wt;
                    gout_44_0 += trr_20x * trr_20y * trr_10z;
                    gout_45_0 += trr_20x * trr_30y * wt;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    gout_46_0 += trr_30x * 1 * wt;
                    gout_47_0 += trr_30x * 1 * trr_10z;
                    gout_48_0 += trr_30x * 1 * trr_20z;
                    gout_49_0 += trr_30x * trr_10y * wt;
                    gout_50_0 += trr_30x * trr_10y * trr_10z;
                    gout_51_0 += trr_30x * trr_20y * wt;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    gout_52_0 += trr_40x * 1 * wt;
                    gout_53_0 += trr_40x * 1 * trr_10z;
                    gout_54_0 += trr_40x * trr_10y * wt;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    gout_55_0 += trr_50x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+4, gout_4_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+5, gout_5_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+8, gout_8_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+9, gout_9_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+10, gout_10_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+12, gout_12_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+13, gout_13_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+14, gout_14_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+15, gout_15_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+16, gout_16_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+17, gout_17_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+18, gout_18_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+19, gout_19_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+20, gout_20_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+23, gout_23_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+24, gout_24_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+25, gout_25_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+27, gout_27_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+28, gout_28_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+29, gout_29_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+30, gout_30_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+31, gout_31_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+32, gout_32_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+33, gout_33_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+34, gout_34_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+35, gout_35_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+37, gout_37_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+38, gout_38_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+39, gout_39_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+40, gout_40_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+41, gout_41_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+42, gout_42_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+43, gout_43_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+44, gout_44_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+45, gout_45_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+46, gout_46_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+47, gout_47_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+48, gout_48_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+49, gout_49_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+50, gout_50_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+51, gout_51_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+52, gout_52_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+53, gout_53_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+54, gout_54_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+55, gout_55_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_3_0*dm1[ij_pair0+3] + gout_4_0*dm1[ij_pair0+4] + gout_5_0*dm1[ij_pair0+5] + gout_8_0*dm1[ij_pair0+8] + gout_9_0*dm1[ij_pair0+9] + gout_10_0*dm1[ij_pair0+10] + gout_12_0*dm1[ij_pair0+12] + gout_13_0*dm1[ij_pair0+13] + gout_14_0*dm1[ij_pair0+14] + gout_15_0*dm1[ij_pair0+15] + gout_16_0*dm1[ij_pair0+16] + gout_17_0*dm1[ij_pair0+17] + gout_18_0*dm1[ij_pair0+18] + gout_19_0*dm1[ij_pair0+19] + gout_20_0*dm1[ij_pair0+20] + gout_23_0*dm1[ij_pair0+23] + gout_24_0*dm1[ij_pair0+24] + gout_25_0*dm1[ij_pair0+25] + gout_27_0*dm1[ij_pair0+27] + gout_28_0*dm1[ij_pair0+28] + gout_29_0*dm1[ij_pair0+29] + gout_30_0*dm1[ij_pair0+30] + gout_31_0*dm1[ij_pair0+31] + gout_32_0*dm1[ij_pair0+32] + gout_33_0*dm1[ij_pair0+33] + gout_34_0*dm1[ij_pair0+34] + gout_35_0*dm1[ij_pair0+35] + gout_37_0*dm1[ij_pair0+37] + gout_38_0*dm1[ij_pair0+38] + gout_39_0*dm1[ij_pair0+39] + gout_40_0*dm1[ij_pair0+40] + gout_41_0*dm1[ij_pair0+41] + gout_42_0*dm1[ij_pair0+42] + gout_43_0*dm1[ij_pair0+43] + gout_44_0*dm1[ij_pair0+44] + gout_45_0*dm1[ij_pair0+45] + gout_46_0*dm1[ij_pair0+46] + gout_47_0*dm1[ij_pair0+47] + gout_48_0*dm1[ij_pair0+48] + gout_49_0*dm1[ij_pair0+49] + gout_50_0*dm1[ij_pair0+50] + gout_51_0*dm1[ij_pair0+51] + gout_52_0*dm1[ij_pair0+52] + gout_53_0*dm1[ij_pair0+53] + gout_54_0*dm1[ij_pair0+54] + gout_55_0*dm1[ij_pair0+55]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_5_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_010 = dm2[kl_pair0+2];
        double dm_kl_100 = dm2[kl_pair0+3];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_001 = 0;
        double vj_kl_010 = 0;
        double vj_kl_100 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_01z = cpz * wt;
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401 + trr_50x * dot_lij_y_501;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410 + trr_50x * dot_lij_y_510;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400 + trr_51x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001;
                    double dot_lkl_z_005 = trr_51z * dm_kl_001;
                    double dot_lkl_z_010 = wt * dm_kl_010;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010;
                    double dot_lkl_z_015 = trr_50z * dm_kl_010;
                    double dot_lkl_z_100 = wt * dm_kl_100;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100;
                    double dot_lkl_z_105 = trr_50z * dm_kl_100;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_010);
        atomicAdd(vj2+kl_pair0+3, vj_kl_100);
    }
}
__global__
void rys_j_5_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_010 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+4];
        double dm_kl_020 = dm2[kl_pair0+5];
        double dm_kl_100 = dm2[kl_pair0+6];
        double dm_kl_101 = dm2[kl_pair0+7];
        double dm_kl_110 = dm2[kl_pair0+8];
        double dm_kl_200 = dm2[kl_pair0+9];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_001 = 0;
        double vj_kl_002 = 0;
        double vj_kl_010 = 0;
        double vj_kl_011 = 0;
        double vj_kl_020 = 0;
        double vj_kl_100 = 0;
        double vj_kl_101 = 0;
        double vj_kl_110 = 0;
        double vj_kl_200 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+8*TILE2] + trr_32z * dm_ij_cache[sh_ij+9*TILE2] + trr_42z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+12*TILE2] + trr_22z * dm_ij_cache[sh_ij+13*TILE2] + trr_32z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+15*TILE2] + trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+23*TILE2] + trr_32z * dm_ij_cache[sh_ij+24*TILE2] + trr_42z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+27*TILE2] + trr_22z * dm_ij_cache[sh_ij+28*TILE2] + trr_32z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+30*TILE2] + trr_12z * dm_ij_cache[sh_ij+31*TILE2] + trr_22z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+33*TILE2] + trr_12z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+37*TILE2] + trr_22z * dm_ij_cache[sh_ij+38*TILE2] + trr_32z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+40*TILE2] + trr_12z * dm_ij_cache[sh_ij+41*TILE2] + trr_22z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2] + trr_22z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+49*TILE2] + trr_12z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+52*TILE2] + trr_12z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_502 = 1 * dot_lij_z_502;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401 + trr_50x * dot_lij_y_501;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410 + trr_50x * dot_lij_y_510;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400 + trr_51x * dot_lij_y_500;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001 + trr_02z * dm_kl_002;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001 + trr_12z * dm_kl_002;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001 + trr_22z * dm_kl_002;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001 + trr_32z * dm_kl_002;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001 + trr_42z * dm_kl_002;
                    double dot_lkl_z_005 = trr_51z * dm_kl_001 + trr_52z * dm_kl_002;
                    double dot_lkl_z_010 = wt * dm_kl_010 + trr_01z * dm_kl_011;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010 + trr_11z * dm_kl_011;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010 + trr_21z * dm_kl_011;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010 + trr_31z * dm_kl_011;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010 + trr_41z * dm_kl_011;
                    double dot_lkl_z_015 = trr_50z * dm_kl_010 + trr_51z * dm_kl_011;
                    double dot_lkl_z_020 = wt * dm_kl_020;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020;
                    double dot_lkl_z_100 = wt * dm_kl_100 + trr_01z * dm_kl_101;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100 + trr_11z * dm_kl_101;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100 + trr_21z * dm_kl_101;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100 + trr_31z * dm_kl_101;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100 + trr_41z * dm_kl_101;
                    double dot_lkl_z_105 = trr_50z * dm_kl_100 + trr_51z * dm_kl_101;
                    double dot_lkl_z_110 = wt * dm_kl_110;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110;
                    double dot_lkl_z_200 = wt * dm_kl_200;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_010);
        atomicAdd(vj2+kl_pair0+4, vj_kl_011);
        atomicAdd(vj2+kl_pair0+5, vj_kl_020);
        atomicAdd(vj2+kl_pair0+6, vj_kl_100);
        atomicAdd(vj2+kl_pair0+7, vj_kl_101);
        atomicAdd(vj2+kl_pair0+8, vj_kl_110);
        atomicAdd(vj2+kl_pair0+9, vj_kl_200);
    }
}
__global__
void rys_j_5_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+6];
        double dm_kl_020 = dm2[kl_pair0+7];
        double dm_kl_021 = dm2[kl_pair0+8];
        double dm_kl_030 = dm2[kl_pair0+9];
        double dm_kl_101 = dm2[kl_pair0+11];
        double dm_kl_102 = dm2[kl_pair0+12];
        double dm_kl_110 = dm2[kl_pair0+13];
        double dm_kl_111 = dm2[kl_pair0+14];
        double dm_kl_120 = dm2[kl_pair0+15];
        double dm_kl_200 = dm2[kl_pair0+16];
        double dm_kl_201 = dm2[kl_pair0+17];
        double dm_kl_210 = dm2[kl_pair0+18];
        double dm_kl_300 = dm2[kl_pair0+19];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_030 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_120 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_210 = 0;
        double vj_kl_300 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+8*TILE2] + trr_32z * dm_ij_cache[sh_ij+9*TILE2] + trr_42z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+8*TILE2] + trr_33z * dm_ij_cache[sh_ij+9*TILE2] + trr_43z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+12*TILE2] + trr_22z * dm_ij_cache[sh_ij+13*TILE2] + trr_32z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+12*TILE2] + trr_23z * dm_ij_cache[sh_ij+13*TILE2] + trr_33z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+15*TILE2] + trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+15*TILE2] + trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+23*TILE2] + trr_32z * dm_ij_cache[sh_ij+24*TILE2] + trr_42z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+23*TILE2] + trr_33z * dm_ij_cache[sh_ij+24*TILE2] + trr_43z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+27*TILE2] + trr_22z * dm_ij_cache[sh_ij+28*TILE2] + trr_32z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+27*TILE2] + trr_23z * dm_ij_cache[sh_ij+28*TILE2] + trr_33z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+30*TILE2] + trr_12z * dm_ij_cache[sh_ij+31*TILE2] + trr_22z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+30*TILE2] + trr_13z * dm_ij_cache[sh_ij+31*TILE2] + trr_23z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+33*TILE2] + trr_12z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+33*TILE2] + trr_13z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+37*TILE2] + trr_22z * dm_ij_cache[sh_ij+38*TILE2] + trr_32z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+37*TILE2] + trr_23z * dm_ij_cache[sh_ij+38*TILE2] + trr_33z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+40*TILE2] + trr_12z * dm_ij_cache[sh_ij+41*TILE2] + trr_22z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+40*TILE2] + trr_13z * dm_ij_cache[sh_ij+41*TILE2] + trr_23z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2] + trr_22z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2] + trr_23z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+49*TILE2] + trr_12z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+49*TILE2] + trr_13z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+52*TILE2] + trr_12z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+52*TILE2] + trr_13z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_502 = 1 * dot_lij_z_502;
                    double dot_lij_y_503 = 1 * dot_lij_z_503;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003;
                    double dot_lkl_z_005 = trr_52z * dm_kl_002 + trr_53z * dm_kl_003;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012;
                    double dot_lkl_z_015 = trr_51z * dm_kl_011 + trr_52z * dm_kl_012;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020 + trr_51z * dm_kl_021;
                    double dot_lkl_z_030 = wt * dm_kl_030;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102;
                    double dot_lkl_z_105 = trr_51z * dm_kl_101 + trr_52z * dm_kl_102;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110 + trr_51z * dm_kl_111;
                    double dot_lkl_z_120 = wt * dm_kl_120;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200 + trr_51z * dm_kl_201;
                    double dot_lkl_z_210 = wt * dm_kl_210;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210;
                    double dot_lkl_z_300 = wt * dm_kl_300;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+5, vj_kl_011);
        atomicAdd(vj2+kl_pair0+6, vj_kl_012);
        atomicAdd(vj2+kl_pair0+7, vj_kl_020);
        atomicAdd(vj2+kl_pair0+8, vj_kl_021);
        atomicAdd(vj2+kl_pair0+9, vj_kl_030);
        atomicAdd(vj2+kl_pair0+11, vj_kl_101);
        atomicAdd(vj2+kl_pair0+12, vj_kl_102);
        atomicAdd(vj2+kl_pair0+13, vj_kl_110);
        atomicAdd(vj2+kl_pair0+14, vj_kl_111);
        atomicAdd(vj2+kl_pair0+15, vj_kl_120);
        atomicAdd(vj2+kl_pair0+16, vj_kl_200);
        atomicAdd(vj2+kl_pair0+17, vj_kl_201);
        atomicAdd(vj2+kl_pair0+18, vj_kl_210);
        atomicAdd(vj2+kl_pair0+19, vj_kl_300);
    }
}
__global__
void rys_j_5_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+8*TILE2] + trr_32z * dm_ij_cache[sh_ij+9*TILE2] + trr_42z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+8*TILE2] + trr_33z * dm_ij_cache[sh_ij+9*TILE2] + trr_43z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+8*TILE2] + trr_34z * dm_ij_cache[sh_ij+9*TILE2] + trr_44z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+12*TILE2] + trr_22z * dm_ij_cache[sh_ij+13*TILE2] + trr_32z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+12*TILE2] + trr_23z * dm_ij_cache[sh_ij+13*TILE2] + trr_33z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+12*TILE2] + trr_24z * dm_ij_cache[sh_ij+13*TILE2] + trr_34z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+15*TILE2] + trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+15*TILE2] + trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+15*TILE2] + trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+23*TILE2] + trr_32z * dm_ij_cache[sh_ij+24*TILE2] + trr_42z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+23*TILE2] + trr_33z * dm_ij_cache[sh_ij+24*TILE2] + trr_43z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+23*TILE2] + trr_34z * dm_ij_cache[sh_ij+24*TILE2] + trr_44z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+27*TILE2] + trr_22z * dm_ij_cache[sh_ij+28*TILE2] + trr_32z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+27*TILE2] + trr_23z * dm_ij_cache[sh_ij+28*TILE2] + trr_33z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+27*TILE2] + trr_24z * dm_ij_cache[sh_ij+28*TILE2] + trr_34z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+30*TILE2] + trr_12z * dm_ij_cache[sh_ij+31*TILE2] + trr_22z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+30*TILE2] + trr_13z * dm_ij_cache[sh_ij+31*TILE2] + trr_23z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+30*TILE2] + trr_14z * dm_ij_cache[sh_ij+31*TILE2] + trr_24z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+33*TILE2] + trr_12z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+33*TILE2] + trr_13z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+33*TILE2] + trr_14z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+37*TILE2] + trr_22z * dm_ij_cache[sh_ij+38*TILE2] + trr_32z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+37*TILE2] + trr_23z * dm_ij_cache[sh_ij+38*TILE2] + trr_33z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+37*TILE2] + trr_24z * dm_ij_cache[sh_ij+38*TILE2] + trr_34z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+40*TILE2] + trr_12z * dm_ij_cache[sh_ij+41*TILE2] + trr_22z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+40*TILE2] + trr_13z * dm_ij_cache[sh_ij+41*TILE2] + trr_23z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+40*TILE2] + trr_14z * dm_ij_cache[sh_ij+41*TILE2] + trr_24z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2] + trr_22z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2] + trr_23z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2] + trr_24z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+49*TILE2] + trr_12z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+49*TILE2] + trr_13z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+49*TILE2] + trr_14z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+52*TILE2] + trr_12z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+52*TILE2] + trr_13z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+52*TILE2] + trr_14z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_502 = 1 * dot_lij_z_502;
                    double dot_lij_y_503 = 1 * dot_lij_z_503;
                    double dot_lij_y_504 = 1 * dot_lij_z_504;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003 + trr_24z * dm_kl_004;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003 + trr_34z * dm_kl_004;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003 + trr_44z * dm_kl_004;
                    double dot_lkl_z_005 = trr_52z * dm_kl_002 + trr_53z * dm_kl_003 + trr_54z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012 + trr_23z * dm_kl_013;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012 + trr_33z * dm_kl_013;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012 + trr_43z * dm_kl_013;
                    double dot_lkl_z_015 = trr_51z * dm_kl_011 + trr_52z * dm_kl_012 + trr_53z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021 + trr_22z * dm_kl_022;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021 + trr_32z * dm_kl_022;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021 + trr_42z * dm_kl_022;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020 + trr_51z * dm_kl_021 + trr_52z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102 + trr_23z * dm_kl_103;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102 + trr_33z * dm_kl_103;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102 + trr_43z * dm_kl_103;
                    double dot_lkl_z_105 = trr_51z * dm_kl_101 + trr_52z * dm_kl_102 + trr_53z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111 + trr_22z * dm_kl_112;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111 + trr_32z * dm_kl_112;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111 + trr_42z * dm_kl_112;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110 + trr_51z * dm_kl_111 + trr_52z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201 + trr_22z * dm_kl_202;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201 + trr_32z * dm_kl_202;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201 + trr_42z * dm_kl_202;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200 + trr_51z * dm_kl_201 + trr_52z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_5_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(6, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(6, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 6; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 6; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double trr_55z = cpz * trr_54z + 4*b01 * trr_53z + 5*b00 * trr_44z;
                    double dot_lij_z_005 = trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2] + trr_55z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+8*TILE2] + trr_32z * dm_ij_cache[sh_ij+9*TILE2] + trr_42z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+8*TILE2] + trr_33z * dm_ij_cache[sh_ij+9*TILE2] + trr_43z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+8*TILE2] + trr_34z * dm_ij_cache[sh_ij+9*TILE2] + trr_44z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double dot_lij_z_015 = trr_25z * dm_ij_cache[sh_ij+8*TILE2] + trr_35z * dm_ij_cache[sh_ij+9*TILE2] + trr_45z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+12*TILE2] + trr_22z * dm_ij_cache[sh_ij+13*TILE2] + trr_32z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+12*TILE2] + trr_23z * dm_ij_cache[sh_ij+13*TILE2] + trr_33z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+12*TILE2] + trr_24z * dm_ij_cache[sh_ij+13*TILE2] + trr_34z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_025 = trr_15z * dm_ij_cache[sh_ij+12*TILE2] + trr_25z * dm_ij_cache[sh_ij+13*TILE2] + trr_35z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+15*TILE2] + trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+15*TILE2] + trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+15*TILE2] + trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+15*TILE2] + trr_15z * dm_ij_cache[sh_ij+16*TILE2] + trr_25z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+18*TILE2] + trr_15z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_055 = trr_05z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+23*TILE2] + trr_32z * dm_ij_cache[sh_ij+24*TILE2] + trr_42z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+23*TILE2] + trr_33z * dm_ij_cache[sh_ij+24*TILE2] + trr_43z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+23*TILE2] + trr_34z * dm_ij_cache[sh_ij+24*TILE2] + trr_44z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_105 = trr_25z * dm_ij_cache[sh_ij+23*TILE2] + trr_35z * dm_ij_cache[sh_ij+24*TILE2] + trr_45z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+27*TILE2] + trr_22z * dm_ij_cache[sh_ij+28*TILE2] + trr_32z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+27*TILE2] + trr_23z * dm_ij_cache[sh_ij+28*TILE2] + trr_33z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+27*TILE2] + trr_24z * dm_ij_cache[sh_ij+28*TILE2] + trr_34z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_115 = trr_15z * dm_ij_cache[sh_ij+27*TILE2] + trr_25z * dm_ij_cache[sh_ij+28*TILE2] + trr_35z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+30*TILE2] + trr_12z * dm_ij_cache[sh_ij+31*TILE2] + trr_22z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+30*TILE2] + trr_13z * dm_ij_cache[sh_ij+31*TILE2] + trr_23z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+30*TILE2] + trr_14z * dm_ij_cache[sh_ij+31*TILE2] + trr_24z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+30*TILE2] + trr_15z * dm_ij_cache[sh_ij+31*TILE2] + trr_25z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+33*TILE2] + trr_12z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+33*TILE2] + trr_13z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+33*TILE2] + trr_14z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+33*TILE2] + trr_15z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_145 = trr_05z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+37*TILE2] + trr_22z * dm_ij_cache[sh_ij+38*TILE2] + trr_32z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+37*TILE2] + trr_23z * dm_ij_cache[sh_ij+38*TILE2] + trr_33z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+37*TILE2] + trr_24z * dm_ij_cache[sh_ij+38*TILE2] + trr_34z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_205 = trr_15z * dm_ij_cache[sh_ij+37*TILE2] + trr_25z * dm_ij_cache[sh_ij+38*TILE2] + trr_35z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+40*TILE2] + trr_12z * dm_ij_cache[sh_ij+41*TILE2] + trr_22z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+40*TILE2] + trr_13z * dm_ij_cache[sh_ij+41*TILE2] + trr_23z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+40*TILE2] + trr_14z * dm_ij_cache[sh_ij+41*TILE2] + trr_24z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+40*TILE2] + trr_15z * dm_ij_cache[sh_ij+41*TILE2] + trr_25z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+43*TILE2] + trr_15z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_235 = trr_05z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2] + trr_22z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2] + trr_23z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2] + trr_24z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+46*TILE2] + trr_15z * dm_ij_cache[sh_ij+47*TILE2] + trr_25z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+49*TILE2] + trr_12z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+49*TILE2] + trr_13z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+49*TILE2] + trr_14z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+49*TILE2] + trr_15z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_325 = trr_05z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+52*TILE2] + trr_12z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+52*TILE2] + trr_13z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+52*TILE2] + trr_14z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+52*TILE2] + trr_15z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_415 = trr_05z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_505 = trr_05z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045 + trr_50y * dot_lij_z_055;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044 + trr_51y * dot_lij_z_054;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043 + trr_52y * dot_lij_z_053;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042 + trr_53y * dot_lij_z_052;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041 + trr_54y * dot_lij_z_051;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double trr_55y = cpy * trr_54y + 4*b01 * trr_53y + 5*b00 * trr_44y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040 + trr_55y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135 + trr_40y * dot_lij_z_145;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134 + trr_41y * dot_lij_z_144;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133 + trr_42y * dot_lij_z_143;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132 + trr_43y * dot_lij_z_142;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131 + trr_44y * dot_lij_z_141;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130 + trr_45y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225 + trr_30y * dot_lij_z_235;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224 + trr_31y * dot_lij_z_234;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223 + trr_32y * dot_lij_z_233;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222 + trr_33y * dot_lij_z_232;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221 + trr_34y * dot_lij_z_231;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220 + trr_35y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315 + trr_20y * dot_lij_z_325;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314 + trr_21y * dot_lij_z_324;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313 + trr_22y * dot_lij_z_323;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312 + trr_23y * dot_lij_z_322;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311 + trr_24y * dot_lij_z_321;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310 + trr_25y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414;
                    double dot_lij_y_405 = 1 * dot_lij_z_405 + trr_10y * dot_lij_z_415;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404 + trr_11y * dot_lij_z_414;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403 + trr_12y * dot_lij_z_413;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402 + trr_13y * dot_lij_z_412;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401 + trr_14y * dot_lij_z_411;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400 + trr_15y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_502 = 1 * dot_lij_z_502;
                    double dot_lij_y_503 = 1 * dot_lij_z_503;
                    double dot_lij_y_504 = 1 * dot_lij_z_504;
                    double dot_lij_y_505 = 1 * dot_lij_z_505;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503;
                    double dot_lij_y_514 = trr_01y * dot_lij_z_504;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502;
                    double dot_lij_y_523 = trr_02y * dot_lij_z_503;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501;
                    double dot_lij_y_532 = trr_03y * dot_lij_z_502;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500;
                    double dot_lij_y_541 = trr_04y * dot_lij_z_501;
                    double dot_lij_y_550 = trr_05y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405 + trr_50x * dot_lij_y_505;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414 + trr_50x * dot_lij_y_514;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423 + trr_50x * dot_lij_y_523;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432 + trr_50x * dot_lij_y_532;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441 + trr_50x * dot_lij_y_541;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450 + trr_50x * dot_lij_y_550;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404 + trr_51x * dot_lij_y_504;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413 + trr_51x * dot_lij_y_513;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422 + trr_51x * dot_lij_y_522;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431 + trr_51x * dot_lij_y_531;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440 + trr_51x * dot_lij_y_540;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403 + trr_52x * dot_lij_y_503;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412 + trr_52x * dot_lij_y_512;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421 + trr_52x * dot_lij_y_521;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430 + trr_52x * dot_lij_y_530;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402 + trr_53x * dot_lij_y_502;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411 + trr_53x * dot_lij_y_511;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420 + trr_53x * dot_lij_y_520;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401 + trr_54x * dot_lij_y_501;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410 + trr_54x * dot_lij_y_510;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    double trr_55x = cpx * trr_54x + 4*b01 * trr_53x + 5*b00 * trr_44x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400 + trr_55x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005;
                    double dot_lkl_z_005 = trr_53z * dm_kl_003 + trr_54z * dm_kl_004 + trr_55z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014;
                    double dot_lkl_z_015 = trr_52z * dm_kl_012 + trr_53z * dm_kl_013 + trr_54z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023;
                    double dot_lkl_z_025 = trr_51z * dm_kl_021 + trr_52z * dm_kl_022 + trr_53z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031 + trr_52z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040 + trr_51z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050;
                    double dot_lkl_z_055 = trr_50z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104;
                    double dot_lkl_z_105 = trr_52z * dm_kl_102 + trr_53z * dm_kl_103 + trr_54z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113;
                    double dot_lkl_z_115 = trr_51z * dm_kl_111 + trr_52z * dm_kl_112 + trr_53z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121 + trr_52z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130 + trr_51z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140;
                    double dot_lkl_z_145 = trr_50z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203;
                    double dot_lkl_z_205 = trr_51z * dm_kl_201 + trr_52z * dm_kl_202 + trr_53z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211 + trr_52z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220 + trr_51z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230;
                    double dot_lkl_z_235 = trr_50z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301 + trr_52z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310 + trr_51z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320;
                    double dot_lkl_z_325 = trr_50z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400 + trr_51z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410;
                    double dot_lkl_z_415 = trr_50z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500;
                    double dot_lkl_z_505 = trr_50z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045 + trr_05y * dot_lkl_z_055;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044 + trr_15y * dot_lkl_z_054;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043 + trr_25y * dot_lkl_z_053;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042 + trr_35y * dot_lkl_z_052;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041 + trr_45y * dot_lkl_z_051;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040 + trr_55y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135 + trr_04y * dot_lkl_z_145;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134 + trr_14y * dot_lkl_z_144;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133 + trr_24y * dot_lkl_z_143;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132 + trr_34y * dot_lkl_z_142;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131 + trr_44y * dot_lkl_z_141;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130 + trr_54y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225 + trr_03y * dot_lkl_z_235;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224 + trr_13y * dot_lkl_z_234;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223 + trr_23y * dot_lkl_z_233;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222 + trr_33y * dot_lkl_z_232;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221 + trr_43y * dot_lkl_z_231;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220 + trr_53y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315 + trr_02y * dot_lkl_z_325;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314 + trr_12y * dot_lkl_z_324;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313 + trr_22y * dot_lkl_z_323;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312 + trr_32y * dot_lkl_z_322;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311 + trr_42y * dot_lkl_z_321;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310 + trr_52y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405 + trr_01y * dot_lkl_z_415;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404 + trr_11y * dot_lkl_z_414;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403 + trr_21y * dot_lkl_z_413;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402 + trr_31y * dot_lkl_z_412;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401 + trr_41y * dot_lkl_z_411;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400 + trr_51y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504;
                    double dot_lkl_y_505 = 1 * dot_lkl_z_505;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503;
                    double dot_lkl_y_514 = trr_10y * dot_lkl_z_504;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502;
                    double dot_lkl_y_523 = trr_20y * dot_lkl_z_503;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501;
                    double dot_lkl_y_532 = trr_30y * dot_lkl_z_502;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500;
                    double dot_lkl_y_541 = trr_40y * dot_lkl_z_501;
                    double dot_lkl_y_550 = trr_50y * dot_lkl_z_500;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405 + trr_05x * dot_lkl_y_505;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414 + trr_05x * dot_lkl_y_514;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423 + trr_05x * dot_lkl_y_523;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432 + trr_05x * dot_lkl_y_532;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441 + trr_05x * dot_lkl_y_541;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450 + trr_05x * dot_lkl_y_550;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404 + trr_15x * dot_lkl_y_504;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413 + trr_15x * dot_lkl_y_513;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422 + trr_15x * dot_lkl_y_522;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431 + trr_15x * dot_lkl_y_531;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440 + trr_15x * dot_lkl_y_540;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403 + trr_25x * dot_lkl_y_503;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412 + trr_25x * dot_lkl_y_512;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421 + trr_25x * dot_lkl_y_521;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430 + trr_25x * dot_lkl_y_530;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402 + trr_35x * dot_lkl_y_502;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411 + trr_35x * dot_lkl_y_511;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420 + trr_35x * dot_lkl_y_520;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401 + trr_45x * dot_lkl_y_501;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410 + trr_45x * dot_lkl_y_510;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400 + trr_55x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_5_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_5_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 56*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 56*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_050 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_140 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_230 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_320 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_410 = 0;
        double vj_ij_500 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(6, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(6, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 6; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 6; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double trr_55z = cpz * trr_54z + 4*b01 * trr_53z + 5*b00 * trr_44z;
                    double dot_lij_z_005 = trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2] + trr_55z * dm_ij_cache[sh_ij+5*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_36z = cpz * trr_35z + 5*b01 * trr_34z + 3*b00 * trr_25z;
                    double trr_46z = cpz * trr_45z + 5*b01 * trr_44z + 4*b00 * trr_35z;
                    double trr_56z = cpz * trr_55z + 5*b01 * trr_54z + 5*b00 * trr_45z;
                    double dot_lij_z_006 = trr_36z * dm_ij_cache[sh_ij+3*TILE2] + trr_46z * dm_ij_cache[sh_ij+4*TILE2] + trr_56z * dm_ij_cache[sh_ij+5*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+8*TILE2] + trr_30z * dm_ij_cache[sh_ij+9*TILE2] + trr_40z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+8*TILE2] + trr_31z * dm_ij_cache[sh_ij+9*TILE2] + trr_41z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+8*TILE2] + trr_32z * dm_ij_cache[sh_ij+9*TILE2] + trr_42z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+8*TILE2] + trr_33z * dm_ij_cache[sh_ij+9*TILE2] + trr_43z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+8*TILE2] + trr_34z * dm_ij_cache[sh_ij+9*TILE2] + trr_44z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_015 = trr_25z * dm_ij_cache[sh_ij+8*TILE2] + trr_35z * dm_ij_cache[sh_ij+9*TILE2] + trr_45z * dm_ij_cache[sh_ij+10*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_26z = cpz * trr_25z + 5*b01 * trr_24z + 2*b00 * trr_15z;
                    double dot_lij_z_016 = trr_26z * dm_ij_cache[sh_ij+8*TILE2] + trr_36z * dm_ij_cache[sh_ij+9*TILE2] + trr_46z * dm_ij_cache[sh_ij+10*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+12*TILE2] + trr_20z * dm_ij_cache[sh_ij+13*TILE2] + trr_30z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+12*TILE2] + trr_21z * dm_ij_cache[sh_ij+13*TILE2] + trr_31z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+12*TILE2] + trr_22z * dm_ij_cache[sh_ij+13*TILE2] + trr_32z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+12*TILE2] + trr_23z * dm_ij_cache[sh_ij+13*TILE2] + trr_33z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+12*TILE2] + trr_24z * dm_ij_cache[sh_ij+13*TILE2] + trr_34z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_025 = trr_15z * dm_ij_cache[sh_ij+12*TILE2] + trr_25z * dm_ij_cache[sh_ij+13*TILE2] + trr_35z * dm_ij_cache[sh_ij+14*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double dot_lij_z_026 = trr_16z * dm_ij_cache[sh_ij+12*TILE2] + trr_26z * dm_ij_cache[sh_ij+13*TILE2] + trr_36z * dm_ij_cache[sh_ij+14*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+15*TILE2] + trr_10z * dm_ij_cache[sh_ij+16*TILE2] + trr_20z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+15*TILE2] + trr_11z * dm_ij_cache[sh_ij+16*TILE2] + trr_21z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+15*TILE2] + trr_12z * dm_ij_cache[sh_ij+16*TILE2] + trr_22z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+15*TILE2] + trr_13z * dm_ij_cache[sh_ij+16*TILE2] + trr_23z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+15*TILE2] + trr_14z * dm_ij_cache[sh_ij+16*TILE2] + trr_24z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+15*TILE2] + trr_15z * dm_ij_cache[sh_ij+16*TILE2] + trr_25z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_036 = trr_06z * dm_ij_cache[sh_ij+15*TILE2] + trr_16z * dm_ij_cache[sh_ij+16*TILE2] + trr_26z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+18*TILE2] + trr_15z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_046 = trr_06z * dm_ij_cache[sh_ij+18*TILE2] + trr_16z * dm_ij_cache[sh_ij+19*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_055 = trr_05z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_056 = trr_06z * dm_ij_cache[sh_ij+20*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+23*TILE2] + trr_30z * dm_ij_cache[sh_ij+24*TILE2] + trr_40z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+23*TILE2] + trr_31z * dm_ij_cache[sh_ij+24*TILE2] + trr_41z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+23*TILE2] + trr_32z * dm_ij_cache[sh_ij+24*TILE2] + trr_42z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+23*TILE2] + trr_33z * dm_ij_cache[sh_ij+24*TILE2] + trr_43z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+23*TILE2] + trr_34z * dm_ij_cache[sh_ij+24*TILE2] + trr_44z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_105 = trr_25z * dm_ij_cache[sh_ij+23*TILE2] + trr_35z * dm_ij_cache[sh_ij+24*TILE2] + trr_45z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_106 = trr_26z * dm_ij_cache[sh_ij+23*TILE2] + trr_36z * dm_ij_cache[sh_ij+24*TILE2] + trr_46z * dm_ij_cache[sh_ij+25*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+27*TILE2] + trr_20z * dm_ij_cache[sh_ij+28*TILE2] + trr_30z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+27*TILE2] + trr_21z * dm_ij_cache[sh_ij+28*TILE2] + trr_31z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+27*TILE2] + trr_22z * dm_ij_cache[sh_ij+28*TILE2] + trr_32z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+27*TILE2] + trr_23z * dm_ij_cache[sh_ij+28*TILE2] + trr_33z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+27*TILE2] + trr_24z * dm_ij_cache[sh_ij+28*TILE2] + trr_34z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_115 = trr_15z * dm_ij_cache[sh_ij+27*TILE2] + trr_25z * dm_ij_cache[sh_ij+28*TILE2] + trr_35z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_116 = trr_16z * dm_ij_cache[sh_ij+27*TILE2] + trr_26z * dm_ij_cache[sh_ij+28*TILE2] + trr_36z * dm_ij_cache[sh_ij+29*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+30*TILE2] + trr_10z * dm_ij_cache[sh_ij+31*TILE2] + trr_20z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+30*TILE2] + trr_11z * dm_ij_cache[sh_ij+31*TILE2] + trr_21z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+30*TILE2] + trr_12z * dm_ij_cache[sh_ij+31*TILE2] + trr_22z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+30*TILE2] + trr_13z * dm_ij_cache[sh_ij+31*TILE2] + trr_23z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+30*TILE2] + trr_14z * dm_ij_cache[sh_ij+31*TILE2] + trr_24z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+30*TILE2] + trr_15z * dm_ij_cache[sh_ij+31*TILE2] + trr_25z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_126 = trr_06z * dm_ij_cache[sh_ij+30*TILE2] + trr_16z * dm_ij_cache[sh_ij+31*TILE2] + trr_26z * dm_ij_cache[sh_ij+32*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+33*TILE2] + trr_10z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+33*TILE2] + trr_11z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+33*TILE2] + trr_12z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+33*TILE2] + trr_13z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+33*TILE2] + trr_14z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+33*TILE2] + trr_15z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_136 = trr_06z * dm_ij_cache[sh_ij+33*TILE2] + trr_16z * dm_ij_cache[sh_ij+34*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_145 = trr_05z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_146 = trr_06z * dm_ij_cache[sh_ij+35*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+37*TILE2] + trr_20z * dm_ij_cache[sh_ij+38*TILE2] + trr_30z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+37*TILE2] + trr_21z * dm_ij_cache[sh_ij+38*TILE2] + trr_31z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+37*TILE2] + trr_22z * dm_ij_cache[sh_ij+38*TILE2] + trr_32z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+37*TILE2] + trr_23z * dm_ij_cache[sh_ij+38*TILE2] + trr_33z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+37*TILE2] + trr_24z * dm_ij_cache[sh_ij+38*TILE2] + trr_34z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_205 = trr_15z * dm_ij_cache[sh_ij+37*TILE2] + trr_25z * dm_ij_cache[sh_ij+38*TILE2] + trr_35z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_206 = trr_16z * dm_ij_cache[sh_ij+37*TILE2] + trr_26z * dm_ij_cache[sh_ij+38*TILE2] + trr_36z * dm_ij_cache[sh_ij+39*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+40*TILE2] + trr_10z * dm_ij_cache[sh_ij+41*TILE2] + trr_20z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+40*TILE2] + trr_11z * dm_ij_cache[sh_ij+41*TILE2] + trr_21z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+40*TILE2] + trr_12z * dm_ij_cache[sh_ij+41*TILE2] + trr_22z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+40*TILE2] + trr_13z * dm_ij_cache[sh_ij+41*TILE2] + trr_23z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+40*TILE2] + trr_14z * dm_ij_cache[sh_ij+41*TILE2] + trr_24z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+40*TILE2] + trr_15z * dm_ij_cache[sh_ij+41*TILE2] + trr_25z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_216 = trr_06z * dm_ij_cache[sh_ij+40*TILE2] + trr_16z * dm_ij_cache[sh_ij+41*TILE2] + trr_26z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+43*TILE2] + trr_15z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_226 = trr_06z * dm_ij_cache[sh_ij+43*TILE2] + trr_16z * dm_ij_cache[sh_ij+44*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_235 = trr_05z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_236 = trr_06z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2] + trr_20z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2] + trr_21z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2] + trr_22z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2] + trr_23z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2] + trr_24z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+46*TILE2] + trr_15z * dm_ij_cache[sh_ij+47*TILE2] + trr_25z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_306 = trr_06z * dm_ij_cache[sh_ij+46*TILE2] + trr_16z * dm_ij_cache[sh_ij+47*TILE2] + trr_26z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+49*TILE2] + trr_10z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+49*TILE2] + trr_11z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+49*TILE2] + trr_12z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+49*TILE2] + trr_13z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+49*TILE2] + trr_14z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+49*TILE2] + trr_15z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_316 = trr_06z * dm_ij_cache[sh_ij+49*TILE2] + trr_16z * dm_ij_cache[sh_ij+50*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_325 = trr_05z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_326 = trr_06z * dm_ij_cache[sh_ij+51*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+52*TILE2] + trr_10z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+52*TILE2] + trr_11z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+52*TILE2] + trr_12z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+52*TILE2] + trr_13z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+52*TILE2] + trr_14z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+52*TILE2] + trr_15z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_406 = trr_06z * dm_ij_cache[sh_ij+52*TILE2] + trr_16z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_415 = trr_05z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_416 = trr_06z * dm_ij_cache[sh_ij+54*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_505 = trr_05z * dm_ij_cache[sh_ij+55*TILE2];
                    double dot_lij_z_506 = trr_06z * dm_ij_cache[sh_ij+55*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045 + trr_50y * dot_lij_z_055;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016 + trr_20y * dot_lij_z_026 + trr_30y * dot_lij_z_036 + trr_40y * dot_lij_z_046 + trr_50y * dot_lij_z_056;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044 + trr_51y * dot_lij_z_054;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015 + trr_21y * dot_lij_z_025 + trr_31y * dot_lij_z_035 + trr_41y * dot_lij_z_045 + trr_51y * dot_lij_z_055;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043 + trr_52y * dot_lij_z_053;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014 + trr_22y * dot_lij_z_024 + trr_32y * dot_lij_z_034 + trr_42y * dot_lij_z_044 + trr_52y * dot_lij_z_054;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042 + trr_53y * dot_lij_z_052;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013 + trr_23y * dot_lij_z_023 + trr_33y * dot_lij_z_033 + trr_43y * dot_lij_z_043 + trr_53y * dot_lij_z_053;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041 + trr_54y * dot_lij_z_051;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012 + trr_24y * dot_lij_z_022 + trr_34y * dot_lij_z_032 + trr_44y * dot_lij_z_042 + trr_54y * dot_lij_z_052;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double trr_55y = cpy * trr_54y + 4*b01 * trr_53y + 5*b00 * trr_44y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040 + trr_55y * dot_lij_z_050;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011 + trr_25y * dot_lij_z_021 + trr_35y * dot_lij_z_031 + trr_45y * dot_lij_z_041 + trr_55y * dot_lij_z_051;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double trr_26y = cpy * trr_25y + 5*b01 * trr_24y + 2*b00 * trr_15y;
                    double trr_36y = cpy * trr_35y + 5*b01 * trr_34y + 3*b00 * trr_25y;
                    double trr_46y = cpy * trr_45y + 5*b01 * trr_44y + 4*b00 * trr_35y;
                    double trr_56y = cpy * trr_55y + 5*b01 * trr_54y + 5*b00 * trr_45y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010 + trr_26y * dot_lij_z_020 + trr_36y * dot_lij_z_030 + trr_46y * dot_lij_z_040 + trr_56y * dot_lij_z_050;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135 + trr_40y * dot_lij_z_145;
                    double dot_lij_y_106 = 1 * dot_lij_z_106 + trr_10y * dot_lij_z_116 + trr_20y * dot_lij_z_126 + trr_30y * dot_lij_z_136 + trr_40y * dot_lij_z_146;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134 + trr_41y * dot_lij_z_144;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105 + trr_11y * dot_lij_z_115 + trr_21y * dot_lij_z_125 + trr_31y * dot_lij_z_135 + trr_41y * dot_lij_z_145;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133 + trr_42y * dot_lij_z_143;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104 + trr_12y * dot_lij_z_114 + trr_22y * dot_lij_z_124 + trr_32y * dot_lij_z_134 + trr_42y * dot_lij_z_144;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132 + trr_43y * dot_lij_z_142;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103 + trr_13y * dot_lij_z_113 + trr_23y * dot_lij_z_123 + trr_33y * dot_lij_z_133 + trr_43y * dot_lij_z_143;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131 + trr_44y * dot_lij_z_141;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102 + trr_14y * dot_lij_z_112 + trr_24y * dot_lij_z_122 + trr_34y * dot_lij_z_132 + trr_44y * dot_lij_z_142;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130 + trr_45y * dot_lij_z_140;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101 + trr_15y * dot_lij_z_111 + trr_25y * dot_lij_z_121 + trr_35y * dot_lij_z_131 + trr_45y * dot_lij_z_141;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100 + trr_16y * dot_lij_z_110 + trr_26y * dot_lij_z_120 + trr_36y * dot_lij_z_130 + trr_46y * dot_lij_z_140;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225 + trr_30y * dot_lij_z_235;
                    double dot_lij_y_206 = 1 * dot_lij_z_206 + trr_10y * dot_lij_z_216 + trr_20y * dot_lij_z_226 + trr_30y * dot_lij_z_236;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224 + trr_31y * dot_lij_z_234;
                    double dot_lij_y_215 = trr_01y * dot_lij_z_205 + trr_11y * dot_lij_z_215 + trr_21y * dot_lij_z_225 + trr_31y * dot_lij_z_235;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223 + trr_32y * dot_lij_z_233;
                    double dot_lij_y_224 = trr_02y * dot_lij_z_204 + trr_12y * dot_lij_z_214 + trr_22y * dot_lij_z_224 + trr_32y * dot_lij_z_234;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222 + trr_33y * dot_lij_z_232;
                    double dot_lij_y_233 = trr_03y * dot_lij_z_203 + trr_13y * dot_lij_z_213 + trr_23y * dot_lij_z_223 + trr_33y * dot_lij_z_233;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221 + trr_34y * dot_lij_z_231;
                    double dot_lij_y_242 = trr_04y * dot_lij_z_202 + trr_14y * dot_lij_z_212 + trr_24y * dot_lij_z_222 + trr_34y * dot_lij_z_232;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220 + trr_35y * dot_lij_z_230;
                    double dot_lij_y_251 = trr_05y * dot_lij_z_201 + trr_15y * dot_lij_z_211 + trr_25y * dot_lij_z_221 + trr_35y * dot_lij_z_231;
                    double dot_lij_y_260 = trr_06y * dot_lij_z_200 + trr_16y * dot_lij_z_210 + trr_26y * dot_lij_z_220 + trr_36y * dot_lij_z_230;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315 + trr_20y * dot_lij_z_325;
                    double dot_lij_y_306 = 1 * dot_lij_z_306 + trr_10y * dot_lij_z_316 + trr_20y * dot_lij_z_326;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314 + trr_21y * dot_lij_z_324;
                    double dot_lij_y_315 = trr_01y * dot_lij_z_305 + trr_11y * dot_lij_z_315 + trr_21y * dot_lij_z_325;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313 + trr_22y * dot_lij_z_323;
                    double dot_lij_y_324 = trr_02y * dot_lij_z_304 + trr_12y * dot_lij_z_314 + trr_22y * dot_lij_z_324;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312 + trr_23y * dot_lij_z_322;
                    double dot_lij_y_333 = trr_03y * dot_lij_z_303 + trr_13y * dot_lij_z_313 + trr_23y * dot_lij_z_323;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311 + trr_24y * dot_lij_z_321;
                    double dot_lij_y_342 = trr_04y * dot_lij_z_302 + trr_14y * dot_lij_z_312 + trr_24y * dot_lij_z_322;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310 + trr_25y * dot_lij_z_320;
                    double dot_lij_y_351 = trr_05y * dot_lij_z_301 + trr_15y * dot_lij_z_311 + trr_25y * dot_lij_z_321;
                    double dot_lij_y_360 = trr_06y * dot_lij_z_300 + trr_16y * dot_lij_z_310 + trr_26y * dot_lij_z_320;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414;
                    double dot_lij_y_405 = 1 * dot_lij_z_405 + trr_10y * dot_lij_z_415;
                    double dot_lij_y_406 = 1 * dot_lij_z_406 + trr_10y * dot_lij_z_416;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404 + trr_11y * dot_lij_z_414;
                    double dot_lij_y_415 = trr_01y * dot_lij_z_405 + trr_11y * dot_lij_z_415;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403 + trr_12y * dot_lij_z_413;
                    double dot_lij_y_424 = trr_02y * dot_lij_z_404 + trr_12y * dot_lij_z_414;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402 + trr_13y * dot_lij_z_412;
                    double dot_lij_y_433 = trr_03y * dot_lij_z_403 + trr_13y * dot_lij_z_413;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401 + trr_14y * dot_lij_z_411;
                    double dot_lij_y_442 = trr_04y * dot_lij_z_402 + trr_14y * dot_lij_z_412;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400 + trr_15y * dot_lij_z_410;
                    double dot_lij_y_451 = trr_05y * dot_lij_z_401 + trr_15y * dot_lij_z_411;
                    double dot_lij_y_460 = trr_06y * dot_lij_z_400 + trr_16y * dot_lij_z_410;
                    double dot_lij_y_500 = 1 * dot_lij_z_500;
                    double dot_lij_y_501 = 1 * dot_lij_z_501;
                    double dot_lij_y_502 = 1 * dot_lij_z_502;
                    double dot_lij_y_503 = 1 * dot_lij_z_503;
                    double dot_lij_y_504 = 1 * dot_lij_z_504;
                    double dot_lij_y_505 = 1 * dot_lij_z_505;
                    double dot_lij_y_506 = 1 * dot_lij_z_506;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503;
                    double dot_lij_y_514 = trr_01y * dot_lij_z_504;
                    double dot_lij_y_515 = trr_01y * dot_lij_z_505;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502;
                    double dot_lij_y_523 = trr_02y * dot_lij_z_503;
                    double dot_lij_y_524 = trr_02y * dot_lij_z_504;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501;
                    double dot_lij_y_532 = trr_03y * dot_lij_z_502;
                    double dot_lij_y_533 = trr_03y * dot_lij_z_503;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500;
                    double dot_lij_y_541 = trr_04y * dot_lij_z_501;
                    double dot_lij_y_542 = trr_04y * dot_lij_z_502;
                    double dot_lij_y_550 = trr_05y * dot_lij_z_500;
                    double dot_lij_y_551 = trr_05y * dot_lij_z_501;
                    double dot_lij_y_560 = trr_06y * dot_lij_z_500;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405 + trr_50x * dot_lij_y_505;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106 + trr_20x * dot_lij_y_206 + trr_30x * dot_lij_y_306 + trr_40x * dot_lij_y_406 + trr_50x * dot_lij_y_506;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414 + trr_50x * dot_lij_y_514;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115 + trr_20x * dot_lij_y_215 + trr_30x * dot_lij_y_315 + trr_40x * dot_lij_y_415 + trr_50x * dot_lij_y_515;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423 + trr_50x * dot_lij_y_523;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124 + trr_20x * dot_lij_y_224 + trr_30x * dot_lij_y_324 + trr_40x * dot_lij_y_424 + trr_50x * dot_lij_y_524;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432 + trr_50x * dot_lij_y_532;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133 + trr_20x * dot_lij_y_233 + trr_30x * dot_lij_y_333 + trr_40x * dot_lij_y_433 + trr_50x * dot_lij_y_533;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441 + trr_50x * dot_lij_y_541;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142 + trr_20x * dot_lij_y_242 + trr_30x * dot_lij_y_342 + trr_40x * dot_lij_y_442 + trr_50x * dot_lij_y_542;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450 + trr_50x * dot_lij_y_550;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151 + trr_20x * dot_lij_y_251 + trr_30x * dot_lij_y_351 + trr_40x * dot_lij_y_451 + trr_50x * dot_lij_y_551;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160 + trr_20x * dot_lij_y_260 + trr_30x * dot_lij_y_360 + trr_40x * dot_lij_y_460 + trr_50x * dot_lij_y_560;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404 + trr_51x * dot_lij_y_504;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105 + trr_21x * dot_lij_y_205 + trr_31x * dot_lij_y_305 + trr_41x * dot_lij_y_405 + trr_51x * dot_lij_y_505;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413 + trr_51x * dot_lij_y_513;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114 + trr_21x * dot_lij_y_214 + trr_31x * dot_lij_y_314 + trr_41x * dot_lij_y_414 + trr_51x * dot_lij_y_514;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422 + trr_51x * dot_lij_y_522;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123 + trr_21x * dot_lij_y_223 + trr_31x * dot_lij_y_323 + trr_41x * dot_lij_y_423 + trr_51x * dot_lij_y_523;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431 + trr_51x * dot_lij_y_531;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132 + trr_21x * dot_lij_y_232 + trr_31x * dot_lij_y_332 + trr_41x * dot_lij_y_432 + trr_51x * dot_lij_y_532;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440 + trr_51x * dot_lij_y_540;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141 + trr_21x * dot_lij_y_241 + trr_31x * dot_lij_y_341 + trr_41x * dot_lij_y_441 + trr_51x * dot_lij_y_541;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150 + trr_21x * dot_lij_y_250 + trr_31x * dot_lij_y_350 + trr_41x * dot_lij_y_450 + trr_51x * dot_lij_y_550;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403 + trr_52x * dot_lij_y_503;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104 + trr_22x * dot_lij_y_204 + trr_32x * dot_lij_y_304 + trr_42x * dot_lij_y_404 + trr_52x * dot_lij_y_504;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412 + trr_52x * dot_lij_y_512;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113 + trr_22x * dot_lij_y_213 + trr_32x * dot_lij_y_313 + trr_42x * dot_lij_y_413 + trr_52x * dot_lij_y_513;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421 + trr_52x * dot_lij_y_521;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122 + trr_22x * dot_lij_y_222 + trr_32x * dot_lij_y_322 + trr_42x * dot_lij_y_422 + trr_52x * dot_lij_y_522;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430 + trr_52x * dot_lij_y_530;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131 + trr_22x * dot_lij_y_231 + trr_32x * dot_lij_y_331 + trr_42x * dot_lij_y_431 + trr_52x * dot_lij_y_531;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140 + trr_22x * dot_lij_y_240 + trr_32x * dot_lij_y_340 + trr_42x * dot_lij_y_440 + trr_52x * dot_lij_y_540;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402 + trr_53x * dot_lij_y_502;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103 + trr_23x * dot_lij_y_203 + trr_33x * dot_lij_y_303 + trr_43x * dot_lij_y_403 + trr_53x * dot_lij_y_503;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411 + trr_53x * dot_lij_y_511;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112 + trr_23x * dot_lij_y_212 + trr_33x * dot_lij_y_312 + trr_43x * dot_lij_y_412 + trr_53x * dot_lij_y_512;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420 + trr_53x * dot_lij_y_520;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121 + trr_23x * dot_lij_y_221 + trr_33x * dot_lij_y_321 + trr_43x * dot_lij_y_421 + trr_53x * dot_lij_y_521;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130 + trr_23x * dot_lij_y_230 + trr_33x * dot_lij_y_330 + trr_43x * dot_lij_y_430 + trr_53x * dot_lij_y_530;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401 + trr_54x * dot_lij_y_501;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102 + trr_24x * dot_lij_y_202 + trr_34x * dot_lij_y_302 + trr_44x * dot_lij_y_402 + trr_54x * dot_lij_y_502;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410 + trr_54x * dot_lij_y_510;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111 + trr_24x * dot_lij_y_211 + trr_34x * dot_lij_y_311 + trr_44x * dot_lij_y_411 + trr_54x * dot_lij_y_511;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120 + trr_24x * dot_lij_y_220 + trr_34x * dot_lij_y_320 + trr_44x * dot_lij_y_420 + trr_54x * dot_lij_y_520;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    double trr_55x = cpx * trr_54x + 4*b01 * trr_53x + 5*b00 * trr_44x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400 + trr_55x * dot_lij_y_500;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101 + trr_25x * dot_lij_y_201 + trr_35x * dot_lij_y_301 + trr_45x * dot_lij_y_401 + trr_55x * dot_lij_y_501;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110 + trr_25x * dot_lij_y_210 + trr_35x * dot_lij_y_310 + trr_45x * dot_lij_y_410 + trr_55x * dot_lij_y_510;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    double trr_26x = cpx * trr_25x + 5*b01 * trr_24x + 2*b00 * trr_15x;
                    double trr_36x = cpx * trr_35x + 5*b01 * trr_34x + 3*b00 * trr_25x;
                    double trr_46x = cpx * trr_45x + 5*b01 * trr_44x + 4*b00 * trr_35x;
                    double trr_56x = cpx * trr_55x + 5*b01 * trr_54x + 5*b00 * trr_45x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100 + trr_26x * dot_lij_y_200 + trr_36x * dot_lij_y_300 + trr_46x * dot_lij_y_400 + trr_56x * dot_lij_y_500;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005 + trr_26z * dm_kl_006;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005 + trr_36z * dm_kl_006;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005 + trr_46z * dm_kl_006;
                    double dot_lkl_z_005 = trr_53z * dm_kl_003 + trr_54z * dm_kl_004 + trr_55z * dm_kl_005 + trr_56z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014 + trr_25z * dm_kl_015;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014 + trr_35z * dm_kl_015;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014 + trr_45z * dm_kl_015;
                    double dot_lkl_z_015 = trr_52z * dm_kl_012 + trr_53z * dm_kl_013 + trr_54z * dm_kl_014 + trr_55z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023 + trr_24z * dm_kl_024;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023 + trr_34z * dm_kl_024;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023 + trr_44z * dm_kl_024;
                    double dot_lkl_z_025 = trr_51z * dm_kl_021 + trr_52z * dm_kl_022 + trr_53z * dm_kl_023 + trr_54z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032 + trr_23z * dm_kl_033;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032 + trr_33z * dm_kl_033;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032 + trr_43z * dm_kl_033;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031 + trr_52z * dm_kl_032 + trr_53z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041 + trr_22z * dm_kl_042;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041 + trr_32z * dm_kl_042;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041 + trr_42z * dm_kl_042;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040 + trr_51z * dm_kl_041 + trr_52z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050 + trr_21z * dm_kl_051;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050 + trr_31z * dm_kl_051;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050 + trr_41z * dm_kl_051;
                    double dot_lkl_z_055 = trr_50z * dm_kl_050 + trr_51z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_062 = trr_20z * dm_kl_060;
                    double dot_lkl_z_063 = trr_30z * dm_kl_060;
                    double dot_lkl_z_064 = trr_40z * dm_kl_060;
                    double dot_lkl_z_065 = trr_50z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104 + trr_25z * dm_kl_105;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104 + trr_35z * dm_kl_105;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104 + trr_45z * dm_kl_105;
                    double dot_lkl_z_105 = trr_52z * dm_kl_102 + trr_53z * dm_kl_103 + trr_54z * dm_kl_104 + trr_55z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113 + trr_24z * dm_kl_114;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113 + trr_34z * dm_kl_114;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113 + trr_44z * dm_kl_114;
                    double dot_lkl_z_115 = trr_51z * dm_kl_111 + trr_52z * dm_kl_112 + trr_53z * dm_kl_113 + trr_54z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122 + trr_23z * dm_kl_123;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122 + trr_33z * dm_kl_123;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122 + trr_43z * dm_kl_123;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121 + trr_52z * dm_kl_122 + trr_53z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131 + trr_22z * dm_kl_132;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131 + trr_32z * dm_kl_132;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131 + trr_42z * dm_kl_132;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130 + trr_51z * dm_kl_131 + trr_52z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140 + trr_21z * dm_kl_141;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140 + trr_31z * dm_kl_141;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140 + trr_41z * dm_kl_141;
                    double dot_lkl_z_145 = trr_50z * dm_kl_140 + trr_51z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_152 = trr_20z * dm_kl_150;
                    double dot_lkl_z_153 = trr_30z * dm_kl_150;
                    double dot_lkl_z_154 = trr_40z * dm_kl_150;
                    double dot_lkl_z_155 = trr_50z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203 + trr_24z * dm_kl_204;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203 + trr_34z * dm_kl_204;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203 + trr_44z * dm_kl_204;
                    double dot_lkl_z_205 = trr_51z * dm_kl_201 + trr_52z * dm_kl_202 + trr_53z * dm_kl_203 + trr_54z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212 + trr_23z * dm_kl_213;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212 + trr_33z * dm_kl_213;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212 + trr_43z * dm_kl_213;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211 + trr_52z * dm_kl_212 + trr_53z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221 + trr_22z * dm_kl_222;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221 + trr_32z * dm_kl_222;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221 + trr_42z * dm_kl_222;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220 + trr_51z * dm_kl_221 + trr_52z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230 + trr_21z * dm_kl_231;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230 + trr_31z * dm_kl_231;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230 + trr_41z * dm_kl_231;
                    double dot_lkl_z_235 = trr_50z * dm_kl_230 + trr_51z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_242 = trr_20z * dm_kl_240;
                    double dot_lkl_z_243 = trr_30z * dm_kl_240;
                    double dot_lkl_z_244 = trr_40z * dm_kl_240;
                    double dot_lkl_z_245 = trr_50z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302 + trr_23z * dm_kl_303;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302 + trr_33z * dm_kl_303;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302 + trr_43z * dm_kl_303;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301 + trr_52z * dm_kl_302 + trr_53z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311 + trr_22z * dm_kl_312;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311 + trr_32z * dm_kl_312;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311 + trr_42z * dm_kl_312;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310 + trr_51z * dm_kl_311 + trr_52z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320 + trr_21z * dm_kl_321;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320 + trr_31z * dm_kl_321;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320 + trr_41z * dm_kl_321;
                    double dot_lkl_z_325 = trr_50z * dm_kl_320 + trr_51z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_332 = trr_20z * dm_kl_330;
                    double dot_lkl_z_333 = trr_30z * dm_kl_330;
                    double dot_lkl_z_334 = trr_40z * dm_kl_330;
                    double dot_lkl_z_335 = trr_50z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401 + trr_22z * dm_kl_402;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401 + trr_32z * dm_kl_402;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401 + trr_42z * dm_kl_402;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400 + trr_51z * dm_kl_401 + trr_52z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410 + trr_21z * dm_kl_411;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410 + trr_31z * dm_kl_411;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410 + trr_41z * dm_kl_411;
                    double dot_lkl_z_415 = trr_50z * dm_kl_410 + trr_51z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_422 = trr_20z * dm_kl_420;
                    double dot_lkl_z_423 = trr_30z * dm_kl_420;
                    double dot_lkl_z_424 = trr_40z * dm_kl_420;
                    double dot_lkl_z_425 = trr_50z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500 + trr_21z * dm_kl_501;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500 + trr_31z * dm_kl_501;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500 + trr_41z * dm_kl_501;
                    double dot_lkl_z_505 = trr_50z * dm_kl_500 + trr_51z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_512 = trr_20z * dm_kl_510;
                    double dot_lkl_z_513 = trr_30z * dm_kl_510;
                    double dot_lkl_z_514 = trr_40z * dm_kl_510;
                    double dot_lkl_z_515 = trr_50z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_z_602 = trr_20z * dm_kl_600;
                    double dot_lkl_z_603 = trr_30z * dm_kl_600;
                    double dot_lkl_z_604 = trr_40z * dm_kl_600;
                    double dot_lkl_z_605 = trr_50z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052 + trr_06y * dot_lkl_z_062;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053 + trr_06y * dot_lkl_z_063;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054 + trr_06y * dot_lkl_z_064;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045 + trr_05y * dot_lkl_z_055 + trr_06y * dot_lkl_z_065;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051 + trr_16y * dot_lkl_z_061;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052 + trr_16y * dot_lkl_z_062;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053 + trr_16y * dot_lkl_z_063;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044 + trr_15y * dot_lkl_z_054 + trr_16y * dot_lkl_z_064;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050 + trr_26y * dot_lkl_z_060;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051 + trr_26y * dot_lkl_z_061;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052 + trr_26y * dot_lkl_z_062;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043 + trr_25y * dot_lkl_z_053 + trr_26y * dot_lkl_z_063;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050 + trr_36y * dot_lkl_z_060;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051 + trr_36y * dot_lkl_z_061;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042 + trr_35y * dot_lkl_z_052 + trr_36y * dot_lkl_z_062;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050 + trr_46y * dot_lkl_z_060;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041 + trr_45y * dot_lkl_z_051 + trr_46y * dot_lkl_z_061;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040 + trr_55y * dot_lkl_z_050 + trr_56y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142 + trr_05y * dot_lkl_z_152;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143 + trr_05y * dot_lkl_z_153;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144 + trr_05y * dot_lkl_z_154;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135 + trr_04y * dot_lkl_z_145 + trr_05y * dot_lkl_z_155;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141 + trr_15y * dot_lkl_z_151;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142 + trr_15y * dot_lkl_z_152;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143 + trr_15y * dot_lkl_z_153;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134 + trr_14y * dot_lkl_z_144 + trr_15y * dot_lkl_z_154;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140 + trr_25y * dot_lkl_z_150;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141 + trr_25y * dot_lkl_z_151;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142 + trr_25y * dot_lkl_z_152;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133 + trr_24y * dot_lkl_z_143 + trr_25y * dot_lkl_z_153;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140 + trr_35y * dot_lkl_z_150;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141 + trr_35y * dot_lkl_z_151;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132 + trr_34y * dot_lkl_z_142 + trr_35y * dot_lkl_z_152;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140 + trr_45y * dot_lkl_z_150;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131 + trr_44y * dot_lkl_z_141 + trr_45y * dot_lkl_z_151;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130 + trr_54y * dot_lkl_z_140 + trr_55y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232 + trr_04y * dot_lkl_z_242;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233 + trr_04y * dot_lkl_z_243;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234 + trr_04y * dot_lkl_z_244;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225 + trr_03y * dot_lkl_z_235 + trr_04y * dot_lkl_z_245;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231 + trr_14y * dot_lkl_z_241;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232 + trr_14y * dot_lkl_z_242;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233 + trr_14y * dot_lkl_z_243;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224 + trr_13y * dot_lkl_z_234 + trr_14y * dot_lkl_z_244;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230 + trr_24y * dot_lkl_z_240;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231 + trr_24y * dot_lkl_z_241;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232 + trr_24y * dot_lkl_z_242;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223 + trr_23y * dot_lkl_z_233 + trr_24y * dot_lkl_z_243;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230 + trr_34y * dot_lkl_z_240;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231 + trr_34y * dot_lkl_z_241;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222 + trr_33y * dot_lkl_z_232 + trr_34y * dot_lkl_z_242;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230 + trr_44y * dot_lkl_z_240;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221 + trr_43y * dot_lkl_z_231 + trr_44y * dot_lkl_z_241;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220 + trr_53y * dot_lkl_z_230 + trr_54y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322 + trr_03y * dot_lkl_z_332;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323 + trr_03y * dot_lkl_z_333;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324 + trr_03y * dot_lkl_z_334;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315 + trr_02y * dot_lkl_z_325 + trr_03y * dot_lkl_z_335;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321 + trr_13y * dot_lkl_z_331;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322 + trr_13y * dot_lkl_z_332;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323 + trr_13y * dot_lkl_z_333;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314 + trr_12y * dot_lkl_z_324 + trr_13y * dot_lkl_z_334;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320 + trr_23y * dot_lkl_z_330;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321 + trr_23y * dot_lkl_z_331;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322 + trr_23y * dot_lkl_z_332;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313 + trr_22y * dot_lkl_z_323 + trr_23y * dot_lkl_z_333;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320 + trr_33y * dot_lkl_z_330;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321 + trr_33y * dot_lkl_z_331;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312 + trr_32y * dot_lkl_z_322 + trr_33y * dot_lkl_z_332;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320 + trr_43y * dot_lkl_z_330;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311 + trr_42y * dot_lkl_z_321 + trr_43y * dot_lkl_z_331;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310 + trr_52y * dot_lkl_z_320 + trr_53y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412 + trr_02y * dot_lkl_z_422;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413 + trr_02y * dot_lkl_z_423;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414 + trr_02y * dot_lkl_z_424;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405 + trr_01y * dot_lkl_z_415 + trr_02y * dot_lkl_z_425;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411 + trr_12y * dot_lkl_z_421;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412 + trr_12y * dot_lkl_z_422;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413 + trr_12y * dot_lkl_z_423;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404 + trr_11y * dot_lkl_z_414 + trr_12y * dot_lkl_z_424;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410 + trr_22y * dot_lkl_z_420;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411 + trr_22y * dot_lkl_z_421;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412 + trr_22y * dot_lkl_z_422;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403 + trr_21y * dot_lkl_z_413 + trr_22y * dot_lkl_z_423;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410 + trr_32y * dot_lkl_z_420;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411 + trr_32y * dot_lkl_z_421;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402 + trr_31y * dot_lkl_z_412 + trr_32y * dot_lkl_z_422;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410 + trr_42y * dot_lkl_z_420;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401 + trr_41y * dot_lkl_z_411 + trr_42y * dot_lkl_z_421;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400 + trr_51y * dot_lkl_z_410 + trr_52y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502 + trr_01y * dot_lkl_z_512;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503 + trr_01y * dot_lkl_z_513;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504 + trr_01y * dot_lkl_z_514;
                    double dot_lkl_y_505 = 1 * dot_lkl_z_505 + trr_01y * dot_lkl_z_515;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501 + trr_11y * dot_lkl_z_511;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502 + trr_11y * dot_lkl_z_512;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503 + trr_11y * dot_lkl_z_513;
                    double dot_lkl_y_514 = trr_10y * dot_lkl_z_504 + trr_11y * dot_lkl_z_514;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500 + trr_21y * dot_lkl_z_510;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501 + trr_21y * dot_lkl_z_511;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502 + trr_21y * dot_lkl_z_512;
                    double dot_lkl_y_523 = trr_20y * dot_lkl_z_503 + trr_21y * dot_lkl_z_513;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500 + trr_31y * dot_lkl_z_510;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501 + trr_31y * dot_lkl_z_511;
                    double dot_lkl_y_532 = trr_30y * dot_lkl_z_502 + trr_31y * dot_lkl_z_512;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500 + trr_41y * dot_lkl_z_510;
                    double dot_lkl_y_541 = trr_40y * dot_lkl_z_501 + trr_41y * dot_lkl_z_511;
                    double dot_lkl_y_550 = trr_50y * dot_lkl_z_500 + trr_51y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_602 = 1 * dot_lkl_z_602;
                    double dot_lkl_y_603 = 1 * dot_lkl_z_603;
                    double dot_lkl_y_604 = 1 * dot_lkl_z_604;
                    double dot_lkl_y_605 = 1 * dot_lkl_z_605;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    double dot_lkl_y_611 = trr_10y * dot_lkl_z_601;
                    double dot_lkl_y_612 = trr_10y * dot_lkl_z_602;
                    double dot_lkl_y_613 = trr_10y * dot_lkl_z_603;
                    double dot_lkl_y_614 = trr_10y * dot_lkl_z_604;
                    double dot_lkl_y_620 = trr_20y * dot_lkl_z_600;
                    double dot_lkl_y_621 = trr_20y * dot_lkl_z_601;
                    double dot_lkl_y_622 = trr_20y * dot_lkl_z_602;
                    double dot_lkl_y_623 = trr_20y * dot_lkl_z_603;
                    double dot_lkl_y_630 = trr_30y * dot_lkl_z_600;
                    double dot_lkl_y_631 = trr_30y * dot_lkl_z_601;
                    double dot_lkl_y_632 = trr_30y * dot_lkl_z_602;
                    double dot_lkl_y_640 = trr_40y * dot_lkl_z_600;
                    double dot_lkl_y_641 = trr_40y * dot_lkl_z_601;
                    double dot_lkl_y_650 = trr_50y * dot_lkl_z_600;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503 + trr_06x * dot_lkl_y_603;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504 + trr_06x * dot_lkl_y_604;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405 + trr_05x * dot_lkl_y_505 + trr_06x * dot_lkl_y_605;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512 + trr_06x * dot_lkl_y_612;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513 + trr_06x * dot_lkl_y_613;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414 + trr_05x * dot_lkl_y_514 + trr_06x * dot_lkl_y_614;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521 + trr_06x * dot_lkl_y_621;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522 + trr_06x * dot_lkl_y_622;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423 + trr_05x * dot_lkl_y_523 + trr_06x * dot_lkl_y_623;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530 + trr_06x * dot_lkl_y_630;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531 + trr_06x * dot_lkl_y_631;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432 + trr_05x * dot_lkl_y_532 + trr_06x * dot_lkl_y_632;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540 + trr_06x * dot_lkl_y_640;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441 + trr_05x * dot_lkl_y_541 + trr_06x * dot_lkl_y_641;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450 + trr_05x * dot_lkl_y_550 + trr_06x * dot_lkl_y_650;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502 + trr_16x * dot_lkl_y_602;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503 + trr_16x * dot_lkl_y_603;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404 + trr_15x * dot_lkl_y_504 + trr_16x * dot_lkl_y_604;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511 + trr_16x * dot_lkl_y_611;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512 + trr_16x * dot_lkl_y_612;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413 + trr_15x * dot_lkl_y_513 + trr_16x * dot_lkl_y_613;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520 + trr_16x * dot_lkl_y_620;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521 + trr_16x * dot_lkl_y_621;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422 + trr_15x * dot_lkl_y_522 + trr_16x * dot_lkl_y_622;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530 + trr_16x * dot_lkl_y_630;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431 + trr_15x * dot_lkl_y_531 + trr_16x * dot_lkl_y_631;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440 + trr_15x * dot_lkl_y_540 + trr_16x * dot_lkl_y_640;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501 + trr_26x * dot_lkl_y_601;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502 + trr_26x * dot_lkl_y_602;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403 + trr_25x * dot_lkl_y_503 + trr_26x * dot_lkl_y_603;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510 + trr_26x * dot_lkl_y_610;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511 + trr_26x * dot_lkl_y_611;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412 + trr_25x * dot_lkl_y_512 + trr_26x * dot_lkl_y_612;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520 + trr_26x * dot_lkl_y_620;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421 + trr_25x * dot_lkl_y_521 + trr_26x * dot_lkl_y_621;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430 + trr_25x * dot_lkl_y_530 + trr_26x * dot_lkl_y_630;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500 + trr_36x * dot_lkl_y_600;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501 + trr_36x * dot_lkl_y_601;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402 + trr_35x * dot_lkl_y_502 + trr_36x * dot_lkl_y_602;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510 + trr_36x * dot_lkl_y_610;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411 + trr_35x * dot_lkl_y_511 + trr_36x * dot_lkl_y_611;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420 + trr_35x * dot_lkl_y_520 + trr_36x * dot_lkl_y_620;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500 + trr_46x * dot_lkl_y_600;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401 + trr_45x * dot_lkl_y_501 + trr_46x * dot_lkl_y_601;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410 + trr_45x * dot_lkl_y_510 + trr_46x * dot_lkl_y_610;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400 + trr_55x * dot_lkl_y_500 + trr_56x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+8, vj_ij_012);
        atomicAdd(vj1+ij_pair0+9, vj_ij_013);
        atomicAdd(vj1+ij_pair0+10, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_021);
        atomicAdd(vj1+ij_pair0+13, vj_ij_022);
        atomicAdd(vj1+ij_pair0+14, vj_ij_023);
        atomicAdd(vj1+ij_pair0+15, vj_ij_030);
        atomicAdd(vj1+ij_pair0+16, vj_ij_031);
        atomicAdd(vj1+ij_pair0+17, vj_ij_032);
        atomicAdd(vj1+ij_pair0+18, vj_ij_040);
        atomicAdd(vj1+ij_pair0+19, vj_ij_041);
        atomicAdd(vj1+ij_pair0+20, vj_ij_050);
        atomicAdd(vj1+ij_pair0+23, vj_ij_102);
        atomicAdd(vj1+ij_pair0+24, vj_ij_103);
        atomicAdd(vj1+ij_pair0+25, vj_ij_104);
        atomicAdd(vj1+ij_pair0+27, vj_ij_111);
        atomicAdd(vj1+ij_pair0+28, vj_ij_112);
        atomicAdd(vj1+ij_pair0+29, vj_ij_113);
        atomicAdd(vj1+ij_pair0+30, vj_ij_120);
        atomicAdd(vj1+ij_pair0+31, vj_ij_121);
        atomicAdd(vj1+ij_pair0+32, vj_ij_122);
        atomicAdd(vj1+ij_pair0+33, vj_ij_130);
        atomicAdd(vj1+ij_pair0+34, vj_ij_131);
        atomicAdd(vj1+ij_pair0+35, vj_ij_140);
        atomicAdd(vj1+ij_pair0+37, vj_ij_201);
        atomicAdd(vj1+ij_pair0+38, vj_ij_202);
        atomicAdd(vj1+ij_pair0+39, vj_ij_203);
        atomicAdd(vj1+ij_pair0+40, vj_ij_210);
        atomicAdd(vj1+ij_pair0+41, vj_ij_211);
        atomicAdd(vj1+ij_pair0+42, vj_ij_212);
        atomicAdd(vj1+ij_pair0+43, vj_ij_220);
        atomicAdd(vj1+ij_pair0+44, vj_ij_221);
        atomicAdd(vj1+ij_pair0+45, vj_ij_230);
        atomicAdd(vj1+ij_pair0+46, vj_ij_300);
        atomicAdd(vj1+ij_pair0+47, vj_ij_301);
        atomicAdd(vj1+ij_pair0+48, vj_ij_302);
        atomicAdd(vj1+ij_pair0+49, vj_ij_310);
        atomicAdd(vj1+ij_pair0+50, vj_ij_311);
        atomicAdd(vj1+ij_pair0+51, vj_ij_320);
        atomicAdd(vj1+ij_pair0+52, vj_ij_400);
        atomicAdd(vj1+ij_pair0+53, vj_ij_401);
        atomicAdd(vj1+ij_pair0+54, vj_ij_410);
        atomicAdd(vj1+ij_pair0+55, vj_ij_500);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_5_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_5_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *rw = Rpa_cicj + iprim*jprim*TILE2*4;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double gout_3_0 = 0.;
        double gout_4_0 = 0.;
        double gout_5_0 = 0.;
        double gout_6_0 = 0.;
        double gout_9_0 = 0.;
        double gout_10_0 = 0.;
        double gout_11_0 = 0.;
        double gout_12_0 = 0.;
        double gout_14_0 = 0.;
        double gout_15_0 = 0.;
        double gout_16_0 = 0.;
        double gout_17_0 = 0.;
        double gout_18_0 = 0.;
        double gout_19_0 = 0.;
        double gout_20_0 = 0.;
        double gout_21_0 = 0.;
        double gout_22_0 = 0.;
        double gout_23_0 = 0.;
        double gout_24_0 = 0.;
        double gout_25_0 = 0.;
        double gout_26_0 = 0.;
        double gout_27_0 = 0.;
        double gout_30_0 = 0.;
        double gout_31_0 = 0.;
        double gout_32_0 = 0.;
        double gout_33_0 = 0.;
        double gout_35_0 = 0.;
        double gout_36_0 = 0.;
        double gout_37_0 = 0.;
        double gout_38_0 = 0.;
        double gout_39_0 = 0.;
        double gout_40_0 = 0.;
        double gout_41_0 = 0.;
        double gout_42_0 = 0.;
        double gout_43_0 = 0.;
        double gout_44_0 = 0.;
        double gout_45_0 = 0.;
        double gout_46_0 = 0.;
        double gout_47_0 = 0.;
        double gout_48_0 = 0.;
        double gout_50_0 = 0.;
        double gout_51_0 = 0.;
        double gout_52_0 = 0.;
        double gout_53_0 = 0.;
        double gout_54_0 = 0.;
        double gout_55_0 = 0.;
        double gout_56_0 = 0.;
        double gout_57_0 = 0.;
        double gout_58_0 = 0.;
        double gout_59_0 = 0.;
        double gout_60_0 = 0.;
        double gout_61_0 = 0.;
        double gout_62_0 = 0.;
        double gout_63_0 = 0.;
        double gout_64_0 = 0.;
        double gout_65_0 = 0.;
        double gout_66_0 = 0.;
        double gout_67_0 = 0.;
        double gout_68_0 = 0.;
        double gout_69_0 = 0.;
        double gout_70_0 = 0.;
        double gout_71_0 = 0.;
        double gout_72_0 = 0.;
        double gout_73_0 = 0.;
        double gout_74_0 = 0.;
        double gout_75_0 = 0.;
        double gout_76_0 = 0.;
        double gout_77_0 = 0.;
        double gout_78_0 = 0.;
        double gout_79_0 = 0.;
        double gout_80_0 = 0.;
        double gout_81_0 = 0.;
        double gout_82_0 = 0.;
        double gout_83_0 = 0.;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    gout_3_0 += fac * 1 * trr_30z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    gout_4_0 += fac * 1 * trr_40z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    gout_5_0 += fac * 1 * trr_50z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    gout_6_0 += fac * 1 * trr_60z;
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    gout_9_0 += fac * trr_10y * trr_20z;
                    gout_10_0 += fac * trr_10y * trr_30z;
                    gout_11_0 += fac * trr_10y * trr_40z;
                    gout_12_0 += fac * trr_10y * trr_50z;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    gout_14_0 += fac * trr_20y * trr_10z;
                    gout_15_0 += fac * trr_20y * trr_20z;
                    gout_16_0 += fac * trr_20y * trr_30z;
                    gout_17_0 += fac * trr_20y * trr_40z;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    gout_18_0 += fac * trr_30y * wt;
                    gout_19_0 += fac * trr_30y * trr_10z;
                    gout_20_0 += fac * trr_30y * trr_20z;
                    gout_21_0 += fac * trr_30y * trr_30z;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    gout_22_0 += fac * trr_40y * wt;
                    gout_23_0 += fac * trr_40y * trr_10z;
                    gout_24_0 += fac * trr_40y * trr_20z;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    gout_25_0 += fac * trr_50y * wt;
                    gout_26_0 += fac * trr_50y * trr_10z;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    gout_27_0 += fac * trr_60y * wt;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    gout_30_0 += trr_10x * 1 * trr_20z;
                    gout_31_0 += trr_10x * 1 * trr_30z;
                    gout_32_0 += trr_10x * 1 * trr_40z;
                    gout_33_0 += trr_10x * 1 * trr_50z;
                    gout_35_0 += trr_10x * trr_10y * trr_10z;
                    gout_36_0 += trr_10x * trr_10y * trr_20z;
                    gout_37_0 += trr_10x * trr_10y * trr_30z;
                    gout_38_0 += trr_10x * trr_10y * trr_40z;
                    gout_39_0 += trr_10x * trr_20y * wt;
                    gout_40_0 += trr_10x * trr_20y * trr_10z;
                    gout_41_0 += trr_10x * trr_20y * trr_20z;
                    gout_42_0 += trr_10x * trr_20y * trr_30z;
                    gout_43_0 += trr_10x * trr_30y * wt;
                    gout_44_0 += trr_10x * trr_30y * trr_10z;
                    gout_45_0 += trr_10x * trr_30y * trr_20z;
                    gout_46_0 += trr_10x * trr_40y * wt;
                    gout_47_0 += trr_10x * trr_40y * trr_10z;
                    gout_48_0 += trr_10x * trr_50y * wt;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    gout_50_0 += trr_20x * 1 * trr_10z;
                    gout_51_0 += trr_20x * 1 * trr_20z;
                    gout_52_0 += trr_20x * 1 * trr_30z;
                    gout_53_0 += trr_20x * 1 * trr_40z;
                    gout_54_0 += trr_20x * trr_10y * wt;
                    gout_55_0 += trr_20x * trr_10y * trr_10z;
                    gout_56_0 += trr_20x * trr_10y * trr_20z;
                    gout_57_0 += trr_20x * trr_10y * trr_30z;
                    gout_58_0 += trr_20x * trr_20y * wt;
                    gout_59_0 += trr_20x * trr_20y * trr_10z;
                    gout_60_0 += trr_20x * trr_20y * trr_20z;
                    gout_61_0 += trr_20x * trr_30y * wt;
                    gout_62_0 += trr_20x * trr_30y * trr_10z;
                    gout_63_0 += trr_20x * trr_40y * wt;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    gout_64_0 += trr_30x * 1 * wt;
                    gout_65_0 += trr_30x * 1 * trr_10z;
                    gout_66_0 += trr_30x * 1 * trr_20z;
                    gout_67_0 += trr_30x * 1 * trr_30z;
                    gout_68_0 += trr_30x * trr_10y * wt;
                    gout_69_0 += trr_30x * trr_10y * trr_10z;
                    gout_70_0 += trr_30x * trr_10y * trr_20z;
                    gout_71_0 += trr_30x * trr_20y * wt;
                    gout_72_0 += trr_30x * trr_20y * trr_10z;
                    gout_73_0 += trr_30x * trr_30y * wt;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    gout_74_0 += trr_40x * 1 * wt;
                    gout_75_0 += trr_40x * 1 * trr_10z;
                    gout_76_0 += trr_40x * 1 * trr_20z;
                    gout_77_0 += trr_40x * trr_10y * wt;
                    gout_78_0 += trr_40x * trr_10y * trr_10z;
                    gout_79_0 += trr_40x * trr_20y * wt;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    gout_80_0 += trr_50x * 1 * wt;
                    gout_81_0 += trr_50x * 1 * trr_10z;
                    gout_82_0 += trr_50x * trr_10y * wt;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    gout_83_0 += trr_60x * 1 * wt;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        int nao_pairs1 = pair_loc1[nbas1*nbas1];
        double *vj1 = j.vj1;
        double *dm1 = j.dm1;
        int nao_pairs2 = pair_loc2[nbas2*nbas2];
        double *vj2 = j.vj2;
        double *dm2 = j.dm2;
        for (int i_dm = 0; i_dm < j.n_dm2; ++i_dm) {
            atomicAdd(vj1+ij_pair0+3, gout_3_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+4, gout_4_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+5, gout_5_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+6, gout_6_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+9, gout_9_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+10, gout_10_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+11, gout_11_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+12, gout_12_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+14, gout_14_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+15, gout_15_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+16, gout_16_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+17, gout_17_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+18, gout_18_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+19, gout_19_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+20, gout_20_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+21, gout_21_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+22, gout_22_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+23, gout_23_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+24, gout_24_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+25, gout_25_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+26, gout_26_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+27, gout_27_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+30, gout_30_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+31, gout_31_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+32, gout_32_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+33, gout_33_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+35, gout_35_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+36, gout_36_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+37, gout_37_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+38, gout_38_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+39, gout_39_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+40, gout_40_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+41, gout_41_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+42, gout_42_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+43, gout_43_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+44, gout_44_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+45, gout_45_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+46, gout_46_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+47, gout_47_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+48, gout_48_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+50, gout_50_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+51, gout_51_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+52, gout_52_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+53, gout_53_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+54, gout_54_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+55, gout_55_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+56, gout_56_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+57, gout_57_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+58, gout_58_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+59, gout_59_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+60, gout_60_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+61, gout_61_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+62, gout_62_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+63, gout_63_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+64, gout_64_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+65, gout_65_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+66, gout_66_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+67, gout_67_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+68, gout_68_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+69, gout_69_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+70, gout_70_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+71, gout_71_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+72, gout_72_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+73, gout_73_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+74, gout_74_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+75, gout_75_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+76, gout_76_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+77, gout_77_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+78, gout_78_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+79, gout_79_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+80, gout_80_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+81, gout_81_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+82, gout_82_0*dm2[kl_pair0+0]);
            atomicAdd(vj1+ij_pair0+83, gout_83_0*dm2[kl_pair0+0]);
            vj1 += nao_pairs1;
            dm2 += nao_pairs2;
        }
        for (int i_dm = 0; i_dm < j.n_dm1; ++i_dm) {
            atomicAdd(vj2+kl_pair0+0, gout_3_0*dm1[ij_pair0+3] + gout_4_0*dm1[ij_pair0+4] + gout_5_0*dm1[ij_pair0+5] + gout_6_0*dm1[ij_pair0+6] + gout_9_0*dm1[ij_pair0+9] + gout_10_0*dm1[ij_pair0+10] + gout_11_0*dm1[ij_pair0+11] + gout_12_0*dm1[ij_pair0+12] + gout_14_0*dm1[ij_pair0+14] + gout_15_0*dm1[ij_pair0+15] + gout_16_0*dm1[ij_pair0+16] + gout_17_0*dm1[ij_pair0+17] + gout_18_0*dm1[ij_pair0+18] + gout_19_0*dm1[ij_pair0+19] + gout_20_0*dm1[ij_pair0+20] + gout_21_0*dm1[ij_pair0+21] + gout_22_0*dm1[ij_pair0+22] + gout_23_0*dm1[ij_pair0+23] + gout_24_0*dm1[ij_pair0+24] + gout_25_0*dm1[ij_pair0+25] + gout_26_0*dm1[ij_pair0+26] + gout_27_0*dm1[ij_pair0+27] + gout_30_0*dm1[ij_pair0+30] + gout_31_0*dm1[ij_pair0+31] + gout_32_0*dm1[ij_pair0+32] + gout_33_0*dm1[ij_pair0+33] + gout_35_0*dm1[ij_pair0+35] + gout_36_0*dm1[ij_pair0+36] + gout_37_0*dm1[ij_pair0+37] + gout_38_0*dm1[ij_pair0+38] + gout_39_0*dm1[ij_pair0+39] + gout_40_0*dm1[ij_pair0+40] + gout_41_0*dm1[ij_pair0+41] + gout_42_0*dm1[ij_pair0+42] + gout_43_0*dm1[ij_pair0+43] + gout_44_0*dm1[ij_pair0+44] + gout_45_0*dm1[ij_pair0+45] + gout_46_0*dm1[ij_pair0+46] + gout_47_0*dm1[ij_pair0+47] + gout_48_0*dm1[ij_pair0+48] + gout_50_0*dm1[ij_pair0+50] + gout_51_0*dm1[ij_pair0+51] + gout_52_0*dm1[ij_pair0+52] + gout_53_0*dm1[ij_pair0+53] + gout_54_0*dm1[ij_pair0+54] + gout_55_0*dm1[ij_pair0+55] + gout_56_0*dm1[ij_pair0+56] + gout_57_0*dm1[ij_pair0+57] + gout_58_0*dm1[ij_pair0+58] + gout_59_0*dm1[ij_pair0+59] + gout_60_0*dm1[ij_pair0+60] + gout_61_0*dm1[ij_pair0+61] + gout_62_0*dm1[ij_pair0+62] + gout_63_0*dm1[ij_pair0+63] + gout_64_0*dm1[ij_pair0+64] + gout_65_0*dm1[ij_pair0+65] + gout_66_0*dm1[ij_pair0+66] + gout_67_0*dm1[ij_pair0+67] + gout_68_0*dm1[ij_pair0+68] + gout_69_0*dm1[ij_pair0+69] + gout_70_0*dm1[ij_pair0+70] + gout_71_0*dm1[ij_pair0+71] + gout_72_0*dm1[ij_pair0+72] + gout_73_0*dm1[ij_pair0+73] + gout_74_0*dm1[ij_pair0+74] + gout_75_0*dm1[ij_pair0+75] + gout_76_0*dm1[ij_pair0+76] + gout_77_0*dm1[ij_pair0+77] + gout_78_0*dm1[ij_pair0+78] + gout_79_0*dm1[ij_pair0+79] + gout_80_0*dm1[ij_pair0+80] + gout_81_0*dm1[ij_pair0+81] + gout_82_0*dm1[ij_pair0+82] + gout_83_0*dm1[ij_pair0+83]);
            vj2 += nao_pairs2;
            dm1 += nao_pairs1;
        }
    }
}
__global__
void rys_j_6_0_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_0_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_010 = dm2[kl_pair0+2];
        double dm_kl_100 = dm2[kl_pair0+3];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_001 = 0;
        double vj_kl_010 = 0;
        double vj_kl_100 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(4, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(4, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 4; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 4; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_01z = cpz * wt;
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401 + trr_50x * dot_lij_y_501 + trr_60x * dot_lij_y_601;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410 + trr_50x * dot_lij_y_510 + trr_60x * dot_lij_y_610;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400 + trr_51x * dot_lij_y_500 + trr_61x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001;
                    double dot_lkl_z_005 = trr_51z * dm_kl_001;
                    double dot_lkl_z_006 = trr_61z * dm_kl_001;
                    double dot_lkl_z_010 = wt * dm_kl_010;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010;
                    double dot_lkl_z_015 = trr_50z * dm_kl_010;
                    double dot_lkl_z_016 = trr_60z * dm_kl_010;
                    double dot_lkl_z_100 = wt * dm_kl_100;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100;
                    double dot_lkl_z_105 = trr_50z * dm_kl_100;
                    double dot_lkl_z_106 = trr_60z * dm_kl_100;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_010);
        atomicAdd(vj2+kl_pair0+3, vj_kl_100);
    }
}
__global__
void rys_j_6_1_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_1_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_001 = dm2[kl_pair0+1];
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_010 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+4];
        double dm_kl_020 = dm2[kl_pair0+5];
        double dm_kl_100 = dm2[kl_pair0+6];
        double dm_kl_101 = dm2[kl_pair0+7];
        double dm_kl_110 = dm2[kl_pair0+8];
        double dm_kl_200 = dm2[kl_pair0+9];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_001 = 0;
        double vj_kl_002 = 0;
        double vj_kl_010 = 0;
        double vj_kl_011 = 0;
        double vj_kl_020 = 0;
        double vj_kl_100 = 0;
        double vj_kl_101 = 0;
        double vj_kl_110 = 0;
        double vj_kl_200 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double trr_62z = cpz * trr_61z + 1*b01 * trr_60z + 6*b00 * trr_51z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2] + trr_62z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+9*TILE2] + trr_32z * dm_ij_cache[sh_ij+10*TILE2] + trr_42z * dm_ij_cache[sh_ij+11*TILE2] + trr_52z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+14*TILE2] + trr_22z * dm_ij_cache[sh_ij+15*TILE2] + trr_32z * dm_ij_cache[sh_ij+16*TILE2] + trr_42z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2] + trr_22z * dm_ij_cache[sh_ij+20*TILE2] + trr_32z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2] + trr_22z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_062 = trr_02z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+30*TILE2] + trr_32z * dm_ij_cache[sh_ij+31*TILE2] + trr_42z * dm_ij_cache[sh_ij+32*TILE2] + trr_52z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+35*TILE2] + trr_22z * dm_ij_cache[sh_ij+36*TILE2] + trr_32z * dm_ij_cache[sh_ij+37*TILE2] + trr_42z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+39*TILE2] + trr_12z * dm_ij_cache[sh_ij+40*TILE2] + trr_22z * dm_ij_cache[sh_ij+41*TILE2] + trr_32z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2] + trr_22z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_152 = trr_02z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+50*TILE2] + trr_22z * dm_ij_cache[sh_ij+51*TILE2] + trr_32z * dm_ij_cache[sh_ij+52*TILE2] + trr_42z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+54*TILE2] + trr_12z * dm_ij_cache[sh_ij+55*TILE2] + trr_22z * dm_ij_cache[sh_ij+56*TILE2] + trr_32z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+58*TILE2] + trr_12z * dm_ij_cache[sh_ij+59*TILE2] + trr_22z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+61*TILE2] + trr_12z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_242 = trr_02z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+64*TILE2] + trr_12z * dm_ij_cache[sh_ij+65*TILE2] + trr_22z * dm_ij_cache[sh_ij+66*TILE2] + trr_32z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+68*TILE2] + trr_12z * dm_ij_cache[sh_ij+69*TILE2] + trr_22z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+71*TILE2] + trr_12z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_332 = trr_02z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+74*TILE2] + trr_12z * dm_ij_cache[sh_ij+75*TILE2] + trr_22z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+77*TILE2] + trr_12z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_422 = trr_02z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+80*TILE2] + trr_12z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_512 = trr_02z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_602 = trr_02z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052 + trr_60y * dot_lij_z_062;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051 + trr_61y * dot_lij_z_061;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double trr_62y = cpy * trr_61y + 1*b01 * trr_60y + 6*b00 * trr_51y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050 + trr_62y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142 + trr_50y * dot_lij_z_152;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141 + trr_51y * dot_lij_z_151;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140 + trr_52y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232 + trr_40y * dot_lij_z_242;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231 + trr_41y * dot_lij_z_241;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230 + trr_42y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322 + trr_30y * dot_lij_z_332;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321 + trr_31y * dot_lij_z_331;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320 + trr_32y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412 + trr_20y * dot_lij_z_422;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411 + trr_21y * dot_lij_z_421;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410 + trr_22y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_502 = 1 * dot_lij_z_502 + trr_10y * dot_lij_z_512;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501 + trr_11y * dot_lij_z_511;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500 + trr_12y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_602 = 1 * dot_lij_z_602;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double dot_lij_y_611 = trr_01y * dot_lij_z_601;
                    double dot_lij_y_620 = trr_02y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_001 += fac * dot_lij_y_001 + trr_10x * dot_lij_y_101 + trr_20x * dot_lij_y_201 + trr_30x * dot_lij_y_301 + trr_40x * dot_lij_y_401 + trr_50x * dot_lij_y_501 + trr_60x * dot_lij_y_601;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502 + trr_60x * dot_lij_y_602;
                    vj_kl_010 += fac * dot_lij_y_010 + trr_10x * dot_lij_y_110 + trr_20x * dot_lij_y_210 + trr_30x * dot_lij_y_310 + trr_40x * dot_lij_y_410 + trr_50x * dot_lij_y_510 + trr_60x * dot_lij_y_610;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511 + trr_60x * dot_lij_y_611;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520 + trr_60x * dot_lij_y_620;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_100 += trr_01x * dot_lij_y_000 + trr_11x * dot_lij_y_100 + trr_21x * dot_lij_y_200 + trr_31x * dot_lij_y_300 + trr_41x * dot_lij_y_400 + trr_51x * dot_lij_y_500 + trr_61x * dot_lij_y_600;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501 + trr_61x * dot_lij_y_601;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510 + trr_61x * dot_lij_y_610;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    double trr_62x = cpx * trr_61x + 1*b01 * trr_60x + 6*b00 * trr_51x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500 + trr_62x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_01z * dm_kl_001 + trr_02z * dm_kl_002;
                    double dot_lkl_z_001 = trr_11z * dm_kl_001 + trr_12z * dm_kl_002;
                    double dot_lkl_z_002 = trr_21z * dm_kl_001 + trr_22z * dm_kl_002;
                    double dot_lkl_z_003 = trr_31z * dm_kl_001 + trr_32z * dm_kl_002;
                    double dot_lkl_z_004 = trr_41z * dm_kl_001 + trr_42z * dm_kl_002;
                    double dot_lkl_z_005 = trr_51z * dm_kl_001 + trr_52z * dm_kl_002;
                    double dot_lkl_z_006 = trr_61z * dm_kl_001 + trr_62z * dm_kl_002;
                    double dot_lkl_z_010 = wt * dm_kl_010 + trr_01z * dm_kl_011;
                    double dot_lkl_z_011 = trr_10z * dm_kl_010 + trr_11z * dm_kl_011;
                    double dot_lkl_z_012 = trr_20z * dm_kl_010 + trr_21z * dm_kl_011;
                    double dot_lkl_z_013 = trr_30z * dm_kl_010 + trr_31z * dm_kl_011;
                    double dot_lkl_z_014 = trr_40z * dm_kl_010 + trr_41z * dm_kl_011;
                    double dot_lkl_z_015 = trr_50z * dm_kl_010 + trr_51z * dm_kl_011;
                    double dot_lkl_z_016 = trr_60z * dm_kl_010 + trr_61z * dm_kl_011;
                    double dot_lkl_z_020 = wt * dm_kl_020;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020;
                    double dot_lkl_z_026 = trr_60z * dm_kl_020;
                    double dot_lkl_z_100 = wt * dm_kl_100 + trr_01z * dm_kl_101;
                    double dot_lkl_z_101 = trr_10z * dm_kl_100 + trr_11z * dm_kl_101;
                    double dot_lkl_z_102 = trr_20z * dm_kl_100 + trr_21z * dm_kl_101;
                    double dot_lkl_z_103 = trr_30z * dm_kl_100 + trr_31z * dm_kl_101;
                    double dot_lkl_z_104 = trr_40z * dm_kl_100 + trr_41z * dm_kl_101;
                    double dot_lkl_z_105 = trr_50z * dm_kl_100 + trr_51z * dm_kl_101;
                    double dot_lkl_z_106 = trr_60z * dm_kl_100 + trr_61z * dm_kl_101;
                    double dot_lkl_z_110 = wt * dm_kl_110;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110;
                    double dot_lkl_z_116 = trr_60z * dm_kl_110;
                    double dot_lkl_z_200 = wt * dm_kl_200;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200;
                    double dot_lkl_z_206 = trr_60z * dm_kl_200;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016 + trr_02y * dot_lkl_z_026;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015 + trr_12y * dot_lkl_z_025;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014 + trr_22y * dot_lkl_z_024;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013 + trr_32y * dot_lkl_z_023;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012 + trr_42y * dot_lkl_z_022;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011 + trr_52y * dot_lkl_z_021;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010 + trr_62y * dot_lkl_z_020;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106 + trr_01y * dot_lkl_z_116;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105 + trr_11y * dot_lkl_z_115;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104 + trr_21y * dot_lkl_z_114;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103 + trr_31y * dot_lkl_z_113;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102 + trr_41y * dot_lkl_z_112;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101 + trr_51y * dot_lkl_z_111;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100 + trr_61y * dot_lkl_z_110;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205;
                    double dot_lkl_y_206 = 1 * dot_lkl_z_206;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204;
                    double dot_lkl_y_215 = trr_10y * dot_lkl_z_205;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203;
                    double dot_lkl_y_224 = trr_20y * dot_lkl_z_204;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202;
                    double dot_lkl_y_233 = trr_30y * dot_lkl_z_203;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201;
                    double dot_lkl_y_242 = trr_40y * dot_lkl_z_202;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200;
                    double dot_lkl_y_251 = trr_50y * dot_lkl_z_201;
                    double dot_lkl_y_260 = trr_60y * dot_lkl_z_200;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106 + trr_02x * dot_lkl_y_206;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115 + trr_02x * dot_lkl_y_215;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124 + trr_02x * dot_lkl_y_224;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133 + trr_02x * dot_lkl_y_233;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142 + trr_02x * dot_lkl_y_242;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151 + trr_02x * dot_lkl_y_251;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160 + trr_02x * dot_lkl_y_260;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105 + trr_12x * dot_lkl_y_205;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114 + trr_12x * dot_lkl_y_214;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123 + trr_12x * dot_lkl_y_223;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132 + trr_12x * dot_lkl_y_232;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141 + trr_12x * dot_lkl_y_241;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150 + trr_12x * dot_lkl_y_250;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104 + trr_22x * dot_lkl_y_204;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113 + trr_22x * dot_lkl_y_213;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122 + trr_22x * dot_lkl_y_222;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131 + trr_22x * dot_lkl_y_231;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140 + trr_22x * dot_lkl_y_240;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103 + trr_32x * dot_lkl_y_203;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112 + trr_32x * dot_lkl_y_212;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121 + trr_32x * dot_lkl_y_221;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130 + trr_32x * dot_lkl_y_230;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102 + trr_42x * dot_lkl_y_202;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111 + trr_42x * dot_lkl_y_211;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120 + trr_42x * dot_lkl_y_220;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101 + trr_52x * dot_lkl_y_201;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110 + trr_52x * dot_lkl_y_210;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100 + trr_62x * dot_lkl_y_200;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+1, vj_kl_001);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_010);
        atomicAdd(vj2+kl_pair0+4, vj_kl_011);
        atomicAdd(vj2+kl_pair0+5, vj_kl_020);
        atomicAdd(vj2+kl_pair0+6, vj_kl_100);
        atomicAdd(vj2+kl_pair0+7, vj_kl_101);
        atomicAdd(vj2+kl_pair0+8, vj_kl_110);
        atomicAdd(vj2+kl_pair0+9, vj_kl_200);
    }
}
__global__
void rys_j_6_2_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_2_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_011 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+6];
        double dm_kl_020 = dm2[kl_pair0+7];
        double dm_kl_021 = dm2[kl_pair0+8];
        double dm_kl_030 = dm2[kl_pair0+9];
        double dm_kl_101 = dm2[kl_pair0+11];
        double dm_kl_102 = dm2[kl_pair0+12];
        double dm_kl_110 = dm2[kl_pair0+13];
        double dm_kl_111 = dm2[kl_pair0+14];
        double dm_kl_120 = dm2[kl_pair0+15];
        double dm_kl_200 = dm2[kl_pair0+16];
        double dm_kl_201 = dm2[kl_pair0+17];
        double dm_kl_210 = dm2[kl_pair0+18];
        double dm_kl_300 = dm2[kl_pair0+19];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_030 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_120 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_210 = 0;
        double vj_kl_300 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(5, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(5, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 5; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 5; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double trr_62z = cpz * trr_61z + 1*b01 * trr_60z + 6*b00 * trr_51z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2] + trr_62z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double trr_63z = cpz * trr_62z + 2*b01 * trr_61z + 6*b00 * trr_52z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2] + trr_63z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+9*TILE2] + trr_32z * dm_ij_cache[sh_ij+10*TILE2] + trr_42z * dm_ij_cache[sh_ij+11*TILE2] + trr_52z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+9*TILE2] + trr_33z * dm_ij_cache[sh_ij+10*TILE2] + trr_43z * dm_ij_cache[sh_ij+11*TILE2] + trr_53z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+14*TILE2] + trr_22z * dm_ij_cache[sh_ij+15*TILE2] + trr_32z * dm_ij_cache[sh_ij+16*TILE2] + trr_42z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+14*TILE2] + trr_23z * dm_ij_cache[sh_ij+15*TILE2] + trr_33z * dm_ij_cache[sh_ij+16*TILE2] + trr_43z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2] + trr_22z * dm_ij_cache[sh_ij+20*TILE2] + trr_32z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2] + trr_23z * dm_ij_cache[sh_ij+20*TILE2] + trr_33z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2] + trr_22z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2] + trr_23z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_062 = trr_02z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_063 = trr_03z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+30*TILE2] + trr_32z * dm_ij_cache[sh_ij+31*TILE2] + trr_42z * dm_ij_cache[sh_ij+32*TILE2] + trr_52z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+30*TILE2] + trr_33z * dm_ij_cache[sh_ij+31*TILE2] + trr_43z * dm_ij_cache[sh_ij+32*TILE2] + trr_53z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+35*TILE2] + trr_22z * dm_ij_cache[sh_ij+36*TILE2] + trr_32z * dm_ij_cache[sh_ij+37*TILE2] + trr_42z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+35*TILE2] + trr_23z * dm_ij_cache[sh_ij+36*TILE2] + trr_33z * dm_ij_cache[sh_ij+37*TILE2] + trr_43z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+39*TILE2] + trr_12z * dm_ij_cache[sh_ij+40*TILE2] + trr_22z * dm_ij_cache[sh_ij+41*TILE2] + trr_32z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+39*TILE2] + trr_13z * dm_ij_cache[sh_ij+40*TILE2] + trr_23z * dm_ij_cache[sh_ij+41*TILE2] + trr_33z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2] + trr_22z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2] + trr_23z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_152 = trr_02z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_153 = trr_03z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+50*TILE2] + trr_22z * dm_ij_cache[sh_ij+51*TILE2] + trr_32z * dm_ij_cache[sh_ij+52*TILE2] + trr_42z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+50*TILE2] + trr_23z * dm_ij_cache[sh_ij+51*TILE2] + trr_33z * dm_ij_cache[sh_ij+52*TILE2] + trr_43z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+54*TILE2] + trr_12z * dm_ij_cache[sh_ij+55*TILE2] + trr_22z * dm_ij_cache[sh_ij+56*TILE2] + trr_32z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+54*TILE2] + trr_13z * dm_ij_cache[sh_ij+55*TILE2] + trr_23z * dm_ij_cache[sh_ij+56*TILE2] + trr_33z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+58*TILE2] + trr_12z * dm_ij_cache[sh_ij+59*TILE2] + trr_22z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+58*TILE2] + trr_13z * dm_ij_cache[sh_ij+59*TILE2] + trr_23z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+61*TILE2] + trr_12z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+61*TILE2] + trr_13z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_242 = trr_02z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_243 = trr_03z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+64*TILE2] + trr_12z * dm_ij_cache[sh_ij+65*TILE2] + trr_22z * dm_ij_cache[sh_ij+66*TILE2] + trr_32z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+64*TILE2] + trr_13z * dm_ij_cache[sh_ij+65*TILE2] + trr_23z * dm_ij_cache[sh_ij+66*TILE2] + trr_33z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+68*TILE2] + trr_12z * dm_ij_cache[sh_ij+69*TILE2] + trr_22z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+68*TILE2] + trr_13z * dm_ij_cache[sh_ij+69*TILE2] + trr_23z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+71*TILE2] + trr_12z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+71*TILE2] + trr_13z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_332 = trr_02z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_333 = trr_03z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+74*TILE2] + trr_12z * dm_ij_cache[sh_ij+75*TILE2] + trr_22z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+74*TILE2] + trr_13z * dm_ij_cache[sh_ij+75*TILE2] + trr_23z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+77*TILE2] + trr_12z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+77*TILE2] + trr_13z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_422 = trr_02z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_423 = trr_03z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+80*TILE2] + trr_12z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+80*TILE2] + trr_13z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_512 = trr_02z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_513 = trr_03z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_602 = trr_02z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_603 = trr_03z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052 + trr_60y * dot_lij_z_062;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053 + trr_60y * dot_lij_z_063;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051 + trr_61y * dot_lij_z_061;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052 + trr_61y * dot_lij_z_062;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double trr_62y = cpy * trr_61y + 1*b01 * trr_60y + 6*b00 * trr_51y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050 + trr_62y * dot_lij_z_060;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051 + trr_62y * dot_lij_z_061;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double trr_63y = cpy * trr_62y + 2*b01 * trr_61y + 6*b00 * trr_52y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050 + trr_63y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142 + trr_50y * dot_lij_z_152;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143 + trr_50y * dot_lij_z_153;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141 + trr_51y * dot_lij_z_151;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142 + trr_51y * dot_lij_z_152;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140 + trr_52y * dot_lij_z_150;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141 + trr_52y * dot_lij_z_151;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140 + trr_53y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232 + trr_40y * dot_lij_z_242;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233 + trr_40y * dot_lij_z_243;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231 + trr_41y * dot_lij_z_241;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232 + trr_41y * dot_lij_z_242;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230 + trr_42y * dot_lij_z_240;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231 + trr_42y * dot_lij_z_241;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230 + trr_43y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322 + trr_30y * dot_lij_z_332;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323 + trr_30y * dot_lij_z_333;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321 + trr_31y * dot_lij_z_331;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322 + trr_31y * dot_lij_z_332;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320 + trr_32y * dot_lij_z_330;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321 + trr_32y * dot_lij_z_331;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320 + trr_33y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412 + trr_20y * dot_lij_z_422;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413 + trr_20y * dot_lij_z_423;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411 + trr_21y * dot_lij_z_421;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412 + trr_21y * dot_lij_z_422;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410 + trr_22y * dot_lij_z_420;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411 + trr_22y * dot_lij_z_421;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410 + trr_23y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_502 = 1 * dot_lij_z_502 + trr_10y * dot_lij_z_512;
                    double dot_lij_y_503 = 1 * dot_lij_z_503 + trr_10y * dot_lij_z_513;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501 + trr_11y * dot_lij_z_511;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502 + trr_11y * dot_lij_z_512;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500 + trr_12y * dot_lij_z_510;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501 + trr_12y * dot_lij_z_511;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500 + trr_13y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_602 = 1 * dot_lij_z_602;
                    double dot_lij_y_603 = 1 * dot_lij_z_603;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double dot_lij_y_611 = trr_01y * dot_lij_z_601;
                    double dot_lij_y_612 = trr_01y * dot_lij_z_602;
                    double dot_lij_y_620 = trr_02y * dot_lij_z_600;
                    double dot_lij_y_621 = trr_02y * dot_lij_z_601;
                    double dot_lij_y_630 = trr_03y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502 + trr_60x * dot_lij_y_602;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503 + trr_60x * dot_lij_y_603;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511 + trr_60x * dot_lij_y_611;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512 + trr_60x * dot_lij_y_612;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520 + trr_60x * dot_lij_y_620;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521 + trr_60x * dot_lij_y_621;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530 + trr_60x * dot_lij_y_630;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501 + trr_61x * dot_lij_y_601;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502 + trr_61x * dot_lij_y_602;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510 + trr_61x * dot_lij_y_610;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511 + trr_61x * dot_lij_y_611;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520 + trr_61x * dot_lij_y_620;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    double trr_62x = cpx * trr_61x + 1*b01 * trr_60x + 6*b00 * trr_51x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500 + trr_62x * dot_lij_y_600;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501 + trr_62x * dot_lij_y_601;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510 + trr_62x * dot_lij_y_610;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    double trr_63x = cpx * trr_62x + 2*b01 * trr_61x + 6*b00 * trr_52x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500 + trr_63x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003;
                    double dot_lkl_z_005 = trr_52z * dm_kl_002 + trr_53z * dm_kl_003;
                    double dot_lkl_z_006 = trr_62z * dm_kl_002 + trr_63z * dm_kl_003;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012;
                    double dot_lkl_z_015 = trr_51z * dm_kl_011 + trr_52z * dm_kl_012;
                    double dot_lkl_z_016 = trr_61z * dm_kl_011 + trr_62z * dm_kl_012;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020 + trr_51z * dm_kl_021;
                    double dot_lkl_z_026 = trr_60z * dm_kl_020 + trr_61z * dm_kl_021;
                    double dot_lkl_z_030 = wt * dm_kl_030;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030;
                    double dot_lkl_z_036 = trr_60z * dm_kl_030;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102;
                    double dot_lkl_z_105 = trr_51z * dm_kl_101 + trr_52z * dm_kl_102;
                    double dot_lkl_z_106 = trr_61z * dm_kl_101 + trr_62z * dm_kl_102;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110 + trr_51z * dm_kl_111;
                    double dot_lkl_z_116 = trr_60z * dm_kl_110 + trr_61z * dm_kl_111;
                    double dot_lkl_z_120 = wt * dm_kl_120;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120;
                    double dot_lkl_z_126 = trr_60z * dm_kl_120;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200 + trr_51z * dm_kl_201;
                    double dot_lkl_z_206 = trr_60z * dm_kl_200 + trr_61z * dm_kl_201;
                    double dot_lkl_z_210 = wt * dm_kl_210;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210;
                    double dot_lkl_z_216 = trr_60z * dm_kl_210;
                    double dot_lkl_z_300 = wt * dm_kl_300;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300;
                    double dot_lkl_z_306 = trr_60z * dm_kl_300;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016 + trr_02y * dot_lkl_z_026 + trr_03y * dot_lkl_z_036;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015 + trr_12y * dot_lkl_z_025 + trr_13y * dot_lkl_z_035;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014 + trr_22y * dot_lkl_z_024 + trr_23y * dot_lkl_z_034;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013 + trr_32y * dot_lkl_z_023 + trr_33y * dot_lkl_z_033;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012 + trr_42y * dot_lkl_z_022 + trr_43y * dot_lkl_z_032;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011 + trr_52y * dot_lkl_z_021 + trr_53y * dot_lkl_z_031;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010 + trr_62y * dot_lkl_z_020 + trr_63y * dot_lkl_z_030;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106 + trr_01y * dot_lkl_z_116 + trr_02y * dot_lkl_z_126;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105 + trr_11y * dot_lkl_z_115 + trr_12y * dot_lkl_z_125;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104 + trr_21y * dot_lkl_z_114 + trr_22y * dot_lkl_z_124;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103 + trr_31y * dot_lkl_z_113 + trr_32y * dot_lkl_z_123;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102 + trr_41y * dot_lkl_z_112 + trr_42y * dot_lkl_z_122;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101 + trr_51y * dot_lkl_z_111 + trr_52y * dot_lkl_z_121;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100 + trr_61y * dot_lkl_z_110 + trr_62y * dot_lkl_z_120;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215;
                    double dot_lkl_y_206 = 1 * dot_lkl_z_206 + trr_01y * dot_lkl_z_216;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214;
                    double dot_lkl_y_215 = trr_10y * dot_lkl_z_205 + trr_11y * dot_lkl_z_215;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213;
                    double dot_lkl_y_224 = trr_20y * dot_lkl_z_204 + trr_21y * dot_lkl_z_214;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212;
                    double dot_lkl_y_233 = trr_30y * dot_lkl_z_203 + trr_31y * dot_lkl_z_213;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211;
                    double dot_lkl_y_242 = trr_40y * dot_lkl_z_202 + trr_41y * dot_lkl_z_212;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210;
                    double dot_lkl_y_251 = trr_50y * dot_lkl_z_201 + trr_51y * dot_lkl_z_211;
                    double dot_lkl_y_260 = trr_60y * dot_lkl_z_200 + trr_61y * dot_lkl_z_210;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305;
                    double dot_lkl_y_306 = 1 * dot_lkl_z_306;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304;
                    double dot_lkl_y_315 = trr_10y * dot_lkl_z_305;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303;
                    double dot_lkl_y_324 = trr_20y * dot_lkl_z_304;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302;
                    double dot_lkl_y_333 = trr_30y * dot_lkl_z_303;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301;
                    double dot_lkl_y_342 = trr_40y * dot_lkl_z_302;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300;
                    double dot_lkl_y_351 = trr_50y * dot_lkl_z_301;
                    double dot_lkl_y_360 = trr_60y * dot_lkl_z_300;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106 + trr_02x * dot_lkl_y_206 + trr_03x * dot_lkl_y_306;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115 + trr_02x * dot_lkl_y_215 + trr_03x * dot_lkl_y_315;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124 + trr_02x * dot_lkl_y_224 + trr_03x * dot_lkl_y_324;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133 + trr_02x * dot_lkl_y_233 + trr_03x * dot_lkl_y_333;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142 + trr_02x * dot_lkl_y_242 + trr_03x * dot_lkl_y_342;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151 + trr_02x * dot_lkl_y_251 + trr_03x * dot_lkl_y_351;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160 + trr_02x * dot_lkl_y_260 + trr_03x * dot_lkl_y_360;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105 + trr_12x * dot_lkl_y_205 + trr_13x * dot_lkl_y_305;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114 + trr_12x * dot_lkl_y_214 + trr_13x * dot_lkl_y_314;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123 + trr_12x * dot_lkl_y_223 + trr_13x * dot_lkl_y_323;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132 + trr_12x * dot_lkl_y_232 + trr_13x * dot_lkl_y_332;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141 + trr_12x * dot_lkl_y_241 + trr_13x * dot_lkl_y_341;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150 + trr_12x * dot_lkl_y_250 + trr_13x * dot_lkl_y_350;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104 + trr_22x * dot_lkl_y_204 + trr_23x * dot_lkl_y_304;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113 + trr_22x * dot_lkl_y_213 + trr_23x * dot_lkl_y_313;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122 + trr_22x * dot_lkl_y_222 + trr_23x * dot_lkl_y_322;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131 + trr_22x * dot_lkl_y_231 + trr_23x * dot_lkl_y_331;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140 + trr_22x * dot_lkl_y_240 + trr_23x * dot_lkl_y_340;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103 + trr_32x * dot_lkl_y_203 + trr_33x * dot_lkl_y_303;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112 + trr_32x * dot_lkl_y_212 + trr_33x * dot_lkl_y_312;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121 + trr_32x * dot_lkl_y_221 + trr_33x * dot_lkl_y_321;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130 + trr_32x * dot_lkl_y_230 + trr_33x * dot_lkl_y_330;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102 + trr_42x * dot_lkl_y_202 + trr_43x * dot_lkl_y_302;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111 + trr_42x * dot_lkl_y_211 + trr_43x * dot_lkl_y_311;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120 + trr_42x * dot_lkl_y_220 + trr_43x * dot_lkl_y_320;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101 + trr_52x * dot_lkl_y_201 + trr_53x * dot_lkl_y_301;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110 + trr_52x * dot_lkl_y_210 + trr_53x * dot_lkl_y_310;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100 + trr_62x * dot_lkl_y_200 + trr_63x * dot_lkl_y_300;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+5, vj_kl_011);
        atomicAdd(vj2+kl_pair0+6, vj_kl_012);
        atomicAdd(vj2+kl_pair0+7, vj_kl_020);
        atomicAdd(vj2+kl_pair0+8, vj_kl_021);
        atomicAdd(vj2+kl_pair0+9, vj_kl_030);
        atomicAdd(vj2+kl_pair0+11, vj_kl_101);
        atomicAdd(vj2+kl_pair0+12, vj_kl_102);
        atomicAdd(vj2+kl_pair0+13, vj_kl_110);
        atomicAdd(vj2+kl_pair0+14, vj_kl_111);
        atomicAdd(vj2+kl_pair0+15, vj_kl_120);
        atomicAdd(vj2+kl_pair0+16, vj_kl_200);
        atomicAdd(vj2+kl_pair0+17, vj_kl_201);
        atomicAdd(vj2+kl_pair0+18, vj_kl_210);
        atomicAdd(vj2+kl_pair0+19, vj_kl_300);
    }
}
__global__
void rys_j_6_3_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_3_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_002 = dm2[kl_pair0+2];
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_011 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+7];
        double dm_kl_013 = dm2[kl_pair0+8];
        double dm_kl_020 = dm2[kl_pair0+9];
        double dm_kl_021 = dm2[kl_pair0+10];
        double dm_kl_022 = dm2[kl_pair0+11];
        double dm_kl_030 = dm2[kl_pair0+12];
        double dm_kl_031 = dm2[kl_pair0+13];
        double dm_kl_040 = dm2[kl_pair0+14];
        double dm_kl_101 = dm2[kl_pair0+16];
        double dm_kl_102 = dm2[kl_pair0+17];
        double dm_kl_103 = dm2[kl_pair0+18];
        double dm_kl_110 = dm2[kl_pair0+19];
        double dm_kl_111 = dm2[kl_pair0+20];
        double dm_kl_112 = dm2[kl_pair0+21];
        double dm_kl_120 = dm2[kl_pair0+22];
        double dm_kl_121 = dm2[kl_pair0+23];
        double dm_kl_130 = dm2[kl_pair0+24];
        double dm_kl_200 = dm2[kl_pair0+25];
        double dm_kl_201 = dm2[kl_pair0+26];
        double dm_kl_202 = dm2[kl_pair0+27];
        double dm_kl_210 = dm2[kl_pair0+28];
        double dm_kl_211 = dm2[kl_pair0+29];
        double dm_kl_220 = dm2[kl_pair0+30];
        double dm_kl_300 = dm2[kl_pair0+31];
        double dm_kl_301 = dm2[kl_pair0+32];
        double dm_kl_310 = dm2[kl_pair0+33];
        double dm_kl_400 = dm2[kl_pair0+34];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_002 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_011 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_020 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_040 = 0;
        double vj_kl_101 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_110 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_130 = 0;
        double vj_kl_200 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_220 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_310 = 0;
        double vj_kl_400 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(6, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(6, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 6; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 6; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double trr_62z = cpz * trr_61z + 1*b01 * trr_60z + 6*b00 * trr_51z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2] + trr_62z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double trr_63z = cpz * trr_62z + 2*b01 * trr_61z + 6*b00 * trr_52z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2] + trr_63z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double trr_64z = cpz * trr_63z + 3*b01 * trr_62z + 6*b00 * trr_53z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2] + trr_64z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+9*TILE2] + trr_32z * dm_ij_cache[sh_ij+10*TILE2] + trr_42z * dm_ij_cache[sh_ij+11*TILE2] + trr_52z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+9*TILE2] + trr_33z * dm_ij_cache[sh_ij+10*TILE2] + trr_43z * dm_ij_cache[sh_ij+11*TILE2] + trr_53z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+9*TILE2] + trr_34z * dm_ij_cache[sh_ij+10*TILE2] + trr_44z * dm_ij_cache[sh_ij+11*TILE2] + trr_54z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+14*TILE2] + trr_22z * dm_ij_cache[sh_ij+15*TILE2] + trr_32z * dm_ij_cache[sh_ij+16*TILE2] + trr_42z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+14*TILE2] + trr_23z * dm_ij_cache[sh_ij+15*TILE2] + trr_33z * dm_ij_cache[sh_ij+16*TILE2] + trr_43z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+14*TILE2] + trr_24z * dm_ij_cache[sh_ij+15*TILE2] + trr_34z * dm_ij_cache[sh_ij+16*TILE2] + trr_44z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2] + trr_22z * dm_ij_cache[sh_ij+20*TILE2] + trr_32z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2] + trr_23z * dm_ij_cache[sh_ij+20*TILE2] + trr_33z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2] + trr_24z * dm_ij_cache[sh_ij+20*TILE2] + trr_34z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2] + trr_22z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2] + trr_23z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2] + trr_24z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_062 = trr_02z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_063 = trr_03z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_064 = trr_04z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+30*TILE2] + trr_32z * dm_ij_cache[sh_ij+31*TILE2] + trr_42z * dm_ij_cache[sh_ij+32*TILE2] + trr_52z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+30*TILE2] + trr_33z * dm_ij_cache[sh_ij+31*TILE2] + trr_43z * dm_ij_cache[sh_ij+32*TILE2] + trr_53z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+30*TILE2] + trr_34z * dm_ij_cache[sh_ij+31*TILE2] + trr_44z * dm_ij_cache[sh_ij+32*TILE2] + trr_54z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+35*TILE2] + trr_22z * dm_ij_cache[sh_ij+36*TILE2] + trr_32z * dm_ij_cache[sh_ij+37*TILE2] + trr_42z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+35*TILE2] + trr_23z * dm_ij_cache[sh_ij+36*TILE2] + trr_33z * dm_ij_cache[sh_ij+37*TILE2] + trr_43z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+35*TILE2] + trr_24z * dm_ij_cache[sh_ij+36*TILE2] + trr_34z * dm_ij_cache[sh_ij+37*TILE2] + trr_44z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+39*TILE2] + trr_12z * dm_ij_cache[sh_ij+40*TILE2] + trr_22z * dm_ij_cache[sh_ij+41*TILE2] + trr_32z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+39*TILE2] + trr_13z * dm_ij_cache[sh_ij+40*TILE2] + trr_23z * dm_ij_cache[sh_ij+41*TILE2] + trr_33z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+39*TILE2] + trr_14z * dm_ij_cache[sh_ij+40*TILE2] + trr_24z * dm_ij_cache[sh_ij+41*TILE2] + trr_34z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2] + trr_22z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2] + trr_23z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2] + trr_24z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_152 = trr_02z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_153 = trr_03z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_154 = trr_04z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+50*TILE2] + trr_22z * dm_ij_cache[sh_ij+51*TILE2] + trr_32z * dm_ij_cache[sh_ij+52*TILE2] + trr_42z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+50*TILE2] + trr_23z * dm_ij_cache[sh_ij+51*TILE2] + trr_33z * dm_ij_cache[sh_ij+52*TILE2] + trr_43z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+50*TILE2] + trr_24z * dm_ij_cache[sh_ij+51*TILE2] + trr_34z * dm_ij_cache[sh_ij+52*TILE2] + trr_44z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+54*TILE2] + trr_12z * dm_ij_cache[sh_ij+55*TILE2] + trr_22z * dm_ij_cache[sh_ij+56*TILE2] + trr_32z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+54*TILE2] + trr_13z * dm_ij_cache[sh_ij+55*TILE2] + trr_23z * dm_ij_cache[sh_ij+56*TILE2] + trr_33z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+54*TILE2] + trr_14z * dm_ij_cache[sh_ij+55*TILE2] + trr_24z * dm_ij_cache[sh_ij+56*TILE2] + trr_34z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+58*TILE2] + trr_12z * dm_ij_cache[sh_ij+59*TILE2] + trr_22z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+58*TILE2] + trr_13z * dm_ij_cache[sh_ij+59*TILE2] + trr_23z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+58*TILE2] + trr_14z * dm_ij_cache[sh_ij+59*TILE2] + trr_24z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+61*TILE2] + trr_12z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+61*TILE2] + trr_13z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+61*TILE2] + trr_14z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_242 = trr_02z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_243 = trr_03z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_244 = trr_04z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+64*TILE2] + trr_12z * dm_ij_cache[sh_ij+65*TILE2] + trr_22z * dm_ij_cache[sh_ij+66*TILE2] + trr_32z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+64*TILE2] + trr_13z * dm_ij_cache[sh_ij+65*TILE2] + trr_23z * dm_ij_cache[sh_ij+66*TILE2] + trr_33z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+64*TILE2] + trr_14z * dm_ij_cache[sh_ij+65*TILE2] + trr_24z * dm_ij_cache[sh_ij+66*TILE2] + trr_34z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+68*TILE2] + trr_12z * dm_ij_cache[sh_ij+69*TILE2] + trr_22z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+68*TILE2] + trr_13z * dm_ij_cache[sh_ij+69*TILE2] + trr_23z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+68*TILE2] + trr_14z * dm_ij_cache[sh_ij+69*TILE2] + trr_24z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+71*TILE2] + trr_12z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+71*TILE2] + trr_13z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+71*TILE2] + trr_14z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_332 = trr_02z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_333 = trr_03z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_334 = trr_04z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+74*TILE2] + trr_12z * dm_ij_cache[sh_ij+75*TILE2] + trr_22z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+74*TILE2] + trr_13z * dm_ij_cache[sh_ij+75*TILE2] + trr_23z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+74*TILE2] + trr_14z * dm_ij_cache[sh_ij+75*TILE2] + trr_24z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+77*TILE2] + trr_12z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+77*TILE2] + trr_13z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+77*TILE2] + trr_14z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_422 = trr_02z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_423 = trr_03z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_424 = trr_04z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+80*TILE2] + trr_12z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+80*TILE2] + trr_13z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+80*TILE2] + trr_14z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_512 = trr_02z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_513 = trr_03z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_514 = trr_04z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_602 = trr_02z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_603 = trr_03z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_604 = trr_04z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052 + trr_60y * dot_lij_z_062;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053 + trr_60y * dot_lij_z_063;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054 + trr_60y * dot_lij_z_064;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051 + trr_61y * dot_lij_z_061;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052 + trr_61y * dot_lij_z_062;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053 + trr_61y * dot_lij_z_063;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double trr_62y = cpy * trr_61y + 1*b01 * trr_60y + 6*b00 * trr_51y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050 + trr_62y * dot_lij_z_060;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051 + trr_62y * dot_lij_z_061;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052 + trr_62y * dot_lij_z_062;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double trr_63y = cpy * trr_62y + 2*b01 * trr_61y + 6*b00 * trr_52y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050 + trr_63y * dot_lij_z_060;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051 + trr_63y * dot_lij_z_061;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double trr_64y = cpy * trr_63y + 3*b01 * trr_62y + 6*b00 * trr_53y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050 + trr_64y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142 + trr_50y * dot_lij_z_152;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143 + trr_50y * dot_lij_z_153;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144 + trr_50y * dot_lij_z_154;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141 + trr_51y * dot_lij_z_151;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142 + trr_51y * dot_lij_z_152;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143 + trr_51y * dot_lij_z_153;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140 + trr_52y * dot_lij_z_150;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141 + trr_52y * dot_lij_z_151;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142 + trr_52y * dot_lij_z_152;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140 + trr_53y * dot_lij_z_150;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141 + trr_53y * dot_lij_z_151;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140 + trr_54y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232 + trr_40y * dot_lij_z_242;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233 + trr_40y * dot_lij_z_243;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234 + trr_40y * dot_lij_z_244;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231 + trr_41y * dot_lij_z_241;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232 + trr_41y * dot_lij_z_242;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233 + trr_41y * dot_lij_z_243;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230 + trr_42y * dot_lij_z_240;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231 + trr_42y * dot_lij_z_241;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232 + trr_42y * dot_lij_z_242;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230 + trr_43y * dot_lij_z_240;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231 + trr_43y * dot_lij_z_241;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230 + trr_44y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322 + trr_30y * dot_lij_z_332;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323 + trr_30y * dot_lij_z_333;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324 + trr_30y * dot_lij_z_334;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321 + trr_31y * dot_lij_z_331;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322 + trr_31y * dot_lij_z_332;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323 + trr_31y * dot_lij_z_333;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320 + trr_32y * dot_lij_z_330;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321 + trr_32y * dot_lij_z_331;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322 + trr_32y * dot_lij_z_332;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320 + trr_33y * dot_lij_z_330;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321 + trr_33y * dot_lij_z_331;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320 + trr_34y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412 + trr_20y * dot_lij_z_422;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413 + trr_20y * dot_lij_z_423;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414 + trr_20y * dot_lij_z_424;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411 + trr_21y * dot_lij_z_421;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412 + trr_21y * dot_lij_z_422;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413 + trr_21y * dot_lij_z_423;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410 + trr_22y * dot_lij_z_420;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411 + trr_22y * dot_lij_z_421;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412 + trr_22y * dot_lij_z_422;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410 + trr_23y * dot_lij_z_420;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411 + trr_23y * dot_lij_z_421;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410 + trr_24y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_502 = 1 * dot_lij_z_502 + trr_10y * dot_lij_z_512;
                    double dot_lij_y_503 = 1 * dot_lij_z_503 + trr_10y * dot_lij_z_513;
                    double dot_lij_y_504 = 1 * dot_lij_z_504 + trr_10y * dot_lij_z_514;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501 + trr_11y * dot_lij_z_511;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502 + trr_11y * dot_lij_z_512;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503 + trr_11y * dot_lij_z_513;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500 + trr_12y * dot_lij_z_510;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501 + trr_12y * dot_lij_z_511;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502 + trr_12y * dot_lij_z_512;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500 + trr_13y * dot_lij_z_510;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501 + trr_13y * dot_lij_z_511;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500 + trr_14y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_602 = 1 * dot_lij_z_602;
                    double dot_lij_y_603 = 1 * dot_lij_z_603;
                    double dot_lij_y_604 = 1 * dot_lij_z_604;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double dot_lij_y_611 = trr_01y * dot_lij_z_601;
                    double dot_lij_y_612 = trr_01y * dot_lij_z_602;
                    double dot_lij_y_613 = trr_01y * dot_lij_z_603;
                    double dot_lij_y_620 = trr_02y * dot_lij_z_600;
                    double dot_lij_y_621 = trr_02y * dot_lij_z_601;
                    double dot_lij_y_622 = trr_02y * dot_lij_z_602;
                    double dot_lij_y_630 = trr_03y * dot_lij_z_600;
                    double dot_lij_y_631 = trr_03y * dot_lij_z_601;
                    double dot_lij_y_640 = trr_04y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_002 += fac * dot_lij_y_002 + trr_10x * dot_lij_y_102 + trr_20x * dot_lij_y_202 + trr_30x * dot_lij_y_302 + trr_40x * dot_lij_y_402 + trr_50x * dot_lij_y_502 + trr_60x * dot_lij_y_602;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503 + trr_60x * dot_lij_y_603;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504 + trr_60x * dot_lij_y_604;
                    vj_kl_011 += fac * dot_lij_y_011 + trr_10x * dot_lij_y_111 + trr_20x * dot_lij_y_211 + trr_30x * dot_lij_y_311 + trr_40x * dot_lij_y_411 + trr_50x * dot_lij_y_511 + trr_60x * dot_lij_y_611;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512 + trr_60x * dot_lij_y_612;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513 + trr_60x * dot_lij_y_613;
                    vj_kl_020 += fac * dot_lij_y_020 + trr_10x * dot_lij_y_120 + trr_20x * dot_lij_y_220 + trr_30x * dot_lij_y_320 + trr_40x * dot_lij_y_420 + trr_50x * dot_lij_y_520 + trr_60x * dot_lij_y_620;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521 + trr_60x * dot_lij_y_621;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522 + trr_60x * dot_lij_y_622;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530 + trr_60x * dot_lij_y_630;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531 + trr_60x * dot_lij_y_631;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540 + trr_60x * dot_lij_y_640;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_101 += trr_01x * dot_lij_y_001 + trr_11x * dot_lij_y_101 + trr_21x * dot_lij_y_201 + trr_31x * dot_lij_y_301 + trr_41x * dot_lij_y_401 + trr_51x * dot_lij_y_501 + trr_61x * dot_lij_y_601;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502 + trr_61x * dot_lij_y_602;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503 + trr_61x * dot_lij_y_603;
                    vj_kl_110 += trr_01x * dot_lij_y_010 + trr_11x * dot_lij_y_110 + trr_21x * dot_lij_y_210 + trr_31x * dot_lij_y_310 + trr_41x * dot_lij_y_410 + trr_51x * dot_lij_y_510 + trr_61x * dot_lij_y_610;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511 + trr_61x * dot_lij_y_611;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512 + trr_61x * dot_lij_y_612;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520 + trr_61x * dot_lij_y_620;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521 + trr_61x * dot_lij_y_621;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530 + trr_61x * dot_lij_y_630;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    double trr_62x = cpx * trr_61x + 1*b01 * trr_60x + 6*b00 * trr_51x;
                    vj_kl_200 += trr_02x * dot_lij_y_000 + trr_12x * dot_lij_y_100 + trr_22x * dot_lij_y_200 + trr_32x * dot_lij_y_300 + trr_42x * dot_lij_y_400 + trr_52x * dot_lij_y_500 + trr_62x * dot_lij_y_600;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501 + trr_62x * dot_lij_y_601;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502 + trr_62x * dot_lij_y_602;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510 + trr_62x * dot_lij_y_610;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511 + trr_62x * dot_lij_y_611;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520 + trr_62x * dot_lij_y_620;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    double trr_63x = cpx * trr_62x + 2*b01 * trr_61x + 6*b00 * trr_52x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500 + trr_63x * dot_lij_y_600;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501 + trr_63x * dot_lij_y_601;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510 + trr_63x * dot_lij_y_610;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    double trr_64x = cpx * trr_63x + 3*b01 * trr_62x + 6*b00 * trr_53x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500 + trr_64x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_02z * dm_kl_002 + trr_03z * dm_kl_003 + trr_04z * dm_kl_004;
                    double dot_lkl_z_001 = trr_12z * dm_kl_002 + trr_13z * dm_kl_003 + trr_14z * dm_kl_004;
                    double dot_lkl_z_002 = trr_22z * dm_kl_002 + trr_23z * dm_kl_003 + trr_24z * dm_kl_004;
                    double dot_lkl_z_003 = trr_32z * dm_kl_002 + trr_33z * dm_kl_003 + trr_34z * dm_kl_004;
                    double dot_lkl_z_004 = trr_42z * dm_kl_002 + trr_43z * dm_kl_003 + trr_44z * dm_kl_004;
                    double dot_lkl_z_005 = trr_52z * dm_kl_002 + trr_53z * dm_kl_003 + trr_54z * dm_kl_004;
                    double dot_lkl_z_006 = trr_62z * dm_kl_002 + trr_63z * dm_kl_003 + trr_64z * dm_kl_004;
                    double dot_lkl_z_010 = trr_01z * dm_kl_011 + trr_02z * dm_kl_012 + trr_03z * dm_kl_013;
                    double dot_lkl_z_011 = trr_11z * dm_kl_011 + trr_12z * dm_kl_012 + trr_13z * dm_kl_013;
                    double dot_lkl_z_012 = trr_21z * dm_kl_011 + trr_22z * dm_kl_012 + trr_23z * dm_kl_013;
                    double dot_lkl_z_013 = trr_31z * dm_kl_011 + trr_32z * dm_kl_012 + trr_33z * dm_kl_013;
                    double dot_lkl_z_014 = trr_41z * dm_kl_011 + trr_42z * dm_kl_012 + trr_43z * dm_kl_013;
                    double dot_lkl_z_015 = trr_51z * dm_kl_011 + trr_52z * dm_kl_012 + trr_53z * dm_kl_013;
                    double dot_lkl_z_016 = trr_61z * dm_kl_011 + trr_62z * dm_kl_012 + trr_63z * dm_kl_013;
                    double dot_lkl_z_020 = wt * dm_kl_020 + trr_01z * dm_kl_021 + trr_02z * dm_kl_022;
                    double dot_lkl_z_021 = trr_10z * dm_kl_020 + trr_11z * dm_kl_021 + trr_12z * dm_kl_022;
                    double dot_lkl_z_022 = trr_20z * dm_kl_020 + trr_21z * dm_kl_021 + trr_22z * dm_kl_022;
                    double dot_lkl_z_023 = trr_30z * dm_kl_020 + trr_31z * dm_kl_021 + trr_32z * dm_kl_022;
                    double dot_lkl_z_024 = trr_40z * dm_kl_020 + trr_41z * dm_kl_021 + trr_42z * dm_kl_022;
                    double dot_lkl_z_025 = trr_50z * dm_kl_020 + trr_51z * dm_kl_021 + trr_52z * dm_kl_022;
                    double dot_lkl_z_026 = trr_60z * dm_kl_020 + trr_61z * dm_kl_021 + trr_62z * dm_kl_022;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031;
                    double dot_lkl_z_036 = trr_60z * dm_kl_030 + trr_61z * dm_kl_031;
                    double dot_lkl_z_040 = wt * dm_kl_040;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040;
                    double dot_lkl_z_046 = trr_60z * dm_kl_040;
                    double dot_lkl_z_100 = trr_01z * dm_kl_101 + trr_02z * dm_kl_102 + trr_03z * dm_kl_103;
                    double dot_lkl_z_101 = trr_11z * dm_kl_101 + trr_12z * dm_kl_102 + trr_13z * dm_kl_103;
                    double dot_lkl_z_102 = trr_21z * dm_kl_101 + trr_22z * dm_kl_102 + trr_23z * dm_kl_103;
                    double dot_lkl_z_103 = trr_31z * dm_kl_101 + trr_32z * dm_kl_102 + trr_33z * dm_kl_103;
                    double dot_lkl_z_104 = trr_41z * dm_kl_101 + trr_42z * dm_kl_102 + trr_43z * dm_kl_103;
                    double dot_lkl_z_105 = trr_51z * dm_kl_101 + trr_52z * dm_kl_102 + trr_53z * dm_kl_103;
                    double dot_lkl_z_106 = trr_61z * dm_kl_101 + trr_62z * dm_kl_102 + trr_63z * dm_kl_103;
                    double dot_lkl_z_110 = wt * dm_kl_110 + trr_01z * dm_kl_111 + trr_02z * dm_kl_112;
                    double dot_lkl_z_111 = trr_10z * dm_kl_110 + trr_11z * dm_kl_111 + trr_12z * dm_kl_112;
                    double dot_lkl_z_112 = trr_20z * dm_kl_110 + trr_21z * dm_kl_111 + trr_22z * dm_kl_112;
                    double dot_lkl_z_113 = trr_30z * dm_kl_110 + trr_31z * dm_kl_111 + trr_32z * dm_kl_112;
                    double dot_lkl_z_114 = trr_40z * dm_kl_110 + trr_41z * dm_kl_111 + trr_42z * dm_kl_112;
                    double dot_lkl_z_115 = trr_50z * dm_kl_110 + trr_51z * dm_kl_111 + trr_52z * dm_kl_112;
                    double dot_lkl_z_116 = trr_60z * dm_kl_110 + trr_61z * dm_kl_111 + trr_62z * dm_kl_112;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121;
                    double dot_lkl_z_126 = trr_60z * dm_kl_120 + trr_61z * dm_kl_121;
                    double dot_lkl_z_130 = wt * dm_kl_130;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130;
                    double dot_lkl_z_136 = trr_60z * dm_kl_130;
                    double dot_lkl_z_200 = wt * dm_kl_200 + trr_01z * dm_kl_201 + trr_02z * dm_kl_202;
                    double dot_lkl_z_201 = trr_10z * dm_kl_200 + trr_11z * dm_kl_201 + trr_12z * dm_kl_202;
                    double dot_lkl_z_202 = trr_20z * dm_kl_200 + trr_21z * dm_kl_201 + trr_22z * dm_kl_202;
                    double dot_lkl_z_203 = trr_30z * dm_kl_200 + trr_31z * dm_kl_201 + trr_32z * dm_kl_202;
                    double dot_lkl_z_204 = trr_40z * dm_kl_200 + trr_41z * dm_kl_201 + trr_42z * dm_kl_202;
                    double dot_lkl_z_205 = trr_50z * dm_kl_200 + trr_51z * dm_kl_201 + trr_52z * dm_kl_202;
                    double dot_lkl_z_206 = trr_60z * dm_kl_200 + trr_61z * dm_kl_201 + trr_62z * dm_kl_202;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211;
                    double dot_lkl_z_216 = trr_60z * dm_kl_210 + trr_61z * dm_kl_211;
                    double dot_lkl_z_220 = wt * dm_kl_220;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220;
                    double dot_lkl_z_226 = trr_60z * dm_kl_220;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301;
                    double dot_lkl_z_306 = trr_60z * dm_kl_300 + trr_61z * dm_kl_301;
                    double dot_lkl_z_310 = wt * dm_kl_310;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310;
                    double dot_lkl_z_316 = trr_60z * dm_kl_310;
                    double dot_lkl_z_400 = wt * dm_kl_400;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400;
                    double dot_lkl_z_406 = trr_60z * dm_kl_400;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016 + trr_02y * dot_lkl_z_026 + trr_03y * dot_lkl_z_036 + trr_04y * dot_lkl_z_046;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015 + trr_12y * dot_lkl_z_025 + trr_13y * dot_lkl_z_035 + trr_14y * dot_lkl_z_045;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014 + trr_22y * dot_lkl_z_024 + trr_23y * dot_lkl_z_034 + trr_24y * dot_lkl_z_044;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013 + trr_32y * dot_lkl_z_023 + trr_33y * dot_lkl_z_033 + trr_34y * dot_lkl_z_043;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012 + trr_42y * dot_lkl_z_022 + trr_43y * dot_lkl_z_032 + trr_44y * dot_lkl_z_042;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011 + trr_52y * dot_lkl_z_021 + trr_53y * dot_lkl_z_031 + trr_54y * dot_lkl_z_041;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010 + trr_62y * dot_lkl_z_020 + trr_63y * dot_lkl_z_030 + trr_64y * dot_lkl_z_040;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106 + trr_01y * dot_lkl_z_116 + trr_02y * dot_lkl_z_126 + trr_03y * dot_lkl_z_136;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105 + trr_11y * dot_lkl_z_115 + trr_12y * dot_lkl_z_125 + trr_13y * dot_lkl_z_135;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104 + trr_21y * dot_lkl_z_114 + trr_22y * dot_lkl_z_124 + trr_23y * dot_lkl_z_134;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103 + trr_31y * dot_lkl_z_113 + trr_32y * dot_lkl_z_123 + trr_33y * dot_lkl_z_133;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102 + trr_41y * dot_lkl_z_112 + trr_42y * dot_lkl_z_122 + trr_43y * dot_lkl_z_132;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101 + trr_51y * dot_lkl_z_111 + trr_52y * dot_lkl_z_121 + trr_53y * dot_lkl_z_131;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100 + trr_61y * dot_lkl_z_110 + trr_62y * dot_lkl_z_120 + trr_63y * dot_lkl_z_130;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225;
                    double dot_lkl_y_206 = 1 * dot_lkl_z_206 + trr_01y * dot_lkl_z_216 + trr_02y * dot_lkl_z_226;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224;
                    double dot_lkl_y_215 = trr_10y * dot_lkl_z_205 + trr_11y * dot_lkl_z_215 + trr_12y * dot_lkl_z_225;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223;
                    double dot_lkl_y_224 = trr_20y * dot_lkl_z_204 + trr_21y * dot_lkl_z_214 + trr_22y * dot_lkl_z_224;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222;
                    double dot_lkl_y_233 = trr_30y * dot_lkl_z_203 + trr_31y * dot_lkl_z_213 + trr_32y * dot_lkl_z_223;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221;
                    double dot_lkl_y_242 = trr_40y * dot_lkl_z_202 + trr_41y * dot_lkl_z_212 + trr_42y * dot_lkl_z_222;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220;
                    double dot_lkl_y_251 = trr_50y * dot_lkl_z_201 + trr_51y * dot_lkl_z_211 + trr_52y * dot_lkl_z_221;
                    double dot_lkl_y_260 = trr_60y * dot_lkl_z_200 + trr_61y * dot_lkl_z_210 + trr_62y * dot_lkl_z_220;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315;
                    double dot_lkl_y_306 = 1 * dot_lkl_z_306 + trr_01y * dot_lkl_z_316;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314;
                    double dot_lkl_y_315 = trr_10y * dot_lkl_z_305 + trr_11y * dot_lkl_z_315;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313;
                    double dot_lkl_y_324 = trr_20y * dot_lkl_z_304 + trr_21y * dot_lkl_z_314;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312;
                    double dot_lkl_y_333 = trr_30y * dot_lkl_z_303 + trr_31y * dot_lkl_z_313;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311;
                    double dot_lkl_y_342 = trr_40y * dot_lkl_z_302 + trr_41y * dot_lkl_z_312;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310;
                    double dot_lkl_y_351 = trr_50y * dot_lkl_z_301 + trr_51y * dot_lkl_z_311;
                    double dot_lkl_y_360 = trr_60y * dot_lkl_z_300 + trr_61y * dot_lkl_z_310;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405;
                    double dot_lkl_y_406 = 1 * dot_lkl_z_406;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404;
                    double dot_lkl_y_415 = trr_10y * dot_lkl_z_405;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403;
                    double dot_lkl_y_424 = trr_20y * dot_lkl_z_404;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402;
                    double dot_lkl_y_433 = trr_30y * dot_lkl_z_403;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401;
                    double dot_lkl_y_442 = trr_40y * dot_lkl_z_402;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400;
                    double dot_lkl_y_451 = trr_50y * dot_lkl_z_401;
                    double dot_lkl_y_460 = trr_60y * dot_lkl_z_400;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106 + trr_02x * dot_lkl_y_206 + trr_03x * dot_lkl_y_306 + trr_04x * dot_lkl_y_406;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115 + trr_02x * dot_lkl_y_215 + trr_03x * dot_lkl_y_315 + trr_04x * dot_lkl_y_415;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124 + trr_02x * dot_lkl_y_224 + trr_03x * dot_lkl_y_324 + trr_04x * dot_lkl_y_424;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133 + trr_02x * dot_lkl_y_233 + trr_03x * dot_lkl_y_333 + trr_04x * dot_lkl_y_433;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142 + trr_02x * dot_lkl_y_242 + trr_03x * dot_lkl_y_342 + trr_04x * dot_lkl_y_442;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151 + trr_02x * dot_lkl_y_251 + trr_03x * dot_lkl_y_351 + trr_04x * dot_lkl_y_451;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160 + trr_02x * dot_lkl_y_260 + trr_03x * dot_lkl_y_360 + trr_04x * dot_lkl_y_460;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105 + trr_12x * dot_lkl_y_205 + trr_13x * dot_lkl_y_305 + trr_14x * dot_lkl_y_405;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114 + trr_12x * dot_lkl_y_214 + trr_13x * dot_lkl_y_314 + trr_14x * dot_lkl_y_414;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123 + trr_12x * dot_lkl_y_223 + trr_13x * dot_lkl_y_323 + trr_14x * dot_lkl_y_423;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132 + trr_12x * dot_lkl_y_232 + trr_13x * dot_lkl_y_332 + trr_14x * dot_lkl_y_432;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141 + trr_12x * dot_lkl_y_241 + trr_13x * dot_lkl_y_341 + trr_14x * dot_lkl_y_441;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150 + trr_12x * dot_lkl_y_250 + trr_13x * dot_lkl_y_350 + trr_14x * dot_lkl_y_450;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104 + trr_22x * dot_lkl_y_204 + trr_23x * dot_lkl_y_304 + trr_24x * dot_lkl_y_404;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113 + trr_22x * dot_lkl_y_213 + trr_23x * dot_lkl_y_313 + trr_24x * dot_lkl_y_413;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122 + trr_22x * dot_lkl_y_222 + trr_23x * dot_lkl_y_322 + trr_24x * dot_lkl_y_422;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131 + trr_22x * dot_lkl_y_231 + trr_23x * dot_lkl_y_331 + trr_24x * dot_lkl_y_431;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140 + trr_22x * dot_lkl_y_240 + trr_23x * dot_lkl_y_340 + trr_24x * dot_lkl_y_440;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103 + trr_32x * dot_lkl_y_203 + trr_33x * dot_lkl_y_303 + trr_34x * dot_lkl_y_403;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112 + trr_32x * dot_lkl_y_212 + trr_33x * dot_lkl_y_312 + trr_34x * dot_lkl_y_412;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121 + trr_32x * dot_lkl_y_221 + trr_33x * dot_lkl_y_321 + trr_34x * dot_lkl_y_421;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130 + trr_32x * dot_lkl_y_230 + trr_33x * dot_lkl_y_330 + trr_34x * dot_lkl_y_430;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102 + trr_42x * dot_lkl_y_202 + trr_43x * dot_lkl_y_302 + trr_44x * dot_lkl_y_402;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111 + trr_42x * dot_lkl_y_211 + trr_43x * dot_lkl_y_311 + trr_44x * dot_lkl_y_411;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120 + trr_42x * dot_lkl_y_220 + trr_43x * dot_lkl_y_320 + trr_44x * dot_lkl_y_420;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101 + trr_52x * dot_lkl_y_201 + trr_53x * dot_lkl_y_301 + trr_54x * dot_lkl_y_401;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110 + trr_52x * dot_lkl_y_210 + trr_53x * dot_lkl_y_310 + trr_54x * dot_lkl_y_410;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100 + trr_62x * dot_lkl_y_200 + trr_63x * dot_lkl_y_300 + trr_64x * dot_lkl_y_400;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+2, vj_kl_002);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+6, vj_kl_011);
        atomicAdd(vj2+kl_pair0+7, vj_kl_012);
        atomicAdd(vj2+kl_pair0+8, vj_kl_013);
        atomicAdd(vj2+kl_pair0+9, vj_kl_020);
        atomicAdd(vj2+kl_pair0+10, vj_kl_021);
        atomicAdd(vj2+kl_pair0+11, vj_kl_022);
        atomicAdd(vj2+kl_pair0+12, vj_kl_030);
        atomicAdd(vj2+kl_pair0+13, vj_kl_031);
        atomicAdd(vj2+kl_pair0+14, vj_kl_040);
        atomicAdd(vj2+kl_pair0+16, vj_kl_101);
        atomicAdd(vj2+kl_pair0+17, vj_kl_102);
        atomicAdd(vj2+kl_pair0+18, vj_kl_103);
        atomicAdd(vj2+kl_pair0+19, vj_kl_110);
        atomicAdd(vj2+kl_pair0+20, vj_kl_111);
        atomicAdd(vj2+kl_pair0+21, vj_kl_112);
        atomicAdd(vj2+kl_pair0+22, vj_kl_120);
        atomicAdd(vj2+kl_pair0+23, vj_kl_121);
        atomicAdd(vj2+kl_pair0+24, vj_kl_130);
        atomicAdd(vj2+kl_pair0+25, vj_kl_200);
        atomicAdd(vj2+kl_pair0+26, vj_kl_201);
        atomicAdd(vj2+kl_pair0+27, vj_kl_202);
        atomicAdd(vj2+kl_pair0+28, vj_kl_210);
        atomicAdd(vj2+kl_pair0+29, vj_kl_211);
        atomicAdd(vj2+kl_pair0+30, vj_kl_220);
        atomicAdd(vj2+kl_pair0+31, vj_kl_300);
        atomicAdd(vj2+kl_pair0+32, vj_kl_301);
        atomicAdd(vj2+kl_pair0+33, vj_kl_310);
        atomicAdd(vj2+kl_pair0+34, vj_kl_400);
    }
}
__global__
void rys_j_6_4_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_4_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_012 = dm2[kl_pair0+8];
        double dm_kl_013 = dm2[kl_pair0+9];
        double dm_kl_014 = dm2[kl_pair0+10];
        double dm_kl_021 = dm2[kl_pair0+12];
        double dm_kl_022 = dm2[kl_pair0+13];
        double dm_kl_023 = dm2[kl_pair0+14];
        double dm_kl_030 = dm2[kl_pair0+15];
        double dm_kl_031 = dm2[kl_pair0+16];
        double dm_kl_032 = dm2[kl_pair0+17];
        double dm_kl_040 = dm2[kl_pair0+18];
        double dm_kl_041 = dm2[kl_pair0+19];
        double dm_kl_050 = dm2[kl_pair0+20];
        double dm_kl_102 = dm2[kl_pair0+23];
        double dm_kl_103 = dm2[kl_pair0+24];
        double dm_kl_104 = dm2[kl_pair0+25];
        double dm_kl_111 = dm2[kl_pair0+27];
        double dm_kl_112 = dm2[kl_pair0+28];
        double dm_kl_113 = dm2[kl_pair0+29];
        double dm_kl_120 = dm2[kl_pair0+30];
        double dm_kl_121 = dm2[kl_pair0+31];
        double dm_kl_122 = dm2[kl_pair0+32];
        double dm_kl_130 = dm2[kl_pair0+33];
        double dm_kl_131 = dm2[kl_pair0+34];
        double dm_kl_140 = dm2[kl_pair0+35];
        double dm_kl_201 = dm2[kl_pair0+37];
        double dm_kl_202 = dm2[kl_pair0+38];
        double dm_kl_203 = dm2[kl_pair0+39];
        double dm_kl_210 = dm2[kl_pair0+40];
        double dm_kl_211 = dm2[kl_pair0+41];
        double dm_kl_212 = dm2[kl_pair0+42];
        double dm_kl_220 = dm2[kl_pair0+43];
        double dm_kl_221 = dm2[kl_pair0+44];
        double dm_kl_230 = dm2[kl_pair0+45];
        double dm_kl_300 = dm2[kl_pair0+46];
        double dm_kl_301 = dm2[kl_pair0+47];
        double dm_kl_302 = dm2[kl_pair0+48];
        double dm_kl_310 = dm2[kl_pair0+49];
        double dm_kl_311 = dm2[kl_pair0+50];
        double dm_kl_320 = dm2[kl_pair0+51];
        double dm_kl_400 = dm2[kl_pair0+52];
        double dm_kl_401 = dm2[kl_pair0+53];
        double dm_kl_410 = dm2[kl_pair0+54];
        double dm_kl_500 = dm2[kl_pair0+55];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_050 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_140 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_230 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_320 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_410 = 0;
        double vj_kl_500 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(6, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(6, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 6; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 6; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double trr_62z = cpz * trr_61z + 1*b01 * trr_60z + 6*b00 * trr_51z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2] + trr_62z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double trr_63z = cpz * trr_62z + 2*b01 * trr_61z + 6*b00 * trr_52z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2] + trr_63z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double trr_64z = cpz * trr_63z + 3*b01 * trr_62z + 6*b00 * trr_53z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2] + trr_64z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double trr_55z = cpz * trr_54z + 4*b01 * trr_53z + 5*b00 * trr_44z;
                    double trr_65z = cpz * trr_64z + 4*b01 * trr_63z + 6*b00 * trr_54z;
                    double dot_lij_z_005 = trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2] + trr_55z * dm_ij_cache[sh_ij+5*TILE2] + trr_65z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+9*TILE2] + trr_32z * dm_ij_cache[sh_ij+10*TILE2] + trr_42z * dm_ij_cache[sh_ij+11*TILE2] + trr_52z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+9*TILE2] + trr_33z * dm_ij_cache[sh_ij+10*TILE2] + trr_43z * dm_ij_cache[sh_ij+11*TILE2] + trr_53z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+9*TILE2] + trr_34z * dm_ij_cache[sh_ij+10*TILE2] + trr_44z * dm_ij_cache[sh_ij+11*TILE2] + trr_54z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double dot_lij_z_015 = trr_25z * dm_ij_cache[sh_ij+9*TILE2] + trr_35z * dm_ij_cache[sh_ij+10*TILE2] + trr_45z * dm_ij_cache[sh_ij+11*TILE2] + trr_55z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+14*TILE2] + trr_22z * dm_ij_cache[sh_ij+15*TILE2] + trr_32z * dm_ij_cache[sh_ij+16*TILE2] + trr_42z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+14*TILE2] + trr_23z * dm_ij_cache[sh_ij+15*TILE2] + trr_33z * dm_ij_cache[sh_ij+16*TILE2] + trr_43z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+14*TILE2] + trr_24z * dm_ij_cache[sh_ij+15*TILE2] + trr_34z * dm_ij_cache[sh_ij+16*TILE2] + trr_44z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double dot_lij_z_025 = trr_15z * dm_ij_cache[sh_ij+14*TILE2] + trr_25z * dm_ij_cache[sh_ij+15*TILE2] + trr_35z * dm_ij_cache[sh_ij+16*TILE2] + trr_45z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2] + trr_22z * dm_ij_cache[sh_ij+20*TILE2] + trr_32z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2] + trr_23z * dm_ij_cache[sh_ij+20*TILE2] + trr_33z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2] + trr_24z * dm_ij_cache[sh_ij+20*TILE2] + trr_34z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+18*TILE2] + trr_15z * dm_ij_cache[sh_ij+19*TILE2] + trr_25z * dm_ij_cache[sh_ij+20*TILE2] + trr_35z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2] + trr_22z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2] + trr_23z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2] + trr_24z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+22*TILE2] + trr_15z * dm_ij_cache[sh_ij+23*TILE2] + trr_25z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_055 = trr_05z * dm_ij_cache[sh_ij+25*TILE2] + trr_15z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_062 = trr_02z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_063 = trr_03z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_064 = trr_04z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_065 = trr_05z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+30*TILE2] + trr_32z * dm_ij_cache[sh_ij+31*TILE2] + trr_42z * dm_ij_cache[sh_ij+32*TILE2] + trr_52z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+30*TILE2] + trr_33z * dm_ij_cache[sh_ij+31*TILE2] + trr_43z * dm_ij_cache[sh_ij+32*TILE2] + trr_53z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+30*TILE2] + trr_34z * dm_ij_cache[sh_ij+31*TILE2] + trr_44z * dm_ij_cache[sh_ij+32*TILE2] + trr_54z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_105 = trr_25z * dm_ij_cache[sh_ij+30*TILE2] + trr_35z * dm_ij_cache[sh_ij+31*TILE2] + trr_45z * dm_ij_cache[sh_ij+32*TILE2] + trr_55z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+35*TILE2] + trr_22z * dm_ij_cache[sh_ij+36*TILE2] + trr_32z * dm_ij_cache[sh_ij+37*TILE2] + trr_42z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+35*TILE2] + trr_23z * dm_ij_cache[sh_ij+36*TILE2] + trr_33z * dm_ij_cache[sh_ij+37*TILE2] + trr_43z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+35*TILE2] + trr_24z * dm_ij_cache[sh_ij+36*TILE2] + trr_34z * dm_ij_cache[sh_ij+37*TILE2] + trr_44z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_115 = trr_15z * dm_ij_cache[sh_ij+35*TILE2] + trr_25z * dm_ij_cache[sh_ij+36*TILE2] + trr_35z * dm_ij_cache[sh_ij+37*TILE2] + trr_45z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+39*TILE2] + trr_12z * dm_ij_cache[sh_ij+40*TILE2] + trr_22z * dm_ij_cache[sh_ij+41*TILE2] + trr_32z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+39*TILE2] + trr_13z * dm_ij_cache[sh_ij+40*TILE2] + trr_23z * dm_ij_cache[sh_ij+41*TILE2] + trr_33z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+39*TILE2] + trr_14z * dm_ij_cache[sh_ij+40*TILE2] + trr_24z * dm_ij_cache[sh_ij+41*TILE2] + trr_34z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+39*TILE2] + trr_15z * dm_ij_cache[sh_ij+40*TILE2] + trr_25z * dm_ij_cache[sh_ij+41*TILE2] + trr_35z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2] + trr_22z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2] + trr_23z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2] + trr_24z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+43*TILE2] + trr_15z * dm_ij_cache[sh_ij+44*TILE2] + trr_25z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_145 = trr_05z * dm_ij_cache[sh_ij+46*TILE2] + trr_15z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_152 = trr_02z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_153 = trr_03z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_154 = trr_04z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_155 = trr_05z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+50*TILE2] + trr_22z * dm_ij_cache[sh_ij+51*TILE2] + trr_32z * dm_ij_cache[sh_ij+52*TILE2] + trr_42z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+50*TILE2] + trr_23z * dm_ij_cache[sh_ij+51*TILE2] + trr_33z * dm_ij_cache[sh_ij+52*TILE2] + trr_43z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+50*TILE2] + trr_24z * dm_ij_cache[sh_ij+51*TILE2] + trr_34z * dm_ij_cache[sh_ij+52*TILE2] + trr_44z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_205 = trr_15z * dm_ij_cache[sh_ij+50*TILE2] + trr_25z * dm_ij_cache[sh_ij+51*TILE2] + trr_35z * dm_ij_cache[sh_ij+52*TILE2] + trr_45z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+54*TILE2] + trr_12z * dm_ij_cache[sh_ij+55*TILE2] + trr_22z * dm_ij_cache[sh_ij+56*TILE2] + trr_32z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+54*TILE2] + trr_13z * dm_ij_cache[sh_ij+55*TILE2] + trr_23z * dm_ij_cache[sh_ij+56*TILE2] + trr_33z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+54*TILE2] + trr_14z * dm_ij_cache[sh_ij+55*TILE2] + trr_24z * dm_ij_cache[sh_ij+56*TILE2] + trr_34z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+54*TILE2] + trr_15z * dm_ij_cache[sh_ij+55*TILE2] + trr_25z * dm_ij_cache[sh_ij+56*TILE2] + trr_35z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+58*TILE2] + trr_12z * dm_ij_cache[sh_ij+59*TILE2] + trr_22z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+58*TILE2] + trr_13z * dm_ij_cache[sh_ij+59*TILE2] + trr_23z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+58*TILE2] + trr_14z * dm_ij_cache[sh_ij+59*TILE2] + trr_24z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+58*TILE2] + trr_15z * dm_ij_cache[sh_ij+59*TILE2] + trr_25z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+61*TILE2] + trr_12z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+61*TILE2] + trr_13z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+61*TILE2] + trr_14z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_235 = trr_05z * dm_ij_cache[sh_ij+61*TILE2] + trr_15z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_242 = trr_02z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_243 = trr_03z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_244 = trr_04z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_245 = trr_05z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+64*TILE2] + trr_12z * dm_ij_cache[sh_ij+65*TILE2] + trr_22z * dm_ij_cache[sh_ij+66*TILE2] + trr_32z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+64*TILE2] + trr_13z * dm_ij_cache[sh_ij+65*TILE2] + trr_23z * dm_ij_cache[sh_ij+66*TILE2] + trr_33z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+64*TILE2] + trr_14z * dm_ij_cache[sh_ij+65*TILE2] + trr_24z * dm_ij_cache[sh_ij+66*TILE2] + trr_34z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+64*TILE2] + trr_15z * dm_ij_cache[sh_ij+65*TILE2] + trr_25z * dm_ij_cache[sh_ij+66*TILE2] + trr_35z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+68*TILE2] + trr_12z * dm_ij_cache[sh_ij+69*TILE2] + trr_22z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+68*TILE2] + trr_13z * dm_ij_cache[sh_ij+69*TILE2] + trr_23z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+68*TILE2] + trr_14z * dm_ij_cache[sh_ij+69*TILE2] + trr_24z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+68*TILE2] + trr_15z * dm_ij_cache[sh_ij+69*TILE2] + trr_25z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+71*TILE2] + trr_12z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+71*TILE2] + trr_13z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+71*TILE2] + trr_14z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_325 = trr_05z * dm_ij_cache[sh_ij+71*TILE2] + trr_15z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_332 = trr_02z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_333 = trr_03z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_334 = trr_04z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_335 = trr_05z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+74*TILE2] + trr_12z * dm_ij_cache[sh_ij+75*TILE2] + trr_22z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+74*TILE2] + trr_13z * dm_ij_cache[sh_ij+75*TILE2] + trr_23z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+74*TILE2] + trr_14z * dm_ij_cache[sh_ij+75*TILE2] + trr_24z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+74*TILE2] + trr_15z * dm_ij_cache[sh_ij+75*TILE2] + trr_25z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+77*TILE2] + trr_12z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+77*TILE2] + trr_13z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+77*TILE2] + trr_14z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_415 = trr_05z * dm_ij_cache[sh_ij+77*TILE2] + trr_15z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_422 = trr_02z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_423 = trr_03z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_424 = trr_04z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_425 = trr_05z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+80*TILE2] + trr_12z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+80*TILE2] + trr_13z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+80*TILE2] + trr_14z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_505 = trr_05z * dm_ij_cache[sh_ij+80*TILE2] + trr_15z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_512 = trr_02z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_513 = trr_03z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_514 = trr_04z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_515 = trr_05z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_602 = trr_02z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_603 = trr_03z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_604 = trr_04z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_605 = trr_05z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052 + trr_60y * dot_lij_z_062;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053 + trr_60y * dot_lij_z_063;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054 + trr_60y * dot_lij_z_064;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045 + trr_50y * dot_lij_z_055 + trr_60y * dot_lij_z_065;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051 + trr_61y * dot_lij_z_061;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052 + trr_61y * dot_lij_z_062;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053 + trr_61y * dot_lij_z_063;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044 + trr_51y * dot_lij_z_054 + trr_61y * dot_lij_z_064;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double trr_62y = cpy * trr_61y + 1*b01 * trr_60y + 6*b00 * trr_51y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050 + trr_62y * dot_lij_z_060;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051 + trr_62y * dot_lij_z_061;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052 + trr_62y * dot_lij_z_062;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043 + trr_52y * dot_lij_z_053 + trr_62y * dot_lij_z_063;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double trr_63y = cpy * trr_62y + 2*b01 * trr_61y + 6*b00 * trr_52y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050 + trr_63y * dot_lij_z_060;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051 + trr_63y * dot_lij_z_061;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042 + trr_53y * dot_lij_z_052 + trr_63y * dot_lij_z_062;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double trr_64y = cpy * trr_63y + 3*b01 * trr_62y + 6*b00 * trr_53y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050 + trr_64y * dot_lij_z_060;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041 + trr_54y * dot_lij_z_051 + trr_64y * dot_lij_z_061;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double trr_55y = cpy * trr_54y + 4*b01 * trr_53y + 5*b00 * trr_44y;
                    double trr_65y = cpy * trr_64y + 4*b01 * trr_63y + 6*b00 * trr_54y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040 + trr_55y * dot_lij_z_050 + trr_65y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142 + trr_50y * dot_lij_z_152;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143 + trr_50y * dot_lij_z_153;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144 + trr_50y * dot_lij_z_154;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135 + trr_40y * dot_lij_z_145 + trr_50y * dot_lij_z_155;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141 + trr_51y * dot_lij_z_151;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142 + trr_51y * dot_lij_z_152;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143 + trr_51y * dot_lij_z_153;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134 + trr_41y * dot_lij_z_144 + trr_51y * dot_lij_z_154;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140 + trr_52y * dot_lij_z_150;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141 + trr_52y * dot_lij_z_151;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142 + trr_52y * dot_lij_z_152;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133 + trr_42y * dot_lij_z_143 + trr_52y * dot_lij_z_153;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140 + trr_53y * dot_lij_z_150;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141 + trr_53y * dot_lij_z_151;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132 + trr_43y * dot_lij_z_142 + trr_53y * dot_lij_z_152;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140 + trr_54y * dot_lij_z_150;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131 + trr_44y * dot_lij_z_141 + trr_54y * dot_lij_z_151;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130 + trr_45y * dot_lij_z_140 + trr_55y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232 + trr_40y * dot_lij_z_242;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233 + trr_40y * dot_lij_z_243;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234 + trr_40y * dot_lij_z_244;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225 + trr_30y * dot_lij_z_235 + trr_40y * dot_lij_z_245;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231 + trr_41y * dot_lij_z_241;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232 + trr_41y * dot_lij_z_242;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233 + trr_41y * dot_lij_z_243;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224 + trr_31y * dot_lij_z_234 + trr_41y * dot_lij_z_244;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230 + trr_42y * dot_lij_z_240;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231 + trr_42y * dot_lij_z_241;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232 + trr_42y * dot_lij_z_242;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223 + trr_32y * dot_lij_z_233 + trr_42y * dot_lij_z_243;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230 + trr_43y * dot_lij_z_240;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231 + trr_43y * dot_lij_z_241;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222 + trr_33y * dot_lij_z_232 + trr_43y * dot_lij_z_242;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230 + trr_44y * dot_lij_z_240;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221 + trr_34y * dot_lij_z_231 + trr_44y * dot_lij_z_241;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220 + trr_35y * dot_lij_z_230 + trr_45y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322 + trr_30y * dot_lij_z_332;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323 + trr_30y * dot_lij_z_333;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324 + trr_30y * dot_lij_z_334;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315 + trr_20y * dot_lij_z_325 + trr_30y * dot_lij_z_335;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321 + trr_31y * dot_lij_z_331;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322 + trr_31y * dot_lij_z_332;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323 + trr_31y * dot_lij_z_333;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314 + trr_21y * dot_lij_z_324 + trr_31y * dot_lij_z_334;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320 + trr_32y * dot_lij_z_330;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321 + trr_32y * dot_lij_z_331;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322 + trr_32y * dot_lij_z_332;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313 + trr_22y * dot_lij_z_323 + trr_32y * dot_lij_z_333;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320 + trr_33y * dot_lij_z_330;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321 + trr_33y * dot_lij_z_331;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312 + trr_23y * dot_lij_z_322 + trr_33y * dot_lij_z_332;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320 + trr_34y * dot_lij_z_330;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311 + trr_24y * dot_lij_z_321 + trr_34y * dot_lij_z_331;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310 + trr_25y * dot_lij_z_320 + trr_35y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412 + trr_20y * dot_lij_z_422;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413 + trr_20y * dot_lij_z_423;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414 + trr_20y * dot_lij_z_424;
                    double dot_lij_y_405 = 1 * dot_lij_z_405 + trr_10y * dot_lij_z_415 + trr_20y * dot_lij_z_425;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411 + trr_21y * dot_lij_z_421;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412 + trr_21y * dot_lij_z_422;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413 + trr_21y * dot_lij_z_423;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404 + trr_11y * dot_lij_z_414 + trr_21y * dot_lij_z_424;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410 + trr_22y * dot_lij_z_420;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411 + trr_22y * dot_lij_z_421;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412 + trr_22y * dot_lij_z_422;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403 + trr_12y * dot_lij_z_413 + trr_22y * dot_lij_z_423;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410 + trr_23y * dot_lij_z_420;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411 + trr_23y * dot_lij_z_421;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402 + trr_13y * dot_lij_z_412 + trr_23y * dot_lij_z_422;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410 + trr_24y * dot_lij_z_420;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401 + trr_14y * dot_lij_z_411 + trr_24y * dot_lij_z_421;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400 + trr_15y * dot_lij_z_410 + trr_25y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_502 = 1 * dot_lij_z_502 + trr_10y * dot_lij_z_512;
                    double dot_lij_y_503 = 1 * dot_lij_z_503 + trr_10y * dot_lij_z_513;
                    double dot_lij_y_504 = 1 * dot_lij_z_504 + trr_10y * dot_lij_z_514;
                    double dot_lij_y_505 = 1 * dot_lij_z_505 + trr_10y * dot_lij_z_515;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501 + trr_11y * dot_lij_z_511;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502 + trr_11y * dot_lij_z_512;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503 + trr_11y * dot_lij_z_513;
                    double dot_lij_y_514 = trr_01y * dot_lij_z_504 + trr_11y * dot_lij_z_514;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500 + trr_12y * dot_lij_z_510;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501 + trr_12y * dot_lij_z_511;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502 + trr_12y * dot_lij_z_512;
                    double dot_lij_y_523 = trr_02y * dot_lij_z_503 + trr_12y * dot_lij_z_513;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500 + trr_13y * dot_lij_z_510;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501 + trr_13y * dot_lij_z_511;
                    double dot_lij_y_532 = trr_03y * dot_lij_z_502 + trr_13y * dot_lij_z_512;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500 + trr_14y * dot_lij_z_510;
                    double dot_lij_y_541 = trr_04y * dot_lij_z_501 + trr_14y * dot_lij_z_511;
                    double dot_lij_y_550 = trr_05y * dot_lij_z_500 + trr_15y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_602 = 1 * dot_lij_z_602;
                    double dot_lij_y_603 = 1 * dot_lij_z_603;
                    double dot_lij_y_604 = 1 * dot_lij_z_604;
                    double dot_lij_y_605 = 1 * dot_lij_z_605;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double dot_lij_y_611 = trr_01y * dot_lij_z_601;
                    double dot_lij_y_612 = trr_01y * dot_lij_z_602;
                    double dot_lij_y_613 = trr_01y * dot_lij_z_603;
                    double dot_lij_y_614 = trr_01y * dot_lij_z_604;
                    double dot_lij_y_620 = trr_02y * dot_lij_z_600;
                    double dot_lij_y_621 = trr_02y * dot_lij_z_601;
                    double dot_lij_y_622 = trr_02y * dot_lij_z_602;
                    double dot_lij_y_623 = trr_02y * dot_lij_z_603;
                    double dot_lij_y_630 = trr_03y * dot_lij_z_600;
                    double dot_lij_y_631 = trr_03y * dot_lij_z_601;
                    double dot_lij_y_632 = trr_03y * dot_lij_z_602;
                    double dot_lij_y_640 = trr_04y * dot_lij_z_600;
                    double dot_lij_y_641 = trr_04y * dot_lij_z_601;
                    double dot_lij_y_650 = trr_05y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503 + trr_60x * dot_lij_y_603;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504 + trr_60x * dot_lij_y_604;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405 + trr_50x * dot_lij_y_505 + trr_60x * dot_lij_y_605;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512 + trr_60x * dot_lij_y_612;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513 + trr_60x * dot_lij_y_613;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414 + trr_50x * dot_lij_y_514 + trr_60x * dot_lij_y_614;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521 + trr_60x * dot_lij_y_621;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522 + trr_60x * dot_lij_y_622;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423 + trr_50x * dot_lij_y_523 + trr_60x * dot_lij_y_623;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530 + trr_60x * dot_lij_y_630;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531 + trr_60x * dot_lij_y_631;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432 + trr_50x * dot_lij_y_532 + trr_60x * dot_lij_y_632;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540 + trr_60x * dot_lij_y_640;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441 + trr_50x * dot_lij_y_541 + trr_60x * dot_lij_y_641;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450 + trr_50x * dot_lij_y_550 + trr_60x * dot_lij_y_650;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502 + trr_61x * dot_lij_y_602;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503 + trr_61x * dot_lij_y_603;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404 + trr_51x * dot_lij_y_504 + trr_61x * dot_lij_y_604;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511 + trr_61x * dot_lij_y_611;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512 + trr_61x * dot_lij_y_612;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413 + trr_51x * dot_lij_y_513 + trr_61x * dot_lij_y_613;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520 + trr_61x * dot_lij_y_620;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521 + trr_61x * dot_lij_y_621;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422 + trr_51x * dot_lij_y_522 + trr_61x * dot_lij_y_622;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530 + trr_61x * dot_lij_y_630;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431 + trr_51x * dot_lij_y_531 + trr_61x * dot_lij_y_631;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440 + trr_51x * dot_lij_y_540 + trr_61x * dot_lij_y_640;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    double trr_62x = cpx * trr_61x + 1*b01 * trr_60x + 6*b00 * trr_51x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501 + trr_62x * dot_lij_y_601;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502 + trr_62x * dot_lij_y_602;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403 + trr_52x * dot_lij_y_503 + trr_62x * dot_lij_y_603;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510 + trr_62x * dot_lij_y_610;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511 + trr_62x * dot_lij_y_611;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412 + trr_52x * dot_lij_y_512 + trr_62x * dot_lij_y_612;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520 + trr_62x * dot_lij_y_620;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421 + trr_52x * dot_lij_y_521 + trr_62x * dot_lij_y_621;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430 + trr_52x * dot_lij_y_530 + trr_62x * dot_lij_y_630;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    double trr_63x = cpx * trr_62x + 2*b01 * trr_61x + 6*b00 * trr_52x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500 + trr_63x * dot_lij_y_600;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501 + trr_63x * dot_lij_y_601;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402 + trr_53x * dot_lij_y_502 + trr_63x * dot_lij_y_602;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510 + trr_63x * dot_lij_y_610;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411 + trr_53x * dot_lij_y_511 + trr_63x * dot_lij_y_611;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420 + trr_53x * dot_lij_y_520 + trr_63x * dot_lij_y_620;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    double trr_64x = cpx * trr_63x + 3*b01 * trr_62x + 6*b00 * trr_53x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500 + trr_64x * dot_lij_y_600;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401 + trr_54x * dot_lij_y_501 + trr_64x * dot_lij_y_601;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410 + trr_54x * dot_lij_y_510 + trr_64x * dot_lij_y_610;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    double trr_55x = cpx * trr_54x + 4*b01 * trr_53x + 5*b00 * trr_44x;
                    double trr_65x = cpx * trr_64x + 4*b01 * trr_63x + 6*b00 * trr_54x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400 + trr_55x * dot_lij_y_500 + trr_65x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005;
                    double dot_lkl_z_005 = trr_53z * dm_kl_003 + trr_54z * dm_kl_004 + trr_55z * dm_kl_005;
                    double dot_lkl_z_006 = trr_63z * dm_kl_003 + trr_64z * dm_kl_004 + trr_65z * dm_kl_005;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014;
                    double dot_lkl_z_015 = trr_52z * dm_kl_012 + trr_53z * dm_kl_013 + trr_54z * dm_kl_014;
                    double dot_lkl_z_016 = trr_62z * dm_kl_012 + trr_63z * dm_kl_013 + trr_64z * dm_kl_014;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023;
                    double dot_lkl_z_025 = trr_51z * dm_kl_021 + trr_52z * dm_kl_022 + trr_53z * dm_kl_023;
                    double dot_lkl_z_026 = trr_61z * dm_kl_021 + trr_62z * dm_kl_022 + trr_63z * dm_kl_023;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031 + trr_52z * dm_kl_032;
                    double dot_lkl_z_036 = trr_60z * dm_kl_030 + trr_61z * dm_kl_031 + trr_62z * dm_kl_032;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040 + trr_51z * dm_kl_041;
                    double dot_lkl_z_046 = trr_60z * dm_kl_040 + trr_61z * dm_kl_041;
                    double dot_lkl_z_050 = wt * dm_kl_050;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050;
                    double dot_lkl_z_055 = trr_50z * dm_kl_050;
                    double dot_lkl_z_056 = trr_60z * dm_kl_050;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104;
                    double dot_lkl_z_105 = trr_52z * dm_kl_102 + trr_53z * dm_kl_103 + trr_54z * dm_kl_104;
                    double dot_lkl_z_106 = trr_62z * dm_kl_102 + trr_63z * dm_kl_103 + trr_64z * dm_kl_104;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113;
                    double dot_lkl_z_115 = trr_51z * dm_kl_111 + trr_52z * dm_kl_112 + trr_53z * dm_kl_113;
                    double dot_lkl_z_116 = trr_61z * dm_kl_111 + trr_62z * dm_kl_112 + trr_63z * dm_kl_113;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121 + trr_52z * dm_kl_122;
                    double dot_lkl_z_126 = trr_60z * dm_kl_120 + trr_61z * dm_kl_121 + trr_62z * dm_kl_122;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130 + trr_51z * dm_kl_131;
                    double dot_lkl_z_136 = trr_60z * dm_kl_130 + trr_61z * dm_kl_131;
                    double dot_lkl_z_140 = wt * dm_kl_140;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140;
                    double dot_lkl_z_145 = trr_50z * dm_kl_140;
                    double dot_lkl_z_146 = trr_60z * dm_kl_140;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203;
                    double dot_lkl_z_205 = trr_51z * dm_kl_201 + trr_52z * dm_kl_202 + trr_53z * dm_kl_203;
                    double dot_lkl_z_206 = trr_61z * dm_kl_201 + trr_62z * dm_kl_202 + trr_63z * dm_kl_203;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211 + trr_52z * dm_kl_212;
                    double dot_lkl_z_216 = trr_60z * dm_kl_210 + trr_61z * dm_kl_211 + trr_62z * dm_kl_212;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220 + trr_51z * dm_kl_221;
                    double dot_lkl_z_226 = trr_60z * dm_kl_220 + trr_61z * dm_kl_221;
                    double dot_lkl_z_230 = wt * dm_kl_230;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230;
                    double dot_lkl_z_235 = trr_50z * dm_kl_230;
                    double dot_lkl_z_236 = trr_60z * dm_kl_230;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301 + trr_52z * dm_kl_302;
                    double dot_lkl_z_306 = trr_60z * dm_kl_300 + trr_61z * dm_kl_301 + trr_62z * dm_kl_302;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310 + trr_51z * dm_kl_311;
                    double dot_lkl_z_316 = trr_60z * dm_kl_310 + trr_61z * dm_kl_311;
                    double dot_lkl_z_320 = wt * dm_kl_320;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320;
                    double dot_lkl_z_325 = trr_50z * dm_kl_320;
                    double dot_lkl_z_326 = trr_60z * dm_kl_320;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400 + trr_51z * dm_kl_401;
                    double dot_lkl_z_406 = trr_60z * dm_kl_400 + trr_61z * dm_kl_401;
                    double dot_lkl_z_410 = wt * dm_kl_410;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410;
                    double dot_lkl_z_415 = trr_50z * dm_kl_410;
                    double dot_lkl_z_416 = trr_60z * dm_kl_410;
                    double dot_lkl_z_500 = wt * dm_kl_500;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500;
                    double dot_lkl_z_505 = trr_50z * dm_kl_500;
                    double dot_lkl_z_506 = trr_60z * dm_kl_500;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045 + trr_05y * dot_lkl_z_055;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016 + trr_02y * dot_lkl_z_026 + trr_03y * dot_lkl_z_036 + trr_04y * dot_lkl_z_046 + trr_05y * dot_lkl_z_056;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044 + trr_15y * dot_lkl_z_054;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015 + trr_12y * dot_lkl_z_025 + trr_13y * dot_lkl_z_035 + trr_14y * dot_lkl_z_045 + trr_15y * dot_lkl_z_055;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043 + trr_25y * dot_lkl_z_053;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014 + trr_22y * dot_lkl_z_024 + trr_23y * dot_lkl_z_034 + trr_24y * dot_lkl_z_044 + trr_25y * dot_lkl_z_054;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042 + trr_35y * dot_lkl_z_052;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013 + trr_32y * dot_lkl_z_023 + trr_33y * dot_lkl_z_033 + trr_34y * dot_lkl_z_043 + trr_35y * dot_lkl_z_053;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041 + trr_45y * dot_lkl_z_051;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012 + trr_42y * dot_lkl_z_022 + trr_43y * dot_lkl_z_032 + trr_44y * dot_lkl_z_042 + trr_45y * dot_lkl_z_052;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040 + trr_55y * dot_lkl_z_050;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011 + trr_52y * dot_lkl_z_021 + trr_53y * dot_lkl_z_031 + trr_54y * dot_lkl_z_041 + trr_55y * dot_lkl_z_051;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010 + trr_62y * dot_lkl_z_020 + trr_63y * dot_lkl_z_030 + trr_64y * dot_lkl_z_040 + trr_65y * dot_lkl_z_050;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135 + trr_04y * dot_lkl_z_145;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106 + trr_01y * dot_lkl_z_116 + trr_02y * dot_lkl_z_126 + trr_03y * dot_lkl_z_136 + trr_04y * dot_lkl_z_146;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134 + trr_14y * dot_lkl_z_144;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105 + trr_11y * dot_lkl_z_115 + trr_12y * dot_lkl_z_125 + trr_13y * dot_lkl_z_135 + trr_14y * dot_lkl_z_145;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133 + trr_24y * dot_lkl_z_143;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104 + trr_21y * dot_lkl_z_114 + trr_22y * dot_lkl_z_124 + trr_23y * dot_lkl_z_134 + trr_24y * dot_lkl_z_144;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132 + trr_34y * dot_lkl_z_142;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103 + trr_31y * dot_lkl_z_113 + trr_32y * dot_lkl_z_123 + trr_33y * dot_lkl_z_133 + trr_34y * dot_lkl_z_143;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131 + trr_44y * dot_lkl_z_141;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102 + trr_41y * dot_lkl_z_112 + trr_42y * dot_lkl_z_122 + trr_43y * dot_lkl_z_132 + trr_44y * dot_lkl_z_142;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130 + trr_54y * dot_lkl_z_140;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101 + trr_51y * dot_lkl_z_111 + trr_52y * dot_lkl_z_121 + trr_53y * dot_lkl_z_131 + trr_54y * dot_lkl_z_141;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100 + trr_61y * dot_lkl_z_110 + trr_62y * dot_lkl_z_120 + trr_63y * dot_lkl_z_130 + trr_64y * dot_lkl_z_140;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225 + trr_03y * dot_lkl_z_235;
                    double dot_lkl_y_206 = 1 * dot_lkl_z_206 + trr_01y * dot_lkl_z_216 + trr_02y * dot_lkl_z_226 + trr_03y * dot_lkl_z_236;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224 + trr_13y * dot_lkl_z_234;
                    double dot_lkl_y_215 = trr_10y * dot_lkl_z_205 + trr_11y * dot_lkl_z_215 + trr_12y * dot_lkl_z_225 + trr_13y * dot_lkl_z_235;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223 + trr_23y * dot_lkl_z_233;
                    double dot_lkl_y_224 = trr_20y * dot_lkl_z_204 + trr_21y * dot_lkl_z_214 + trr_22y * dot_lkl_z_224 + trr_23y * dot_lkl_z_234;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222 + trr_33y * dot_lkl_z_232;
                    double dot_lkl_y_233 = trr_30y * dot_lkl_z_203 + trr_31y * dot_lkl_z_213 + trr_32y * dot_lkl_z_223 + trr_33y * dot_lkl_z_233;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221 + trr_43y * dot_lkl_z_231;
                    double dot_lkl_y_242 = trr_40y * dot_lkl_z_202 + trr_41y * dot_lkl_z_212 + trr_42y * dot_lkl_z_222 + trr_43y * dot_lkl_z_232;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220 + trr_53y * dot_lkl_z_230;
                    double dot_lkl_y_251 = trr_50y * dot_lkl_z_201 + trr_51y * dot_lkl_z_211 + trr_52y * dot_lkl_z_221 + trr_53y * dot_lkl_z_231;
                    double dot_lkl_y_260 = trr_60y * dot_lkl_z_200 + trr_61y * dot_lkl_z_210 + trr_62y * dot_lkl_z_220 + trr_63y * dot_lkl_z_230;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315 + trr_02y * dot_lkl_z_325;
                    double dot_lkl_y_306 = 1 * dot_lkl_z_306 + trr_01y * dot_lkl_z_316 + trr_02y * dot_lkl_z_326;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314 + trr_12y * dot_lkl_z_324;
                    double dot_lkl_y_315 = trr_10y * dot_lkl_z_305 + trr_11y * dot_lkl_z_315 + trr_12y * dot_lkl_z_325;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313 + trr_22y * dot_lkl_z_323;
                    double dot_lkl_y_324 = trr_20y * dot_lkl_z_304 + trr_21y * dot_lkl_z_314 + trr_22y * dot_lkl_z_324;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312 + trr_32y * dot_lkl_z_322;
                    double dot_lkl_y_333 = trr_30y * dot_lkl_z_303 + trr_31y * dot_lkl_z_313 + trr_32y * dot_lkl_z_323;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311 + trr_42y * dot_lkl_z_321;
                    double dot_lkl_y_342 = trr_40y * dot_lkl_z_302 + trr_41y * dot_lkl_z_312 + trr_42y * dot_lkl_z_322;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310 + trr_52y * dot_lkl_z_320;
                    double dot_lkl_y_351 = trr_50y * dot_lkl_z_301 + trr_51y * dot_lkl_z_311 + trr_52y * dot_lkl_z_321;
                    double dot_lkl_y_360 = trr_60y * dot_lkl_z_300 + trr_61y * dot_lkl_z_310 + trr_62y * dot_lkl_z_320;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405 + trr_01y * dot_lkl_z_415;
                    double dot_lkl_y_406 = 1 * dot_lkl_z_406 + trr_01y * dot_lkl_z_416;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404 + trr_11y * dot_lkl_z_414;
                    double dot_lkl_y_415 = trr_10y * dot_lkl_z_405 + trr_11y * dot_lkl_z_415;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403 + trr_21y * dot_lkl_z_413;
                    double dot_lkl_y_424 = trr_20y * dot_lkl_z_404 + trr_21y * dot_lkl_z_414;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402 + trr_31y * dot_lkl_z_412;
                    double dot_lkl_y_433 = trr_30y * dot_lkl_z_403 + trr_31y * dot_lkl_z_413;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401 + trr_41y * dot_lkl_z_411;
                    double dot_lkl_y_442 = trr_40y * dot_lkl_z_402 + trr_41y * dot_lkl_z_412;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400 + trr_51y * dot_lkl_z_410;
                    double dot_lkl_y_451 = trr_50y * dot_lkl_z_401 + trr_51y * dot_lkl_z_411;
                    double dot_lkl_y_460 = trr_60y * dot_lkl_z_400 + trr_61y * dot_lkl_z_410;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504;
                    double dot_lkl_y_505 = 1 * dot_lkl_z_505;
                    double dot_lkl_y_506 = 1 * dot_lkl_z_506;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503;
                    double dot_lkl_y_514 = trr_10y * dot_lkl_z_504;
                    double dot_lkl_y_515 = trr_10y * dot_lkl_z_505;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502;
                    double dot_lkl_y_523 = trr_20y * dot_lkl_z_503;
                    double dot_lkl_y_524 = trr_20y * dot_lkl_z_504;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501;
                    double dot_lkl_y_532 = trr_30y * dot_lkl_z_502;
                    double dot_lkl_y_533 = trr_30y * dot_lkl_z_503;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500;
                    double dot_lkl_y_541 = trr_40y * dot_lkl_z_501;
                    double dot_lkl_y_542 = trr_40y * dot_lkl_z_502;
                    double dot_lkl_y_550 = trr_50y * dot_lkl_z_500;
                    double dot_lkl_y_551 = trr_50y * dot_lkl_z_501;
                    double dot_lkl_y_560 = trr_60y * dot_lkl_z_500;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405 + trr_05x * dot_lkl_y_505;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106 + trr_02x * dot_lkl_y_206 + trr_03x * dot_lkl_y_306 + trr_04x * dot_lkl_y_406 + trr_05x * dot_lkl_y_506;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414 + trr_05x * dot_lkl_y_514;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115 + trr_02x * dot_lkl_y_215 + trr_03x * dot_lkl_y_315 + trr_04x * dot_lkl_y_415 + trr_05x * dot_lkl_y_515;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423 + trr_05x * dot_lkl_y_523;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124 + trr_02x * dot_lkl_y_224 + trr_03x * dot_lkl_y_324 + trr_04x * dot_lkl_y_424 + trr_05x * dot_lkl_y_524;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432 + trr_05x * dot_lkl_y_532;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133 + trr_02x * dot_lkl_y_233 + trr_03x * dot_lkl_y_333 + trr_04x * dot_lkl_y_433 + trr_05x * dot_lkl_y_533;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441 + trr_05x * dot_lkl_y_541;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142 + trr_02x * dot_lkl_y_242 + trr_03x * dot_lkl_y_342 + trr_04x * dot_lkl_y_442 + trr_05x * dot_lkl_y_542;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450 + trr_05x * dot_lkl_y_550;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151 + trr_02x * dot_lkl_y_251 + trr_03x * dot_lkl_y_351 + trr_04x * dot_lkl_y_451 + trr_05x * dot_lkl_y_551;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160 + trr_02x * dot_lkl_y_260 + trr_03x * dot_lkl_y_360 + trr_04x * dot_lkl_y_460 + trr_05x * dot_lkl_y_560;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404 + trr_15x * dot_lkl_y_504;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105 + trr_12x * dot_lkl_y_205 + trr_13x * dot_lkl_y_305 + trr_14x * dot_lkl_y_405 + trr_15x * dot_lkl_y_505;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413 + trr_15x * dot_lkl_y_513;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114 + trr_12x * dot_lkl_y_214 + trr_13x * dot_lkl_y_314 + trr_14x * dot_lkl_y_414 + trr_15x * dot_lkl_y_514;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422 + trr_15x * dot_lkl_y_522;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123 + trr_12x * dot_lkl_y_223 + trr_13x * dot_lkl_y_323 + trr_14x * dot_lkl_y_423 + trr_15x * dot_lkl_y_523;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431 + trr_15x * dot_lkl_y_531;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132 + trr_12x * dot_lkl_y_232 + trr_13x * dot_lkl_y_332 + trr_14x * dot_lkl_y_432 + trr_15x * dot_lkl_y_532;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440 + trr_15x * dot_lkl_y_540;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141 + trr_12x * dot_lkl_y_241 + trr_13x * dot_lkl_y_341 + trr_14x * dot_lkl_y_441 + trr_15x * dot_lkl_y_541;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150 + trr_12x * dot_lkl_y_250 + trr_13x * dot_lkl_y_350 + trr_14x * dot_lkl_y_450 + trr_15x * dot_lkl_y_550;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403 + trr_25x * dot_lkl_y_503;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104 + trr_22x * dot_lkl_y_204 + trr_23x * dot_lkl_y_304 + trr_24x * dot_lkl_y_404 + trr_25x * dot_lkl_y_504;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412 + trr_25x * dot_lkl_y_512;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113 + trr_22x * dot_lkl_y_213 + trr_23x * dot_lkl_y_313 + trr_24x * dot_lkl_y_413 + trr_25x * dot_lkl_y_513;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421 + trr_25x * dot_lkl_y_521;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122 + trr_22x * dot_lkl_y_222 + trr_23x * dot_lkl_y_322 + trr_24x * dot_lkl_y_422 + trr_25x * dot_lkl_y_522;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430 + trr_25x * dot_lkl_y_530;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131 + trr_22x * dot_lkl_y_231 + trr_23x * dot_lkl_y_331 + trr_24x * dot_lkl_y_431 + trr_25x * dot_lkl_y_531;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140 + trr_22x * dot_lkl_y_240 + trr_23x * dot_lkl_y_340 + trr_24x * dot_lkl_y_440 + trr_25x * dot_lkl_y_540;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402 + trr_35x * dot_lkl_y_502;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103 + trr_32x * dot_lkl_y_203 + trr_33x * dot_lkl_y_303 + trr_34x * dot_lkl_y_403 + trr_35x * dot_lkl_y_503;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411 + trr_35x * dot_lkl_y_511;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112 + trr_32x * dot_lkl_y_212 + trr_33x * dot_lkl_y_312 + trr_34x * dot_lkl_y_412 + trr_35x * dot_lkl_y_512;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420 + trr_35x * dot_lkl_y_520;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121 + trr_32x * dot_lkl_y_221 + trr_33x * dot_lkl_y_321 + trr_34x * dot_lkl_y_421 + trr_35x * dot_lkl_y_521;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130 + trr_32x * dot_lkl_y_230 + trr_33x * dot_lkl_y_330 + trr_34x * dot_lkl_y_430 + trr_35x * dot_lkl_y_530;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401 + trr_45x * dot_lkl_y_501;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102 + trr_42x * dot_lkl_y_202 + trr_43x * dot_lkl_y_302 + trr_44x * dot_lkl_y_402 + trr_45x * dot_lkl_y_502;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410 + trr_45x * dot_lkl_y_510;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111 + trr_42x * dot_lkl_y_211 + trr_43x * dot_lkl_y_311 + trr_44x * dot_lkl_y_411 + trr_45x * dot_lkl_y_511;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120 + trr_42x * dot_lkl_y_220 + trr_43x * dot_lkl_y_320 + trr_44x * dot_lkl_y_420 + trr_45x * dot_lkl_y_520;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400 + trr_55x * dot_lkl_y_500;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101 + trr_52x * dot_lkl_y_201 + trr_53x * dot_lkl_y_301 + trr_54x * dot_lkl_y_401 + trr_55x * dot_lkl_y_501;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110 + trr_52x * dot_lkl_y_210 + trr_53x * dot_lkl_y_310 + trr_54x * dot_lkl_y_410 + trr_55x * dot_lkl_y_510;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100 + trr_62x * dot_lkl_y_200 + trr_63x * dot_lkl_y_300 + trr_64x * dot_lkl_y_400 + trr_65x * dot_lkl_y_500;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+8, vj_kl_012);
        atomicAdd(vj2+kl_pair0+9, vj_kl_013);
        atomicAdd(vj2+kl_pair0+10, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_021);
        atomicAdd(vj2+kl_pair0+13, vj_kl_022);
        atomicAdd(vj2+kl_pair0+14, vj_kl_023);
        atomicAdd(vj2+kl_pair0+15, vj_kl_030);
        atomicAdd(vj2+kl_pair0+16, vj_kl_031);
        atomicAdd(vj2+kl_pair0+17, vj_kl_032);
        atomicAdd(vj2+kl_pair0+18, vj_kl_040);
        atomicAdd(vj2+kl_pair0+19, vj_kl_041);
        atomicAdd(vj2+kl_pair0+20, vj_kl_050);
        atomicAdd(vj2+kl_pair0+23, vj_kl_102);
        atomicAdd(vj2+kl_pair0+24, vj_kl_103);
        atomicAdd(vj2+kl_pair0+25, vj_kl_104);
        atomicAdd(vj2+kl_pair0+27, vj_kl_111);
        atomicAdd(vj2+kl_pair0+28, vj_kl_112);
        atomicAdd(vj2+kl_pair0+29, vj_kl_113);
        atomicAdd(vj2+kl_pair0+30, vj_kl_120);
        atomicAdd(vj2+kl_pair0+31, vj_kl_121);
        atomicAdd(vj2+kl_pair0+32, vj_kl_122);
        atomicAdd(vj2+kl_pair0+33, vj_kl_130);
        atomicAdd(vj2+kl_pair0+34, vj_kl_131);
        atomicAdd(vj2+kl_pair0+35, vj_kl_140);
        atomicAdd(vj2+kl_pair0+37, vj_kl_201);
        atomicAdd(vj2+kl_pair0+38, vj_kl_202);
        atomicAdd(vj2+kl_pair0+39, vj_kl_203);
        atomicAdd(vj2+kl_pair0+40, vj_kl_210);
        atomicAdd(vj2+kl_pair0+41, vj_kl_211);
        atomicAdd(vj2+kl_pair0+42, vj_kl_212);
        atomicAdd(vj2+kl_pair0+43, vj_kl_220);
        atomicAdd(vj2+kl_pair0+44, vj_kl_221);
        atomicAdd(vj2+kl_pair0+45, vj_kl_230);
        atomicAdd(vj2+kl_pair0+46, vj_kl_300);
        atomicAdd(vj2+kl_pair0+47, vj_kl_301);
        atomicAdd(vj2+kl_pair0+48, vj_kl_302);
        atomicAdd(vj2+kl_pair0+49, vj_kl_310);
        atomicAdd(vj2+kl_pair0+50, vj_kl_311);
        atomicAdd(vj2+kl_pair0+51, vj_kl_320);
        atomicAdd(vj2+kl_pair0+52, vj_kl_400);
        atomicAdd(vj2+kl_pair0+53, vj_kl_401);
        atomicAdd(vj2+kl_pair0+54, vj_kl_410);
        atomicAdd(vj2+kl_pair0+55, vj_kl_500);
    }
}
__global__
void rys_j_6_5_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_5_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

__device__ static
void _rys_j_6_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                      ShellQuartet *shl_quartet_idx, int ntasks, int ish0, int jsh0)
{
    int sq_id = threadIdx.x + blockDim.x * threadIdx.y;
    int nsq_per_block = blockDim.x * blockDim.y;
    int iprim = bounds.iprim;
    int jprim = bounds.jprim;
    int kprim = bounds.kprim;
    int lprim = bounds.lprim;
    int nbas1 = envs1.nbas;
    int *bas1 = envs1.bas;
    int *pair_loc1 = envs1.ao_loc;
    double *env1 = envs1.env;
    double omega = env1[PTR_RANGE_OMEGA];
    extern __shared__ double Rpa_cicj[];
    double *dm_ij_cache = Rpa_cicj + iprim*jprim*TILE2*4;
    double *rw = dm_ij_cache + 84*TILE2;
    for (int n = sq_id; n < iprim*jprim*TILE2; n += nsq_per_block) {
        int ijp = n / TILE2;
        int sh_ij = n % TILE2;
        int ish = ish0 + sh_ij / TILE;
        int jsh = jsh0 + sh_ij % TILE;
        int ip = ijp / jprim;
        int jp = ijp % jprim;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *ci = env1 + bas1[ish*BAS_SLOTS+PTR_COEFF];
        double *cj = env1 + bas1[jsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rj = env1 + bas1[jsh*BAS_SLOTS+PTR_BAS_COORD];
        double ai = expi[ip];
        double aj = expj[jp];
        double aij = ai + aj;
        double aj_aij = aj / aij;
        double xjxi = rj[0] - ri[0];
        double yjyi = rj[1] - ri[1];
        double zjzi = rj[2] - ri[2];
        double *Rpa = Rpa_cicj + ijp * TILE2*4;
        Rpa[sh_ij+0*TILE2] = xjxi * aj_aij;
        Rpa[sh_ij+1*TILE2] = yjyi * aj_aij;
        Rpa[sh_ij+2*TILE2] = zjzi * aj_aij;
        double theta_ij = ai * aj / aij;
        double Kab = exp(-theta_ij * (xjxi*xjxi+yjyi*yjyi+zjzi*zjzi));
        Rpa[sh_ij+3*TILE2] = ci[ip] * cj[jp] * Kab;
    }
    double *dm1 = j.dm1;
    for (int n = sq_id; n < 84*TILE2; n += nsq_per_block) {
        int m = n / TILE2;
        int ij_sh = n % TILE2;
        int ish = ish0 + ij_sh / TILE;
        int jsh = jsh0 + ij_sh % TILE;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        dm_ij_cache[ij_sh+m*TILE2] = dm1[ij_pair0+m];
    }

    for (int task0 = 0; task0 < ntasks; task0 += nsq_per_block) {
        __syncthreads();
        int task_id = task0 + sq_id;
        double fac_sym = PI_FAC;
        ShellQuartet sq;
        if (task_id >= ntasks) {
            // To avoid __syncthreads blocking blocking idle warps, all remaining
            // threads compute a valid shell quartet with zero normalization factor
            sq = shl_quartet_idx[0];
            fac_sym = 0.;
        } else {
            sq = shl_quartet_idx[task_id];
        }
        int ish = sq.i;
        int jsh = sq.j;
        int ksh = sq.k;
        int lsh = sq.l;
        int sh_ij = (ish % TILE) * TILE + (jsh % TILE);
        if (ish == jsh) fac_sym *= .5;
        if (ksh == lsh) fac_sym *= .5;
        int ij_pair0 = pair_loc1[ish*nbas1+jsh];
        int nbas2 = envs2.nbas;
        int *bas2 = envs2.bas;
        int *pair_loc2 = envs2.ao_loc;
        double *env2 = envs2.env;
        int kl_pair0 = pair_loc2[ksh*nbas2+lsh];
        double *dm2 = j.dm2;
        double dm_kl_003 = dm2[kl_pair0+3];
        double dm_kl_004 = dm2[kl_pair0+4];
        double dm_kl_005 = dm2[kl_pair0+5];
        double dm_kl_006 = dm2[kl_pair0+6];
        double dm_kl_012 = dm2[kl_pair0+9];
        double dm_kl_013 = dm2[kl_pair0+10];
        double dm_kl_014 = dm2[kl_pair0+11];
        double dm_kl_015 = dm2[kl_pair0+12];
        double dm_kl_021 = dm2[kl_pair0+14];
        double dm_kl_022 = dm2[kl_pair0+15];
        double dm_kl_023 = dm2[kl_pair0+16];
        double dm_kl_024 = dm2[kl_pair0+17];
        double dm_kl_030 = dm2[kl_pair0+18];
        double dm_kl_031 = dm2[kl_pair0+19];
        double dm_kl_032 = dm2[kl_pair0+20];
        double dm_kl_033 = dm2[kl_pair0+21];
        double dm_kl_040 = dm2[kl_pair0+22];
        double dm_kl_041 = dm2[kl_pair0+23];
        double dm_kl_042 = dm2[kl_pair0+24];
        double dm_kl_050 = dm2[kl_pair0+25];
        double dm_kl_051 = dm2[kl_pair0+26];
        double dm_kl_060 = dm2[kl_pair0+27];
        double dm_kl_102 = dm2[kl_pair0+30];
        double dm_kl_103 = dm2[kl_pair0+31];
        double dm_kl_104 = dm2[kl_pair0+32];
        double dm_kl_105 = dm2[kl_pair0+33];
        double dm_kl_111 = dm2[kl_pair0+35];
        double dm_kl_112 = dm2[kl_pair0+36];
        double dm_kl_113 = dm2[kl_pair0+37];
        double dm_kl_114 = dm2[kl_pair0+38];
        double dm_kl_120 = dm2[kl_pair0+39];
        double dm_kl_121 = dm2[kl_pair0+40];
        double dm_kl_122 = dm2[kl_pair0+41];
        double dm_kl_123 = dm2[kl_pair0+42];
        double dm_kl_130 = dm2[kl_pair0+43];
        double dm_kl_131 = dm2[kl_pair0+44];
        double dm_kl_132 = dm2[kl_pair0+45];
        double dm_kl_140 = dm2[kl_pair0+46];
        double dm_kl_141 = dm2[kl_pair0+47];
        double dm_kl_150 = dm2[kl_pair0+48];
        double dm_kl_201 = dm2[kl_pair0+50];
        double dm_kl_202 = dm2[kl_pair0+51];
        double dm_kl_203 = dm2[kl_pair0+52];
        double dm_kl_204 = dm2[kl_pair0+53];
        double dm_kl_210 = dm2[kl_pair0+54];
        double dm_kl_211 = dm2[kl_pair0+55];
        double dm_kl_212 = dm2[kl_pair0+56];
        double dm_kl_213 = dm2[kl_pair0+57];
        double dm_kl_220 = dm2[kl_pair0+58];
        double dm_kl_221 = dm2[kl_pair0+59];
        double dm_kl_222 = dm2[kl_pair0+60];
        double dm_kl_230 = dm2[kl_pair0+61];
        double dm_kl_231 = dm2[kl_pair0+62];
        double dm_kl_240 = dm2[kl_pair0+63];
        double dm_kl_300 = dm2[kl_pair0+64];
        double dm_kl_301 = dm2[kl_pair0+65];
        double dm_kl_302 = dm2[kl_pair0+66];
        double dm_kl_303 = dm2[kl_pair0+67];
        double dm_kl_310 = dm2[kl_pair0+68];
        double dm_kl_311 = dm2[kl_pair0+69];
        double dm_kl_312 = dm2[kl_pair0+70];
        double dm_kl_320 = dm2[kl_pair0+71];
        double dm_kl_321 = dm2[kl_pair0+72];
        double dm_kl_330 = dm2[kl_pair0+73];
        double dm_kl_400 = dm2[kl_pair0+74];
        double dm_kl_401 = dm2[kl_pair0+75];
        double dm_kl_402 = dm2[kl_pair0+76];
        double dm_kl_410 = dm2[kl_pair0+77];
        double dm_kl_411 = dm2[kl_pair0+78];
        double dm_kl_420 = dm2[kl_pair0+79];
        double dm_kl_500 = dm2[kl_pair0+80];
        double dm_kl_501 = dm2[kl_pair0+81];
        double dm_kl_510 = dm2[kl_pair0+82];
        double dm_kl_600 = dm2[kl_pair0+83];
        double vj_ij_003 = 0;
        double vj_ij_004 = 0;
        double vj_ij_005 = 0;
        double vj_ij_006 = 0;
        double vj_ij_012 = 0;
        double vj_ij_013 = 0;
        double vj_ij_014 = 0;
        double vj_ij_015 = 0;
        double vj_ij_021 = 0;
        double vj_ij_022 = 0;
        double vj_ij_023 = 0;
        double vj_ij_024 = 0;
        double vj_ij_030 = 0;
        double vj_ij_031 = 0;
        double vj_ij_032 = 0;
        double vj_ij_033 = 0;
        double vj_ij_040 = 0;
        double vj_ij_041 = 0;
        double vj_ij_042 = 0;
        double vj_ij_050 = 0;
        double vj_ij_051 = 0;
        double vj_ij_060 = 0;
        double vj_ij_102 = 0;
        double vj_ij_103 = 0;
        double vj_ij_104 = 0;
        double vj_ij_105 = 0;
        double vj_ij_111 = 0;
        double vj_ij_112 = 0;
        double vj_ij_113 = 0;
        double vj_ij_114 = 0;
        double vj_ij_120 = 0;
        double vj_ij_121 = 0;
        double vj_ij_122 = 0;
        double vj_ij_123 = 0;
        double vj_ij_130 = 0;
        double vj_ij_131 = 0;
        double vj_ij_132 = 0;
        double vj_ij_140 = 0;
        double vj_ij_141 = 0;
        double vj_ij_150 = 0;
        double vj_ij_201 = 0;
        double vj_ij_202 = 0;
        double vj_ij_203 = 0;
        double vj_ij_204 = 0;
        double vj_ij_210 = 0;
        double vj_ij_211 = 0;
        double vj_ij_212 = 0;
        double vj_ij_213 = 0;
        double vj_ij_220 = 0;
        double vj_ij_221 = 0;
        double vj_ij_222 = 0;
        double vj_ij_230 = 0;
        double vj_ij_231 = 0;
        double vj_ij_240 = 0;
        double vj_ij_300 = 0;
        double vj_ij_301 = 0;
        double vj_ij_302 = 0;
        double vj_ij_303 = 0;
        double vj_ij_310 = 0;
        double vj_ij_311 = 0;
        double vj_ij_312 = 0;
        double vj_ij_320 = 0;
        double vj_ij_321 = 0;
        double vj_ij_330 = 0;
        double vj_ij_400 = 0;
        double vj_ij_401 = 0;
        double vj_ij_402 = 0;
        double vj_ij_410 = 0;
        double vj_ij_411 = 0;
        double vj_ij_420 = 0;
        double vj_ij_500 = 0;
        double vj_ij_501 = 0;
        double vj_ij_510 = 0;
        double vj_ij_600 = 0;
        double vj_kl_003 = 0;
        double vj_kl_004 = 0;
        double vj_kl_005 = 0;
        double vj_kl_006 = 0;
        double vj_kl_012 = 0;
        double vj_kl_013 = 0;
        double vj_kl_014 = 0;
        double vj_kl_015 = 0;
        double vj_kl_021 = 0;
        double vj_kl_022 = 0;
        double vj_kl_023 = 0;
        double vj_kl_024 = 0;
        double vj_kl_030 = 0;
        double vj_kl_031 = 0;
        double vj_kl_032 = 0;
        double vj_kl_033 = 0;
        double vj_kl_040 = 0;
        double vj_kl_041 = 0;
        double vj_kl_042 = 0;
        double vj_kl_050 = 0;
        double vj_kl_051 = 0;
        double vj_kl_060 = 0;
        double vj_kl_102 = 0;
        double vj_kl_103 = 0;
        double vj_kl_104 = 0;
        double vj_kl_105 = 0;
        double vj_kl_111 = 0;
        double vj_kl_112 = 0;
        double vj_kl_113 = 0;
        double vj_kl_114 = 0;
        double vj_kl_120 = 0;
        double vj_kl_121 = 0;
        double vj_kl_122 = 0;
        double vj_kl_123 = 0;
        double vj_kl_130 = 0;
        double vj_kl_131 = 0;
        double vj_kl_132 = 0;
        double vj_kl_140 = 0;
        double vj_kl_141 = 0;
        double vj_kl_150 = 0;
        double vj_kl_201 = 0;
        double vj_kl_202 = 0;
        double vj_kl_203 = 0;
        double vj_kl_204 = 0;
        double vj_kl_210 = 0;
        double vj_kl_211 = 0;
        double vj_kl_212 = 0;
        double vj_kl_213 = 0;
        double vj_kl_220 = 0;
        double vj_kl_221 = 0;
        double vj_kl_222 = 0;
        double vj_kl_230 = 0;
        double vj_kl_231 = 0;
        double vj_kl_240 = 0;
        double vj_kl_300 = 0;
        double vj_kl_301 = 0;
        double vj_kl_302 = 0;
        double vj_kl_303 = 0;
        double vj_kl_310 = 0;
        double vj_kl_311 = 0;
        double vj_kl_312 = 0;
        double vj_kl_320 = 0;
        double vj_kl_321 = 0;
        double vj_kl_330 = 0;
        double vj_kl_400 = 0;
        double vj_kl_401 = 0;
        double vj_kl_402 = 0;
        double vj_kl_410 = 0;
        double vj_kl_411 = 0;
        double vj_kl_420 = 0;
        double vj_kl_500 = 0;
        double vj_kl_501 = 0;
        double vj_kl_510 = 0;
        double vj_kl_600 = 0;
        double *expi = env1 + bas1[ish*BAS_SLOTS+PTR_EXP];
        double *expj = env1 + bas1[jsh*BAS_SLOTS+PTR_EXP];
        double *expk = env2 + bas2[ksh*BAS_SLOTS+PTR_EXP];
        double *expl = env2 + bas2[lsh*BAS_SLOTS+PTR_EXP];
        double *ck = env2 + bas2[ksh*BAS_SLOTS+PTR_COEFF];
        double *cl = env2 + bas2[lsh*BAS_SLOTS+PTR_COEFF];
        double *ri = env1 + bas1[ish*BAS_SLOTS+PTR_BAS_COORD];
        double *rk = env2 + bas2[ksh*BAS_SLOTS+PTR_BAS_COORD];
        double *rl = env2 + bas2[lsh*BAS_SLOTS+PTR_BAS_COORD];
        for (int klp = 0; klp < kprim*lprim; ++klp) {
            int kp = klp / lprim;
            int lp = klp % lprim;
            double ak = expk[kp];
            double al = expl[lp];
            double akl = ak + al;
            double al_akl = al / akl;
            double xlxk = rl[0] - rk[0];
            double ylyk = rl[1] - rk[1];
            double zlzk = rl[2] - rk[2];
            double theta_kl = ak * al / akl;
            double Kcd = exp(-theta_kl * (xlxk*xlxk+ylyk*ylyk+zlzk*zlzk));
            double ckcl = fac_sym * ck[kp] * cl[lp] * Kcd;
            double xqc = xlxk * al_akl;
            double yqc = ylyk * al_akl;
            double zqc = zlzk * al_akl;
            for (int ijp = 0; ijp < iprim*jprim; ++ijp) {
                int ip = ijp / jprim;
                int jp = ijp % jprim;
                double ai = expi[ip];
                double aj = expj[jp];
                double aij = ai + aj;
                double *Rpa = Rpa_cicj + ijp * TILE2*4;
                double cicj = Rpa[sh_ij+3*TILE2];
                double fac = cicj * ckcl / (aij*akl*sqrt(aij+akl));
                double xpa = Rpa[sh_ij+0*TILE2];
                double ypa = Rpa[sh_ij+1*TILE2];
                double zpa = Rpa[sh_ij+2*TILE2];
                double xij = ri[0] + xpa;
                double yij = ri[1] + ypa;
                double zij = ri[2] + zpa;
                double xkl = rk[0] + xqc;
                double ykl = rk[1] + yqc;
                double zkl = rk[2] + zqc;
                double xpq = xij - xkl;
                double ypq = yij - ykl;
                double zpq = zij - zkl;
                double theta = aij * akl / (aij + akl);
                double rr = xpq * xpq + ypq * ypq + zpq * zpq;
                double theta_rr = theta * rr;
                if (omega == 0) {
                    rys_roots(7, theta_rr, rw);
                } else {
                    double theta_fac = omega * omega / (omega * omega + theta);
                    rys_roots(7, theta_fac*theta_rr, rw);
                    fac *= sqrt(theta_fac);
                    for (int irys = 0; irys < 7; ++irys) {
                        rw[sq_id+ irys*2   *nsq_per_block] *= theta_fac;
                    }
                }
                for (int irys = 0; irys < 7; ++irys) {
                    double wt = rw[sq_id + (2*irys+1)*nsq_per_block];
                    double rt = rw[sq_id +  2*irys   *nsq_per_block];
                    double rt_aa = rt / (aij + akl);
                    double b00 = .5 * rt_aa;
                    double rt_aij = rt_aa * akl;
                    double b10 = .5/aij * (1 - rt_aij);
                    double c0z = Rpa[sh_ij+2*TILE2] - zpq*rt_aij;
                    double trr_10z = c0z * wt;
                    double trr_20z = c0z * trr_10z + 1*b10 * wt;
                    double trr_30z = c0z * trr_20z + 2*b10 * trr_10z;
                    double trr_40z = c0z * trr_30z + 3*b10 * trr_20z;
                    double trr_50z = c0z * trr_40z + 4*b10 * trr_30z;
                    double trr_60z = c0z * trr_50z + 5*b10 * trr_40z;
                    double dot_lij_z_000 = trr_30z * dm_ij_cache[sh_ij+3*TILE2] + trr_40z * dm_ij_cache[sh_ij+4*TILE2] + trr_50z * dm_ij_cache[sh_ij+5*TILE2] + trr_60z * dm_ij_cache[sh_ij+6*TILE2];
                    double rt_akl = rt_aa * aij;
                    double b01 = .5/akl * (1 - rt_akl);
                    double cpz = zqc + zpq*rt_akl;
                    double trr_31z = cpz * trr_30z + 3*b00 * trr_20z;
                    double trr_41z = cpz * trr_40z + 4*b00 * trr_30z;
                    double trr_51z = cpz * trr_50z + 5*b00 * trr_40z;
                    double trr_61z = cpz * trr_60z + 6*b00 * trr_50z;
                    double dot_lij_z_001 = trr_31z * dm_ij_cache[sh_ij+3*TILE2] + trr_41z * dm_ij_cache[sh_ij+4*TILE2] + trr_51z * dm_ij_cache[sh_ij+5*TILE2] + trr_61z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_21z = cpz * trr_20z + 2*b00 * trr_10z;
                    double trr_32z = cpz * trr_31z + 1*b01 * trr_30z + 3*b00 * trr_21z;
                    double trr_42z = cpz * trr_41z + 1*b01 * trr_40z + 4*b00 * trr_31z;
                    double trr_52z = cpz * trr_51z + 1*b01 * trr_50z + 5*b00 * trr_41z;
                    double trr_62z = cpz * trr_61z + 1*b01 * trr_60z + 6*b00 * trr_51z;
                    double dot_lij_z_002 = trr_32z * dm_ij_cache[sh_ij+3*TILE2] + trr_42z * dm_ij_cache[sh_ij+4*TILE2] + trr_52z * dm_ij_cache[sh_ij+5*TILE2] + trr_62z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_11z = cpz * trr_10z + 1*b00 * wt;
                    double trr_22z = cpz * trr_21z + 1*b01 * trr_20z + 2*b00 * trr_11z;
                    double trr_33z = cpz * trr_32z + 2*b01 * trr_31z + 3*b00 * trr_22z;
                    double trr_43z = cpz * trr_42z + 2*b01 * trr_41z + 4*b00 * trr_32z;
                    double trr_53z = cpz * trr_52z + 2*b01 * trr_51z + 5*b00 * trr_42z;
                    double trr_63z = cpz * trr_62z + 2*b01 * trr_61z + 6*b00 * trr_52z;
                    double dot_lij_z_003 = trr_33z * dm_ij_cache[sh_ij+3*TILE2] + trr_43z * dm_ij_cache[sh_ij+4*TILE2] + trr_53z * dm_ij_cache[sh_ij+5*TILE2] + trr_63z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_01z = cpz * wt;
                    double trr_12z = cpz * trr_11z + 1*b01 * trr_10z + 1*b00 * trr_01z;
                    double trr_23z = cpz * trr_22z + 2*b01 * trr_21z + 2*b00 * trr_12z;
                    double trr_34z = cpz * trr_33z + 3*b01 * trr_32z + 3*b00 * trr_23z;
                    double trr_44z = cpz * trr_43z + 3*b01 * trr_42z + 4*b00 * trr_33z;
                    double trr_54z = cpz * trr_53z + 3*b01 * trr_52z + 5*b00 * trr_43z;
                    double trr_64z = cpz * trr_63z + 3*b01 * trr_62z + 6*b00 * trr_53z;
                    double dot_lij_z_004 = trr_34z * dm_ij_cache[sh_ij+3*TILE2] + trr_44z * dm_ij_cache[sh_ij+4*TILE2] + trr_54z * dm_ij_cache[sh_ij+5*TILE2] + trr_64z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_02z = cpz * trr_01z + 1*b01 * wt;
                    double trr_13z = cpz * trr_12z + 2*b01 * trr_11z + 1*b00 * trr_02z;
                    double trr_24z = cpz * trr_23z + 3*b01 * trr_22z + 2*b00 * trr_13z;
                    double trr_35z = cpz * trr_34z + 4*b01 * trr_33z + 3*b00 * trr_24z;
                    double trr_45z = cpz * trr_44z + 4*b01 * trr_43z + 4*b00 * trr_34z;
                    double trr_55z = cpz * trr_54z + 4*b01 * trr_53z + 5*b00 * trr_44z;
                    double trr_65z = cpz * trr_64z + 4*b01 * trr_63z + 6*b00 * trr_54z;
                    double dot_lij_z_005 = trr_35z * dm_ij_cache[sh_ij+3*TILE2] + trr_45z * dm_ij_cache[sh_ij+4*TILE2] + trr_55z * dm_ij_cache[sh_ij+5*TILE2] + trr_65z * dm_ij_cache[sh_ij+6*TILE2];
                    double trr_03z = cpz * trr_02z + 2*b01 * trr_01z;
                    double trr_14z = cpz * trr_13z + 3*b01 * trr_12z + 1*b00 * trr_03z;
                    double trr_25z = cpz * trr_24z + 4*b01 * trr_23z + 2*b00 * trr_14z;
                    double trr_36z = cpz * trr_35z + 5*b01 * trr_34z + 3*b00 * trr_25z;
                    double trr_46z = cpz * trr_45z + 5*b01 * trr_44z + 4*b00 * trr_35z;
                    double trr_56z = cpz * trr_55z + 5*b01 * trr_54z + 5*b00 * trr_45z;
                    double trr_66z = cpz * trr_65z + 5*b01 * trr_64z + 6*b00 * trr_55z;
                    double dot_lij_z_006 = trr_36z * dm_ij_cache[sh_ij+3*TILE2] + trr_46z * dm_ij_cache[sh_ij+4*TILE2] + trr_56z * dm_ij_cache[sh_ij+5*TILE2] + trr_66z * dm_ij_cache[sh_ij+6*TILE2];
                    double dot_lij_z_010 = trr_20z * dm_ij_cache[sh_ij+9*TILE2] + trr_30z * dm_ij_cache[sh_ij+10*TILE2] + trr_40z * dm_ij_cache[sh_ij+11*TILE2] + trr_50z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_011 = trr_21z * dm_ij_cache[sh_ij+9*TILE2] + trr_31z * dm_ij_cache[sh_ij+10*TILE2] + trr_41z * dm_ij_cache[sh_ij+11*TILE2] + trr_51z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_012 = trr_22z * dm_ij_cache[sh_ij+9*TILE2] + trr_32z * dm_ij_cache[sh_ij+10*TILE2] + trr_42z * dm_ij_cache[sh_ij+11*TILE2] + trr_52z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_013 = trr_23z * dm_ij_cache[sh_ij+9*TILE2] + trr_33z * dm_ij_cache[sh_ij+10*TILE2] + trr_43z * dm_ij_cache[sh_ij+11*TILE2] + trr_53z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_014 = trr_24z * dm_ij_cache[sh_ij+9*TILE2] + trr_34z * dm_ij_cache[sh_ij+10*TILE2] + trr_44z * dm_ij_cache[sh_ij+11*TILE2] + trr_54z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_015 = trr_25z * dm_ij_cache[sh_ij+9*TILE2] + trr_35z * dm_ij_cache[sh_ij+10*TILE2] + trr_45z * dm_ij_cache[sh_ij+11*TILE2] + trr_55z * dm_ij_cache[sh_ij+12*TILE2];
                    double trr_04z = cpz * trr_03z + 3*b01 * trr_02z;
                    double trr_15z = cpz * trr_14z + 4*b01 * trr_13z + 1*b00 * trr_04z;
                    double trr_26z = cpz * trr_25z + 5*b01 * trr_24z + 2*b00 * trr_15z;
                    double dot_lij_z_016 = trr_26z * dm_ij_cache[sh_ij+9*TILE2] + trr_36z * dm_ij_cache[sh_ij+10*TILE2] + trr_46z * dm_ij_cache[sh_ij+11*TILE2] + trr_56z * dm_ij_cache[sh_ij+12*TILE2];
                    double dot_lij_z_020 = trr_10z * dm_ij_cache[sh_ij+14*TILE2] + trr_20z * dm_ij_cache[sh_ij+15*TILE2] + trr_30z * dm_ij_cache[sh_ij+16*TILE2] + trr_40z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_021 = trr_11z * dm_ij_cache[sh_ij+14*TILE2] + trr_21z * dm_ij_cache[sh_ij+15*TILE2] + trr_31z * dm_ij_cache[sh_ij+16*TILE2] + trr_41z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_022 = trr_12z * dm_ij_cache[sh_ij+14*TILE2] + trr_22z * dm_ij_cache[sh_ij+15*TILE2] + trr_32z * dm_ij_cache[sh_ij+16*TILE2] + trr_42z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_023 = trr_13z * dm_ij_cache[sh_ij+14*TILE2] + trr_23z * dm_ij_cache[sh_ij+15*TILE2] + trr_33z * dm_ij_cache[sh_ij+16*TILE2] + trr_43z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_024 = trr_14z * dm_ij_cache[sh_ij+14*TILE2] + trr_24z * dm_ij_cache[sh_ij+15*TILE2] + trr_34z * dm_ij_cache[sh_ij+16*TILE2] + trr_44z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_025 = trr_15z * dm_ij_cache[sh_ij+14*TILE2] + trr_25z * dm_ij_cache[sh_ij+15*TILE2] + trr_35z * dm_ij_cache[sh_ij+16*TILE2] + trr_45z * dm_ij_cache[sh_ij+17*TILE2];
                    double trr_05z = cpz * trr_04z + 4*b01 * trr_03z;
                    double trr_16z = cpz * trr_15z + 5*b01 * trr_14z + 1*b00 * trr_05z;
                    double dot_lij_z_026 = trr_16z * dm_ij_cache[sh_ij+14*TILE2] + trr_26z * dm_ij_cache[sh_ij+15*TILE2] + trr_36z * dm_ij_cache[sh_ij+16*TILE2] + trr_46z * dm_ij_cache[sh_ij+17*TILE2];
                    double dot_lij_z_030 = wt * dm_ij_cache[sh_ij+18*TILE2] + trr_10z * dm_ij_cache[sh_ij+19*TILE2] + trr_20z * dm_ij_cache[sh_ij+20*TILE2] + trr_30z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_031 = trr_01z * dm_ij_cache[sh_ij+18*TILE2] + trr_11z * dm_ij_cache[sh_ij+19*TILE2] + trr_21z * dm_ij_cache[sh_ij+20*TILE2] + trr_31z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_032 = trr_02z * dm_ij_cache[sh_ij+18*TILE2] + trr_12z * dm_ij_cache[sh_ij+19*TILE2] + trr_22z * dm_ij_cache[sh_ij+20*TILE2] + trr_32z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_033 = trr_03z * dm_ij_cache[sh_ij+18*TILE2] + trr_13z * dm_ij_cache[sh_ij+19*TILE2] + trr_23z * dm_ij_cache[sh_ij+20*TILE2] + trr_33z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_034 = trr_04z * dm_ij_cache[sh_ij+18*TILE2] + trr_14z * dm_ij_cache[sh_ij+19*TILE2] + trr_24z * dm_ij_cache[sh_ij+20*TILE2] + trr_34z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_035 = trr_05z * dm_ij_cache[sh_ij+18*TILE2] + trr_15z * dm_ij_cache[sh_ij+19*TILE2] + trr_25z * dm_ij_cache[sh_ij+20*TILE2] + trr_35z * dm_ij_cache[sh_ij+21*TILE2];
                    double trr_06z = cpz * trr_05z + 5*b01 * trr_04z;
                    double dot_lij_z_036 = trr_06z * dm_ij_cache[sh_ij+18*TILE2] + trr_16z * dm_ij_cache[sh_ij+19*TILE2] + trr_26z * dm_ij_cache[sh_ij+20*TILE2] + trr_36z * dm_ij_cache[sh_ij+21*TILE2];
                    double dot_lij_z_040 = wt * dm_ij_cache[sh_ij+22*TILE2] + trr_10z * dm_ij_cache[sh_ij+23*TILE2] + trr_20z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_041 = trr_01z * dm_ij_cache[sh_ij+22*TILE2] + trr_11z * dm_ij_cache[sh_ij+23*TILE2] + trr_21z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_042 = trr_02z * dm_ij_cache[sh_ij+22*TILE2] + trr_12z * dm_ij_cache[sh_ij+23*TILE2] + trr_22z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_043 = trr_03z * dm_ij_cache[sh_ij+22*TILE2] + trr_13z * dm_ij_cache[sh_ij+23*TILE2] + trr_23z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_044 = trr_04z * dm_ij_cache[sh_ij+22*TILE2] + trr_14z * dm_ij_cache[sh_ij+23*TILE2] + trr_24z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_045 = trr_05z * dm_ij_cache[sh_ij+22*TILE2] + trr_15z * dm_ij_cache[sh_ij+23*TILE2] + trr_25z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_046 = trr_06z * dm_ij_cache[sh_ij+22*TILE2] + trr_16z * dm_ij_cache[sh_ij+23*TILE2] + trr_26z * dm_ij_cache[sh_ij+24*TILE2];
                    double dot_lij_z_050 = wt * dm_ij_cache[sh_ij+25*TILE2] + trr_10z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_051 = trr_01z * dm_ij_cache[sh_ij+25*TILE2] + trr_11z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_052 = trr_02z * dm_ij_cache[sh_ij+25*TILE2] + trr_12z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_053 = trr_03z * dm_ij_cache[sh_ij+25*TILE2] + trr_13z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_054 = trr_04z * dm_ij_cache[sh_ij+25*TILE2] + trr_14z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_055 = trr_05z * dm_ij_cache[sh_ij+25*TILE2] + trr_15z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_056 = trr_06z * dm_ij_cache[sh_ij+25*TILE2] + trr_16z * dm_ij_cache[sh_ij+26*TILE2];
                    double dot_lij_z_060 = wt * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_061 = trr_01z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_062 = trr_02z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_063 = trr_03z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_064 = trr_04z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_065 = trr_05z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_066 = trr_06z * dm_ij_cache[sh_ij+27*TILE2];
                    double dot_lij_z_100 = trr_20z * dm_ij_cache[sh_ij+30*TILE2] + trr_30z * dm_ij_cache[sh_ij+31*TILE2] + trr_40z * dm_ij_cache[sh_ij+32*TILE2] + trr_50z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_101 = trr_21z * dm_ij_cache[sh_ij+30*TILE2] + trr_31z * dm_ij_cache[sh_ij+31*TILE2] + trr_41z * dm_ij_cache[sh_ij+32*TILE2] + trr_51z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_102 = trr_22z * dm_ij_cache[sh_ij+30*TILE2] + trr_32z * dm_ij_cache[sh_ij+31*TILE2] + trr_42z * dm_ij_cache[sh_ij+32*TILE2] + trr_52z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_103 = trr_23z * dm_ij_cache[sh_ij+30*TILE2] + trr_33z * dm_ij_cache[sh_ij+31*TILE2] + trr_43z * dm_ij_cache[sh_ij+32*TILE2] + trr_53z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_104 = trr_24z * dm_ij_cache[sh_ij+30*TILE2] + trr_34z * dm_ij_cache[sh_ij+31*TILE2] + trr_44z * dm_ij_cache[sh_ij+32*TILE2] + trr_54z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_105 = trr_25z * dm_ij_cache[sh_ij+30*TILE2] + trr_35z * dm_ij_cache[sh_ij+31*TILE2] + trr_45z * dm_ij_cache[sh_ij+32*TILE2] + trr_55z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_106 = trr_26z * dm_ij_cache[sh_ij+30*TILE2] + trr_36z * dm_ij_cache[sh_ij+31*TILE2] + trr_46z * dm_ij_cache[sh_ij+32*TILE2] + trr_56z * dm_ij_cache[sh_ij+33*TILE2];
                    double dot_lij_z_110 = trr_10z * dm_ij_cache[sh_ij+35*TILE2] + trr_20z * dm_ij_cache[sh_ij+36*TILE2] + trr_30z * dm_ij_cache[sh_ij+37*TILE2] + trr_40z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_111 = trr_11z * dm_ij_cache[sh_ij+35*TILE2] + trr_21z * dm_ij_cache[sh_ij+36*TILE2] + trr_31z * dm_ij_cache[sh_ij+37*TILE2] + trr_41z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_112 = trr_12z * dm_ij_cache[sh_ij+35*TILE2] + trr_22z * dm_ij_cache[sh_ij+36*TILE2] + trr_32z * dm_ij_cache[sh_ij+37*TILE2] + trr_42z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_113 = trr_13z * dm_ij_cache[sh_ij+35*TILE2] + trr_23z * dm_ij_cache[sh_ij+36*TILE2] + trr_33z * dm_ij_cache[sh_ij+37*TILE2] + trr_43z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_114 = trr_14z * dm_ij_cache[sh_ij+35*TILE2] + trr_24z * dm_ij_cache[sh_ij+36*TILE2] + trr_34z * dm_ij_cache[sh_ij+37*TILE2] + trr_44z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_115 = trr_15z * dm_ij_cache[sh_ij+35*TILE2] + trr_25z * dm_ij_cache[sh_ij+36*TILE2] + trr_35z * dm_ij_cache[sh_ij+37*TILE2] + trr_45z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_116 = trr_16z * dm_ij_cache[sh_ij+35*TILE2] + trr_26z * dm_ij_cache[sh_ij+36*TILE2] + trr_36z * dm_ij_cache[sh_ij+37*TILE2] + trr_46z * dm_ij_cache[sh_ij+38*TILE2];
                    double dot_lij_z_120 = wt * dm_ij_cache[sh_ij+39*TILE2] + trr_10z * dm_ij_cache[sh_ij+40*TILE2] + trr_20z * dm_ij_cache[sh_ij+41*TILE2] + trr_30z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_121 = trr_01z * dm_ij_cache[sh_ij+39*TILE2] + trr_11z * dm_ij_cache[sh_ij+40*TILE2] + trr_21z * dm_ij_cache[sh_ij+41*TILE2] + trr_31z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_122 = trr_02z * dm_ij_cache[sh_ij+39*TILE2] + trr_12z * dm_ij_cache[sh_ij+40*TILE2] + trr_22z * dm_ij_cache[sh_ij+41*TILE2] + trr_32z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_123 = trr_03z * dm_ij_cache[sh_ij+39*TILE2] + trr_13z * dm_ij_cache[sh_ij+40*TILE2] + trr_23z * dm_ij_cache[sh_ij+41*TILE2] + trr_33z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_124 = trr_04z * dm_ij_cache[sh_ij+39*TILE2] + trr_14z * dm_ij_cache[sh_ij+40*TILE2] + trr_24z * dm_ij_cache[sh_ij+41*TILE2] + trr_34z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_125 = trr_05z * dm_ij_cache[sh_ij+39*TILE2] + trr_15z * dm_ij_cache[sh_ij+40*TILE2] + trr_25z * dm_ij_cache[sh_ij+41*TILE2] + trr_35z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_126 = trr_06z * dm_ij_cache[sh_ij+39*TILE2] + trr_16z * dm_ij_cache[sh_ij+40*TILE2] + trr_26z * dm_ij_cache[sh_ij+41*TILE2] + trr_36z * dm_ij_cache[sh_ij+42*TILE2];
                    double dot_lij_z_130 = wt * dm_ij_cache[sh_ij+43*TILE2] + trr_10z * dm_ij_cache[sh_ij+44*TILE2] + trr_20z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_131 = trr_01z * dm_ij_cache[sh_ij+43*TILE2] + trr_11z * dm_ij_cache[sh_ij+44*TILE2] + trr_21z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_132 = trr_02z * dm_ij_cache[sh_ij+43*TILE2] + trr_12z * dm_ij_cache[sh_ij+44*TILE2] + trr_22z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_133 = trr_03z * dm_ij_cache[sh_ij+43*TILE2] + trr_13z * dm_ij_cache[sh_ij+44*TILE2] + trr_23z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_134 = trr_04z * dm_ij_cache[sh_ij+43*TILE2] + trr_14z * dm_ij_cache[sh_ij+44*TILE2] + trr_24z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_135 = trr_05z * dm_ij_cache[sh_ij+43*TILE2] + trr_15z * dm_ij_cache[sh_ij+44*TILE2] + trr_25z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_136 = trr_06z * dm_ij_cache[sh_ij+43*TILE2] + trr_16z * dm_ij_cache[sh_ij+44*TILE2] + trr_26z * dm_ij_cache[sh_ij+45*TILE2];
                    double dot_lij_z_140 = wt * dm_ij_cache[sh_ij+46*TILE2] + trr_10z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_141 = trr_01z * dm_ij_cache[sh_ij+46*TILE2] + trr_11z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_142 = trr_02z * dm_ij_cache[sh_ij+46*TILE2] + trr_12z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_143 = trr_03z * dm_ij_cache[sh_ij+46*TILE2] + trr_13z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_144 = trr_04z * dm_ij_cache[sh_ij+46*TILE2] + trr_14z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_145 = trr_05z * dm_ij_cache[sh_ij+46*TILE2] + trr_15z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_146 = trr_06z * dm_ij_cache[sh_ij+46*TILE2] + trr_16z * dm_ij_cache[sh_ij+47*TILE2];
                    double dot_lij_z_150 = wt * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_151 = trr_01z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_152 = trr_02z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_153 = trr_03z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_154 = trr_04z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_155 = trr_05z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_156 = trr_06z * dm_ij_cache[sh_ij+48*TILE2];
                    double dot_lij_z_200 = trr_10z * dm_ij_cache[sh_ij+50*TILE2] + trr_20z * dm_ij_cache[sh_ij+51*TILE2] + trr_30z * dm_ij_cache[sh_ij+52*TILE2] + trr_40z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_201 = trr_11z * dm_ij_cache[sh_ij+50*TILE2] + trr_21z * dm_ij_cache[sh_ij+51*TILE2] + trr_31z * dm_ij_cache[sh_ij+52*TILE2] + trr_41z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_202 = trr_12z * dm_ij_cache[sh_ij+50*TILE2] + trr_22z * dm_ij_cache[sh_ij+51*TILE2] + trr_32z * dm_ij_cache[sh_ij+52*TILE2] + trr_42z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_203 = trr_13z * dm_ij_cache[sh_ij+50*TILE2] + trr_23z * dm_ij_cache[sh_ij+51*TILE2] + trr_33z * dm_ij_cache[sh_ij+52*TILE2] + trr_43z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_204 = trr_14z * dm_ij_cache[sh_ij+50*TILE2] + trr_24z * dm_ij_cache[sh_ij+51*TILE2] + trr_34z * dm_ij_cache[sh_ij+52*TILE2] + trr_44z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_205 = trr_15z * dm_ij_cache[sh_ij+50*TILE2] + trr_25z * dm_ij_cache[sh_ij+51*TILE2] + trr_35z * dm_ij_cache[sh_ij+52*TILE2] + trr_45z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_206 = trr_16z * dm_ij_cache[sh_ij+50*TILE2] + trr_26z * dm_ij_cache[sh_ij+51*TILE2] + trr_36z * dm_ij_cache[sh_ij+52*TILE2] + trr_46z * dm_ij_cache[sh_ij+53*TILE2];
                    double dot_lij_z_210 = wt * dm_ij_cache[sh_ij+54*TILE2] + trr_10z * dm_ij_cache[sh_ij+55*TILE2] + trr_20z * dm_ij_cache[sh_ij+56*TILE2] + trr_30z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_211 = trr_01z * dm_ij_cache[sh_ij+54*TILE2] + trr_11z * dm_ij_cache[sh_ij+55*TILE2] + trr_21z * dm_ij_cache[sh_ij+56*TILE2] + trr_31z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_212 = trr_02z * dm_ij_cache[sh_ij+54*TILE2] + trr_12z * dm_ij_cache[sh_ij+55*TILE2] + trr_22z * dm_ij_cache[sh_ij+56*TILE2] + trr_32z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_213 = trr_03z * dm_ij_cache[sh_ij+54*TILE2] + trr_13z * dm_ij_cache[sh_ij+55*TILE2] + trr_23z * dm_ij_cache[sh_ij+56*TILE2] + trr_33z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_214 = trr_04z * dm_ij_cache[sh_ij+54*TILE2] + trr_14z * dm_ij_cache[sh_ij+55*TILE2] + trr_24z * dm_ij_cache[sh_ij+56*TILE2] + trr_34z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_215 = trr_05z * dm_ij_cache[sh_ij+54*TILE2] + trr_15z * dm_ij_cache[sh_ij+55*TILE2] + trr_25z * dm_ij_cache[sh_ij+56*TILE2] + trr_35z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_216 = trr_06z * dm_ij_cache[sh_ij+54*TILE2] + trr_16z * dm_ij_cache[sh_ij+55*TILE2] + trr_26z * dm_ij_cache[sh_ij+56*TILE2] + trr_36z * dm_ij_cache[sh_ij+57*TILE2];
                    double dot_lij_z_220 = wt * dm_ij_cache[sh_ij+58*TILE2] + trr_10z * dm_ij_cache[sh_ij+59*TILE2] + trr_20z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_221 = trr_01z * dm_ij_cache[sh_ij+58*TILE2] + trr_11z * dm_ij_cache[sh_ij+59*TILE2] + trr_21z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_222 = trr_02z * dm_ij_cache[sh_ij+58*TILE2] + trr_12z * dm_ij_cache[sh_ij+59*TILE2] + trr_22z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_223 = trr_03z * dm_ij_cache[sh_ij+58*TILE2] + trr_13z * dm_ij_cache[sh_ij+59*TILE2] + trr_23z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_224 = trr_04z * dm_ij_cache[sh_ij+58*TILE2] + trr_14z * dm_ij_cache[sh_ij+59*TILE2] + trr_24z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_225 = trr_05z * dm_ij_cache[sh_ij+58*TILE2] + trr_15z * dm_ij_cache[sh_ij+59*TILE2] + trr_25z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_226 = trr_06z * dm_ij_cache[sh_ij+58*TILE2] + trr_16z * dm_ij_cache[sh_ij+59*TILE2] + trr_26z * dm_ij_cache[sh_ij+60*TILE2];
                    double dot_lij_z_230 = wt * dm_ij_cache[sh_ij+61*TILE2] + trr_10z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_231 = trr_01z * dm_ij_cache[sh_ij+61*TILE2] + trr_11z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_232 = trr_02z * dm_ij_cache[sh_ij+61*TILE2] + trr_12z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_233 = trr_03z * dm_ij_cache[sh_ij+61*TILE2] + trr_13z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_234 = trr_04z * dm_ij_cache[sh_ij+61*TILE2] + trr_14z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_235 = trr_05z * dm_ij_cache[sh_ij+61*TILE2] + trr_15z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_236 = trr_06z * dm_ij_cache[sh_ij+61*TILE2] + trr_16z * dm_ij_cache[sh_ij+62*TILE2];
                    double dot_lij_z_240 = wt * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_241 = trr_01z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_242 = trr_02z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_243 = trr_03z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_244 = trr_04z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_245 = trr_05z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_246 = trr_06z * dm_ij_cache[sh_ij+63*TILE2];
                    double dot_lij_z_300 = wt * dm_ij_cache[sh_ij+64*TILE2] + trr_10z * dm_ij_cache[sh_ij+65*TILE2] + trr_20z * dm_ij_cache[sh_ij+66*TILE2] + trr_30z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_301 = trr_01z * dm_ij_cache[sh_ij+64*TILE2] + trr_11z * dm_ij_cache[sh_ij+65*TILE2] + trr_21z * dm_ij_cache[sh_ij+66*TILE2] + trr_31z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_302 = trr_02z * dm_ij_cache[sh_ij+64*TILE2] + trr_12z * dm_ij_cache[sh_ij+65*TILE2] + trr_22z * dm_ij_cache[sh_ij+66*TILE2] + trr_32z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_303 = trr_03z * dm_ij_cache[sh_ij+64*TILE2] + trr_13z * dm_ij_cache[sh_ij+65*TILE2] + trr_23z * dm_ij_cache[sh_ij+66*TILE2] + trr_33z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_304 = trr_04z * dm_ij_cache[sh_ij+64*TILE2] + trr_14z * dm_ij_cache[sh_ij+65*TILE2] + trr_24z * dm_ij_cache[sh_ij+66*TILE2] + trr_34z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_305 = trr_05z * dm_ij_cache[sh_ij+64*TILE2] + trr_15z * dm_ij_cache[sh_ij+65*TILE2] + trr_25z * dm_ij_cache[sh_ij+66*TILE2] + trr_35z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_306 = trr_06z * dm_ij_cache[sh_ij+64*TILE2] + trr_16z * dm_ij_cache[sh_ij+65*TILE2] + trr_26z * dm_ij_cache[sh_ij+66*TILE2] + trr_36z * dm_ij_cache[sh_ij+67*TILE2];
                    double dot_lij_z_310 = wt * dm_ij_cache[sh_ij+68*TILE2] + trr_10z * dm_ij_cache[sh_ij+69*TILE2] + trr_20z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_311 = trr_01z * dm_ij_cache[sh_ij+68*TILE2] + trr_11z * dm_ij_cache[sh_ij+69*TILE2] + trr_21z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_312 = trr_02z * dm_ij_cache[sh_ij+68*TILE2] + trr_12z * dm_ij_cache[sh_ij+69*TILE2] + trr_22z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_313 = trr_03z * dm_ij_cache[sh_ij+68*TILE2] + trr_13z * dm_ij_cache[sh_ij+69*TILE2] + trr_23z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_314 = trr_04z * dm_ij_cache[sh_ij+68*TILE2] + trr_14z * dm_ij_cache[sh_ij+69*TILE2] + trr_24z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_315 = trr_05z * dm_ij_cache[sh_ij+68*TILE2] + trr_15z * dm_ij_cache[sh_ij+69*TILE2] + trr_25z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_316 = trr_06z * dm_ij_cache[sh_ij+68*TILE2] + trr_16z * dm_ij_cache[sh_ij+69*TILE2] + trr_26z * dm_ij_cache[sh_ij+70*TILE2];
                    double dot_lij_z_320 = wt * dm_ij_cache[sh_ij+71*TILE2] + trr_10z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_321 = trr_01z * dm_ij_cache[sh_ij+71*TILE2] + trr_11z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_322 = trr_02z * dm_ij_cache[sh_ij+71*TILE2] + trr_12z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_323 = trr_03z * dm_ij_cache[sh_ij+71*TILE2] + trr_13z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_324 = trr_04z * dm_ij_cache[sh_ij+71*TILE2] + trr_14z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_325 = trr_05z * dm_ij_cache[sh_ij+71*TILE2] + trr_15z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_326 = trr_06z * dm_ij_cache[sh_ij+71*TILE2] + trr_16z * dm_ij_cache[sh_ij+72*TILE2];
                    double dot_lij_z_330 = wt * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_331 = trr_01z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_332 = trr_02z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_333 = trr_03z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_334 = trr_04z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_335 = trr_05z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_336 = trr_06z * dm_ij_cache[sh_ij+73*TILE2];
                    double dot_lij_z_400 = wt * dm_ij_cache[sh_ij+74*TILE2] + trr_10z * dm_ij_cache[sh_ij+75*TILE2] + trr_20z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_401 = trr_01z * dm_ij_cache[sh_ij+74*TILE2] + trr_11z * dm_ij_cache[sh_ij+75*TILE2] + trr_21z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_402 = trr_02z * dm_ij_cache[sh_ij+74*TILE2] + trr_12z * dm_ij_cache[sh_ij+75*TILE2] + trr_22z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_403 = trr_03z * dm_ij_cache[sh_ij+74*TILE2] + trr_13z * dm_ij_cache[sh_ij+75*TILE2] + trr_23z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_404 = trr_04z * dm_ij_cache[sh_ij+74*TILE2] + trr_14z * dm_ij_cache[sh_ij+75*TILE2] + trr_24z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_405 = trr_05z * dm_ij_cache[sh_ij+74*TILE2] + trr_15z * dm_ij_cache[sh_ij+75*TILE2] + trr_25z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_406 = trr_06z * dm_ij_cache[sh_ij+74*TILE2] + trr_16z * dm_ij_cache[sh_ij+75*TILE2] + trr_26z * dm_ij_cache[sh_ij+76*TILE2];
                    double dot_lij_z_410 = wt * dm_ij_cache[sh_ij+77*TILE2] + trr_10z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_411 = trr_01z * dm_ij_cache[sh_ij+77*TILE2] + trr_11z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_412 = trr_02z * dm_ij_cache[sh_ij+77*TILE2] + trr_12z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_413 = trr_03z * dm_ij_cache[sh_ij+77*TILE2] + trr_13z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_414 = trr_04z * dm_ij_cache[sh_ij+77*TILE2] + trr_14z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_415 = trr_05z * dm_ij_cache[sh_ij+77*TILE2] + trr_15z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_416 = trr_06z * dm_ij_cache[sh_ij+77*TILE2] + trr_16z * dm_ij_cache[sh_ij+78*TILE2];
                    double dot_lij_z_420 = wt * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_421 = trr_01z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_422 = trr_02z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_423 = trr_03z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_424 = trr_04z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_425 = trr_05z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_426 = trr_06z * dm_ij_cache[sh_ij+79*TILE2];
                    double dot_lij_z_500 = wt * dm_ij_cache[sh_ij+80*TILE2] + trr_10z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_501 = trr_01z * dm_ij_cache[sh_ij+80*TILE2] + trr_11z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_502 = trr_02z * dm_ij_cache[sh_ij+80*TILE2] + trr_12z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_503 = trr_03z * dm_ij_cache[sh_ij+80*TILE2] + trr_13z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_504 = trr_04z * dm_ij_cache[sh_ij+80*TILE2] + trr_14z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_505 = trr_05z * dm_ij_cache[sh_ij+80*TILE2] + trr_15z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_506 = trr_06z * dm_ij_cache[sh_ij+80*TILE2] + trr_16z * dm_ij_cache[sh_ij+81*TILE2];
                    double dot_lij_z_510 = wt * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_511 = trr_01z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_512 = trr_02z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_513 = trr_03z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_514 = trr_04z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_515 = trr_05z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_516 = trr_06z * dm_ij_cache[sh_ij+82*TILE2];
                    double dot_lij_z_600 = wt * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_601 = trr_01z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_602 = trr_02z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_603 = trr_03z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_604 = trr_04z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_605 = trr_05z * dm_ij_cache[sh_ij+83*TILE2];
                    double dot_lij_z_606 = trr_06z * dm_ij_cache[sh_ij+83*TILE2];
                    double c0y = Rpa[sh_ij+1*TILE2] - ypq*rt_aij;
                    double trr_10y = c0y * 1;
                    double trr_20y = c0y * trr_10y + 1*b10 * 1;
                    double trr_30y = c0y * trr_20y + 2*b10 * trr_10y;
                    double trr_40y = c0y * trr_30y + 3*b10 * trr_20y;
                    double trr_50y = c0y * trr_40y + 4*b10 * trr_30y;
                    double trr_60y = c0y * trr_50y + 5*b10 * trr_40y;
                    double dot_lij_y_000 = 1 * dot_lij_z_000 + trr_10y * dot_lij_z_010 + trr_20y * dot_lij_z_020 + trr_30y * dot_lij_z_030 + trr_40y * dot_lij_z_040 + trr_50y * dot_lij_z_050 + trr_60y * dot_lij_z_060;
                    double dot_lij_y_001 = 1 * dot_lij_z_001 + trr_10y * dot_lij_z_011 + trr_20y * dot_lij_z_021 + trr_30y * dot_lij_z_031 + trr_40y * dot_lij_z_041 + trr_50y * dot_lij_z_051 + trr_60y * dot_lij_z_061;
                    double dot_lij_y_002 = 1 * dot_lij_z_002 + trr_10y * dot_lij_z_012 + trr_20y * dot_lij_z_022 + trr_30y * dot_lij_z_032 + trr_40y * dot_lij_z_042 + trr_50y * dot_lij_z_052 + trr_60y * dot_lij_z_062;
                    double dot_lij_y_003 = 1 * dot_lij_z_003 + trr_10y * dot_lij_z_013 + trr_20y * dot_lij_z_023 + trr_30y * dot_lij_z_033 + trr_40y * dot_lij_z_043 + trr_50y * dot_lij_z_053 + trr_60y * dot_lij_z_063;
                    double dot_lij_y_004 = 1 * dot_lij_z_004 + trr_10y * dot_lij_z_014 + trr_20y * dot_lij_z_024 + trr_30y * dot_lij_z_034 + trr_40y * dot_lij_z_044 + trr_50y * dot_lij_z_054 + trr_60y * dot_lij_z_064;
                    double dot_lij_y_005 = 1 * dot_lij_z_005 + trr_10y * dot_lij_z_015 + trr_20y * dot_lij_z_025 + trr_30y * dot_lij_z_035 + trr_40y * dot_lij_z_045 + trr_50y * dot_lij_z_055 + trr_60y * dot_lij_z_065;
                    double dot_lij_y_006 = 1 * dot_lij_z_006 + trr_10y * dot_lij_z_016 + trr_20y * dot_lij_z_026 + trr_30y * dot_lij_z_036 + trr_40y * dot_lij_z_046 + trr_50y * dot_lij_z_056 + trr_60y * dot_lij_z_066;
                    double cpy = yqc + ypq*rt_akl;
                    double trr_01y = cpy * 1;
                    double trr_11y = cpy * trr_10y + 1*b00 * 1;
                    double trr_21y = cpy * trr_20y + 2*b00 * trr_10y;
                    double trr_31y = cpy * trr_30y + 3*b00 * trr_20y;
                    double trr_41y = cpy * trr_40y + 4*b00 * trr_30y;
                    double trr_51y = cpy * trr_50y + 5*b00 * trr_40y;
                    double trr_61y = cpy * trr_60y + 6*b00 * trr_50y;
                    double dot_lij_y_010 = trr_01y * dot_lij_z_000 + trr_11y * dot_lij_z_010 + trr_21y * dot_lij_z_020 + trr_31y * dot_lij_z_030 + trr_41y * dot_lij_z_040 + trr_51y * dot_lij_z_050 + trr_61y * dot_lij_z_060;
                    double dot_lij_y_011 = trr_01y * dot_lij_z_001 + trr_11y * dot_lij_z_011 + trr_21y * dot_lij_z_021 + trr_31y * dot_lij_z_031 + trr_41y * dot_lij_z_041 + trr_51y * dot_lij_z_051 + trr_61y * dot_lij_z_061;
                    double dot_lij_y_012 = trr_01y * dot_lij_z_002 + trr_11y * dot_lij_z_012 + trr_21y * dot_lij_z_022 + trr_31y * dot_lij_z_032 + trr_41y * dot_lij_z_042 + trr_51y * dot_lij_z_052 + trr_61y * dot_lij_z_062;
                    double dot_lij_y_013 = trr_01y * dot_lij_z_003 + trr_11y * dot_lij_z_013 + trr_21y * dot_lij_z_023 + trr_31y * dot_lij_z_033 + trr_41y * dot_lij_z_043 + trr_51y * dot_lij_z_053 + trr_61y * dot_lij_z_063;
                    double dot_lij_y_014 = trr_01y * dot_lij_z_004 + trr_11y * dot_lij_z_014 + trr_21y * dot_lij_z_024 + trr_31y * dot_lij_z_034 + trr_41y * dot_lij_z_044 + trr_51y * dot_lij_z_054 + trr_61y * dot_lij_z_064;
                    double dot_lij_y_015 = trr_01y * dot_lij_z_005 + trr_11y * dot_lij_z_015 + trr_21y * dot_lij_z_025 + trr_31y * dot_lij_z_035 + trr_41y * dot_lij_z_045 + trr_51y * dot_lij_z_055 + trr_61y * dot_lij_z_065;
                    double trr_02y = cpy * trr_01y + 1*b01 * 1;
                    double trr_12y = cpy * trr_11y + 1*b01 * trr_10y + 1*b00 * trr_01y;
                    double trr_22y = cpy * trr_21y + 1*b01 * trr_20y + 2*b00 * trr_11y;
                    double trr_32y = cpy * trr_31y + 1*b01 * trr_30y + 3*b00 * trr_21y;
                    double trr_42y = cpy * trr_41y + 1*b01 * trr_40y + 4*b00 * trr_31y;
                    double trr_52y = cpy * trr_51y + 1*b01 * trr_50y + 5*b00 * trr_41y;
                    double trr_62y = cpy * trr_61y + 1*b01 * trr_60y + 6*b00 * trr_51y;
                    double dot_lij_y_020 = trr_02y * dot_lij_z_000 + trr_12y * dot_lij_z_010 + trr_22y * dot_lij_z_020 + trr_32y * dot_lij_z_030 + trr_42y * dot_lij_z_040 + trr_52y * dot_lij_z_050 + trr_62y * dot_lij_z_060;
                    double dot_lij_y_021 = trr_02y * dot_lij_z_001 + trr_12y * dot_lij_z_011 + trr_22y * dot_lij_z_021 + trr_32y * dot_lij_z_031 + trr_42y * dot_lij_z_041 + trr_52y * dot_lij_z_051 + trr_62y * dot_lij_z_061;
                    double dot_lij_y_022 = trr_02y * dot_lij_z_002 + trr_12y * dot_lij_z_012 + trr_22y * dot_lij_z_022 + trr_32y * dot_lij_z_032 + trr_42y * dot_lij_z_042 + trr_52y * dot_lij_z_052 + trr_62y * dot_lij_z_062;
                    double dot_lij_y_023 = trr_02y * dot_lij_z_003 + trr_12y * dot_lij_z_013 + trr_22y * dot_lij_z_023 + trr_32y * dot_lij_z_033 + trr_42y * dot_lij_z_043 + trr_52y * dot_lij_z_053 + trr_62y * dot_lij_z_063;
                    double dot_lij_y_024 = trr_02y * dot_lij_z_004 + trr_12y * dot_lij_z_014 + trr_22y * dot_lij_z_024 + trr_32y * dot_lij_z_034 + trr_42y * dot_lij_z_044 + trr_52y * dot_lij_z_054 + trr_62y * dot_lij_z_064;
                    double trr_03y = cpy * trr_02y + 2*b01 * trr_01y;
                    double trr_13y = cpy * trr_12y + 2*b01 * trr_11y + 1*b00 * trr_02y;
                    double trr_23y = cpy * trr_22y + 2*b01 * trr_21y + 2*b00 * trr_12y;
                    double trr_33y = cpy * trr_32y + 2*b01 * trr_31y + 3*b00 * trr_22y;
                    double trr_43y = cpy * trr_42y + 2*b01 * trr_41y + 4*b00 * trr_32y;
                    double trr_53y = cpy * trr_52y + 2*b01 * trr_51y + 5*b00 * trr_42y;
                    double trr_63y = cpy * trr_62y + 2*b01 * trr_61y + 6*b00 * trr_52y;
                    double dot_lij_y_030 = trr_03y * dot_lij_z_000 + trr_13y * dot_lij_z_010 + trr_23y * dot_lij_z_020 + trr_33y * dot_lij_z_030 + trr_43y * dot_lij_z_040 + trr_53y * dot_lij_z_050 + trr_63y * dot_lij_z_060;
                    double dot_lij_y_031 = trr_03y * dot_lij_z_001 + trr_13y * dot_lij_z_011 + trr_23y * dot_lij_z_021 + trr_33y * dot_lij_z_031 + trr_43y * dot_lij_z_041 + trr_53y * dot_lij_z_051 + trr_63y * dot_lij_z_061;
                    double dot_lij_y_032 = trr_03y * dot_lij_z_002 + trr_13y * dot_lij_z_012 + trr_23y * dot_lij_z_022 + trr_33y * dot_lij_z_032 + trr_43y * dot_lij_z_042 + trr_53y * dot_lij_z_052 + trr_63y * dot_lij_z_062;
                    double dot_lij_y_033 = trr_03y * dot_lij_z_003 + trr_13y * dot_lij_z_013 + trr_23y * dot_lij_z_023 + trr_33y * dot_lij_z_033 + trr_43y * dot_lij_z_043 + trr_53y * dot_lij_z_053 + trr_63y * dot_lij_z_063;
                    double trr_04y = cpy * trr_03y + 3*b01 * trr_02y;
                    double trr_14y = cpy * trr_13y + 3*b01 * trr_12y + 1*b00 * trr_03y;
                    double trr_24y = cpy * trr_23y + 3*b01 * trr_22y + 2*b00 * trr_13y;
                    double trr_34y = cpy * trr_33y + 3*b01 * trr_32y + 3*b00 * trr_23y;
                    double trr_44y = cpy * trr_43y + 3*b01 * trr_42y + 4*b00 * trr_33y;
                    double trr_54y = cpy * trr_53y + 3*b01 * trr_52y + 5*b00 * trr_43y;
                    double trr_64y = cpy * trr_63y + 3*b01 * trr_62y + 6*b00 * trr_53y;
                    double dot_lij_y_040 = trr_04y * dot_lij_z_000 + trr_14y * dot_lij_z_010 + trr_24y * dot_lij_z_020 + trr_34y * dot_lij_z_030 + trr_44y * dot_lij_z_040 + trr_54y * dot_lij_z_050 + trr_64y * dot_lij_z_060;
                    double dot_lij_y_041 = trr_04y * dot_lij_z_001 + trr_14y * dot_lij_z_011 + trr_24y * dot_lij_z_021 + trr_34y * dot_lij_z_031 + trr_44y * dot_lij_z_041 + trr_54y * dot_lij_z_051 + trr_64y * dot_lij_z_061;
                    double dot_lij_y_042 = trr_04y * dot_lij_z_002 + trr_14y * dot_lij_z_012 + trr_24y * dot_lij_z_022 + trr_34y * dot_lij_z_032 + trr_44y * dot_lij_z_042 + trr_54y * dot_lij_z_052 + trr_64y * dot_lij_z_062;
                    double trr_05y = cpy * trr_04y + 4*b01 * trr_03y;
                    double trr_15y = cpy * trr_14y + 4*b01 * trr_13y + 1*b00 * trr_04y;
                    double trr_25y = cpy * trr_24y + 4*b01 * trr_23y + 2*b00 * trr_14y;
                    double trr_35y = cpy * trr_34y + 4*b01 * trr_33y + 3*b00 * trr_24y;
                    double trr_45y = cpy * trr_44y + 4*b01 * trr_43y + 4*b00 * trr_34y;
                    double trr_55y = cpy * trr_54y + 4*b01 * trr_53y + 5*b00 * trr_44y;
                    double trr_65y = cpy * trr_64y + 4*b01 * trr_63y + 6*b00 * trr_54y;
                    double dot_lij_y_050 = trr_05y * dot_lij_z_000 + trr_15y * dot_lij_z_010 + trr_25y * dot_lij_z_020 + trr_35y * dot_lij_z_030 + trr_45y * dot_lij_z_040 + trr_55y * dot_lij_z_050 + trr_65y * dot_lij_z_060;
                    double dot_lij_y_051 = trr_05y * dot_lij_z_001 + trr_15y * dot_lij_z_011 + trr_25y * dot_lij_z_021 + trr_35y * dot_lij_z_031 + trr_45y * dot_lij_z_041 + trr_55y * dot_lij_z_051 + trr_65y * dot_lij_z_061;
                    double trr_06y = cpy * trr_05y + 5*b01 * trr_04y;
                    double trr_16y = cpy * trr_15y + 5*b01 * trr_14y + 1*b00 * trr_05y;
                    double trr_26y = cpy * trr_25y + 5*b01 * trr_24y + 2*b00 * trr_15y;
                    double trr_36y = cpy * trr_35y + 5*b01 * trr_34y + 3*b00 * trr_25y;
                    double trr_46y = cpy * trr_45y + 5*b01 * trr_44y + 4*b00 * trr_35y;
                    double trr_56y = cpy * trr_55y + 5*b01 * trr_54y + 5*b00 * trr_45y;
                    double trr_66y = cpy * trr_65y + 5*b01 * trr_64y + 6*b00 * trr_55y;
                    double dot_lij_y_060 = trr_06y * dot_lij_z_000 + trr_16y * dot_lij_z_010 + trr_26y * dot_lij_z_020 + trr_36y * dot_lij_z_030 + trr_46y * dot_lij_z_040 + trr_56y * dot_lij_z_050 + trr_66y * dot_lij_z_060;
                    double dot_lij_y_100 = 1 * dot_lij_z_100 + trr_10y * dot_lij_z_110 + trr_20y * dot_lij_z_120 + trr_30y * dot_lij_z_130 + trr_40y * dot_lij_z_140 + trr_50y * dot_lij_z_150;
                    double dot_lij_y_101 = 1 * dot_lij_z_101 + trr_10y * dot_lij_z_111 + trr_20y * dot_lij_z_121 + trr_30y * dot_lij_z_131 + trr_40y * dot_lij_z_141 + trr_50y * dot_lij_z_151;
                    double dot_lij_y_102 = 1 * dot_lij_z_102 + trr_10y * dot_lij_z_112 + trr_20y * dot_lij_z_122 + trr_30y * dot_lij_z_132 + trr_40y * dot_lij_z_142 + trr_50y * dot_lij_z_152;
                    double dot_lij_y_103 = 1 * dot_lij_z_103 + trr_10y * dot_lij_z_113 + trr_20y * dot_lij_z_123 + trr_30y * dot_lij_z_133 + trr_40y * dot_lij_z_143 + trr_50y * dot_lij_z_153;
                    double dot_lij_y_104 = 1 * dot_lij_z_104 + trr_10y * dot_lij_z_114 + trr_20y * dot_lij_z_124 + trr_30y * dot_lij_z_134 + trr_40y * dot_lij_z_144 + trr_50y * dot_lij_z_154;
                    double dot_lij_y_105 = 1 * dot_lij_z_105 + trr_10y * dot_lij_z_115 + trr_20y * dot_lij_z_125 + trr_30y * dot_lij_z_135 + trr_40y * dot_lij_z_145 + trr_50y * dot_lij_z_155;
                    double dot_lij_y_106 = 1 * dot_lij_z_106 + trr_10y * dot_lij_z_116 + trr_20y * dot_lij_z_126 + trr_30y * dot_lij_z_136 + trr_40y * dot_lij_z_146 + trr_50y * dot_lij_z_156;
                    double dot_lij_y_110 = trr_01y * dot_lij_z_100 + trr_11y * dot_lij_z_110 + trr_21y * dot_lij_z_120 + trr_31y * dot_lij_z_130 + trr_41y * dot_lij_z_140 + trr_51y * dot_lij_z_150;
                    double dot_lij_y_111 = trr_01y * dot_lij_z_101 + trr_11y * dot_lij_z_111 + trr_21y * dot_lij_z_121 + trr_31y * dot_lij_z_131 + trr_41y * dot_lij_z_141 + trr_51y * dot_lij_z_151;
                    double dot_lij_y_112 = trr_01y * dot_lij_z_102 + trr_11y * dot_lij_z_112 + trr_21y * dot_lij_z_122 + trr_31y * dot_lij_z_132 + trr_41y * dot_lij_z_142 + trr_51y * dot_lij_z_152;
                    double dot_lij_y_113 = trr_01y * dot_lij_z_103 + trr_11y * dot_lij_z_113 + trr_21y * dot_lij_z_123 + trr_31y * dot_lij_z_133 + trr_41y * dot_lij_z_143 + trr_51y * dot_lij_z_153;
                    double dot_lij_y_114 = trr_01y * dot_lij_z_104 + trr_11y * dot_lij_z_114 + trr_21y * dot_lij_z_124 + trr_31y * dot_lij_z_134 + trr_41y * dot_lij_z_144 + trr_51y * dot_lij_z_154;
                    double dot_lij_y_115 = trr_01y * dot_lij_z_105 + trr_11y * dot_lij_z_115 + trr_21y * dot_lij_z_125 + trr_31y * dot_lij_z_135 + trr_41y * dot_lij_z_145 + trr_51y * dot_lij_z_155;
                    double dot_lij_y_120 = trr_02y * dot_lij_z_100 + trr_12y * dot_lij_z_110 + trr_22y * dot_lij_z_120 + trr_32y * dot_lij_z_130 + trr_42y * dot_lij_z_140 + trr_52y * dot_lij_z_150;
                    double dot_lij_y_121 = trr_02y * dot_lij_z_101 + trr_12y * dot_lij_z_111 + trr_22y * dot_lij_z_121 + trr_32y * dot_lij_z_131 + trr_42y * dot_lij_z_141 + trr_52y * dot_lij_z_151;
                    double dot_lij_y_122 = trr_02y * dot_lij_z_102 + trr_12y * dot_lij_z_112 + trr_22y * dot_lij_z_122 + trr_32y * dot_lij_z_132 + trr_42y * dot_lij_z_142 + trr_52y * dot_lij_z_152;
                    double dot_lij_y_123 = trr_02y * dot_lij_z_103 + trr_12y * dot_lij_z_113 + trr_22y * dot_lij_z_123 + trr_32y * dot_lij_z_133 + trr_42y * dot_lij_z_143 + trr_52y * dot_lij_z_153;
                    double dot_lij_y_124 = trr_02y * dot_lij_z_104 + trr_12y * dot_lij_z_114 + trr_22y * dot_lij_z_124 + trr_32y * dot_lij_z_134 + trr_42y * dot_lij_z_144 + trr_52y * dot_lij_z_154;
                    double dot_lij_y_130 = trr_03y * dot_lij_z_100 + trr_13y * dot_lij_z_110 + trr_23y * dot_lij_z_120 + trr_33y * dot_lij_z_130 + trr_43y * dot_lij_z_140 + trr_53y * dot_lij_z_150;
                    double dot_lij_y_131 = trr_03y * dot_lij_z_101 + trr_13y * dot_lij_z_111 + trr_23y * dot_lij_z_121 + trr_33y * dot_lij_z_131 + trr_43y * dot_lij_z_141 + trr_53y * dot_lij_z_151;
                    double dot_lij_y_132 = trr_03y * dot_lij_z_102 + trr_13y * dot_lij_z_112 + trr_23y * dot_lij_z_122 + trr_33y * dot_lij_z_132 + trr_43y * dot_lij_z_142 + trr_53y * dot_lij_z_152;
                    double dot_lij_y_133 = trr_03y * dot_lij_z_103 + trr_13y * dot_lij_z_113 + trr_23y * dot_lij_z_123 + trr_33y * dot_lij_z_133 + trr_43y * dot_lij_z_143 + trr_53y * dot_lij_z_153;
                    double dot_lij_y_140 = trr_04y * dot_lij_z_100 + trr_14y * dot_lij_z_110 + trr_24y * dot_lij_z_120 + trr_34y * dot_lij_z_130 + trr_44y * dot_lij_z_140 + trr_54y * dot_lij_z_150;
                    double dot_lij_y_141 = trr_04y * dot_lij_z_101 + trr_14y * dot_lij_z_111 + trr_24y * dot_lij_z_121 + trr_34y * dot_lij_z_131 + trr_44y * dot_lij_z_141 + trr_54y * dot_lij_z_151;
                    double dot_lij_y_142 = trr_04y * dot_lij_z_102 + trr_14y * dot_lij_z_112 + trr_24y * dot_lij_z_122 + trr_34y * dot_lij_z_132 + trr_44y * dot_lij_z_142 + trr_54y * dot_lij_z_152;
                    double dot_lij_y_150 = trr_05y * dot_lij_z_100 + trr_15y * dot_lij_z_110 + trr_25y * dot_lij_z_120 + trr_35y * dot_lij_z_130 + trr_45y * dot_lij_z_140 + trr_55y * dot_lij_z_150;
                    double dot_lij_y_151 = trr_05y * dot_lij_z_101 + trr_15y * dot_lij_z_111 + trr_25y * dot_lij_z_121 + trr_35y * dot_lij_z_131 + trr_45y * dot_lij_z_141 + trr_55y * dot_lij_z_151;
                    double dot_lij_y_160 = trr_06y * dot_lij_z_100 + trr_16y * dot_lij_z_110 + trr_26y * dot_lij_z_120 + trr_36y * dot_lij_z_130 + trr_46y * dot_lij_z_140 + trr_56y * dot_lij_z_150;
                    double dot_lij_y_200 = 1 * dot_lij_z_200 + trr_10y * dot_lij_z_210 + trr_20y * dot_lij_z_220 + trr_30y * dot_lij_z_230 + trr_40y * dot_lij_z_240;
                    double dot_lij_y_201 = 1 * dot_lij_z_201 + trr_10y * dot_lij_z_211 + trr_20y * dot_lij_z_221 + trr_30y * dot_lij_z_231 + trr_40y * dot_lij_z_241;
                    double dot_lij_y_202 = 1 * dot_lij_z_202 + trr_10y * dot_lij_z_212 + trr_20y * dot_lij_z_222 + trr_30y * dot_lij_z_232 + trr_40y * dot_lij_z_242;
                    double dot_lij_y_203 = 1 * dot_lij_z_203 + trr_10y * dot_lij_z_213 + trr_20y * dot_lij_z_223 + trr_30y * dot_lij_z_233 + trr_40y * dot_lij_z_243;
                    double dot_lij_y_204 = 1 * dot_lij_z_204 + trr_10y * dot_lij_z_214 + trr_20y * dot_lij_z_224 + trr_30y * dot_lij_z_234 + trr_40y * dot_lij_z_244;
                    double dot_lij_y_205 = 1 * dot_lij_z_205 + trr_10y * dot_lij_z_215 + trr_20y * dot_lij_z_225 + trr_30y * dot_lij_z_235 + trr_40y * dot_lij_z_245;
                    double dot_lij_y_206 = 1 * dot_lij_z_206 + trr_10y * dot_lij_z_216 + trr_20y * dot_lij_z_226 + trr_30y * dot_lij_z_236 + trr_40y * dot_lij_z_246;
                    double dot_lij_y_210 = trr_01y * dot_lij_z_200 + trr_11y * dot_lij_z_210 + trr_21y * dot_lij_z_220 + trr_31y * dot_lij_z_230 + trr_41y * dot_lij_z_240;
                    double dot_lij_y_211 = trr_01y * dot_lij_z_201 + trr_11y * dot_lij_z_211 + trr_21y * dot_lij_z_221 + trr_31y * dot_lij_z_231 + trr_41y * dot_lij_z_241;
                    double dot_lij_y_212 = trr_01y * dot_lij_z_202 + trr_11y * dot_lij_z_212 + trr_21y * dot_lij_z_222 + trr_31y * dot_lij_z_232 + trr_41y * dot_lij_z_242;
                    double dot_lij_y_213 = trr_01y * dot_lij_z_203 + trr_11y * dot_lij_z_213 + trr_21y * dot_lij_z_223 + trr_31y * dot_lij_z_233 + trr_41y * dot_lij_z_243;
                    double dot_lij_y_214 = trr_01y * dot_lij_z_204 + trr_11y * dot_lij_z_214 + trr_21y * dot_lij_z_224 + trr_31y * dot_lij_z_234 + trr_41y * dot_lij_z_244;
                    double dot_lij_y_215 = trr_01y * dot_lij_z_205 + trr_11y * dot_lij_z_215 + trr_21y * dot_lij_z_225 + trr_31y * dot_lij_z_235 + trr_41y * dot_lij_z_245;
                    double dot_lij_y_220 = trr_02y * dot_lij_z_200 + trr_12y * dot_lij_z_210 + trr_22y * dot_lij_z_220 + trr_32y * dot_lij_z_230 + trr_42y * dot_lij_z_240;
                    double dot_lij_y_221 = trr_02y * dot_lij_z_201 + trr_12y * dot_lij_z_211 + trr_22y * dot_lij_z_221 + trr_32y * dot_lij_z_231 + trr_42y * dot_lij_z_241;
                    double dot_lij_y_222 = trr_02y * dot_lij_z_202 + trr_12y * dot_lij_z_212 + trr_22y * dot_lij_z_222 + trr_32y * dot_lij_z_232 + trr_42y * dot_lij_z_242;
                    double dot_lij_y_223 = trr_02y * dot_lij_z_203 + trr_12y * dot_lij_z_213 + trr_22y * dot_lij_z_223 + trr_32y * dot_lij_z_233 + trr_42y * dot_lij_z_243;
                    double dot_lij_y_224 = trr_02y * dot_lij_z_204 + trr_12y * dot_lij_z_214 + trr_22y * dot_lij_z_224 + trr_32y * dot_lij_z_234 + trr_42y * dot_lij_z_244;
                    double dot_lij_y_230 = trr_03y * dot_lij_z_200 + trr_13y * dot_lij_z_210 + trr_23y * dot_lij_z_220 + trr_33y * dot_lij_z_230 + trr_43y * dot_lij_z_240;
                    double dot_lij_y_231 = trr_03y * dot_lij_z_201 + trr_13y * dot_lij_z_211 + trr_23y * dot_lij_z_221 + trr_33y * dot_lij_z_231 + trr_43y * dot_lij_z_241;
                    double dot_lij_y_232 = trr_03y * dot_lij_z_202 + trr_13y * dot_lij_z_212 + trr_23y * dot_lij_z_222 + trr_33y * dot_lij_z_232 + trr_43y * dot_lij_z_242;
                    double dot_lij_y_233 = trr_03y * dot_lij_z_203 + trr_13y * dot_lij_z_213 + trr_23y * dot_lij_z_223 + trr_33y * dot_lij_z_233 + trr_43y * dot_lij_z_243;
                    double dot_lij_y_240 = trr_04y * dot_lij_z_200 + trr_14y * dot_lij_z_210 + trr_24y * dot_lij_z_220 + trr_34y * dot_lij_z_230 + trr_44y * dot_lij_z_240;
                    double dot_lij_y_241 = trr_04y * dot_lij_z_201 + trr_14y * dot_lij_z_211 + trr_24y * dot_lij_z_221 + trr_34y * dot_lij_z_231 + trr_44y * dot_lij_z_241;
                    double dot_lij_y_242 = trr_04y * dot_lij_z_202 + trr_14y * dot_lij_z_212 + trr_24y * dot_lij_z_222 + trr_34y * dot_lij_z_232 + trr_44y * dot_lij_z_242;
                    double dot_lij_y_250 = trr_05y * dot_lij_z_200 + trr_15y * dot_lij_z_210 + trr_25y * dot_lij_z_220 + trr_35y * dot_lij_z_230 + trr_45y * dot_lij_z_240;
                    double dot_lij_y_251 = trr_05y * dot_lij_z_201 + trr_15y * dot_lij_z_211 + trr_25y * dot_lij_z_221 + trr_35y * dot_lij_z_231 + trr_45y * dot_lij_z_241;
                    double dot_lij_y_260 = trr_06y * dot_lij_z_200 + trr_16y * dot_lij_z_210 + trr_26y * dot_lij_z_220 + trr_36y * dot_lij_z_230 + trr_46y * dot_lij_z_240;
                    double dot_lij_y_300 = 1 * dot_lij_z_300 + trr_10y * dot_lij_z_310 + trr_20y * dot_lij_z_320 + trr_30y * dot_lij_z_330;
                    double dot_lij_y_301 = 1 * dot_lij_z_301 + trr_10y * dot_lij_z_311 + trr_20y * dot_lij_z_321 + trr_30y * dot_lij_z_331;
                    double dot_lij_y_302 = 1 * dot_lij_z_302 + trr_10y * dot_lij_z_312 + trr_20y * dot_lij_z_322 + trr_30y * dot_lij_z_332;
                    double dot_lij_y_303 = 1 * dot_lij_z_303 + trr_10y * dot_lij_z_313 + trr_20y * dot_lij_z_323 + trr_30y * dot_lij_z_333;
                    double dot_lij_y_304 = 1 * dot_lij_z_304 + trr_10y * dot_lij_z_314 + trr_20y * dot_lij_z_324 + trr_30y * dot_lij_z_334;
                    double dot_lij_y_305 = 1 * dot_lij_z_305 + trr_10y * dot_lij_z_315 + trr_20y * dot_lij_z_325 + trr_30y * dot_lij_z_335;
                    double dot_lij_y_306 = 1 * dot_lij_z_306 + trr_10y * dot_lij_z_316 + trr_20y * dot_lij_z_326 + trr_30y * dot_lij_z_336;
                    double dot_lij_y_310 = trr_01y * dot_lij_z_300 + trr_11y * dot_lij_z_310 + trr_21y * dot_lij_z_320 + trr_31y * dot_lij_z_330;
                    double dot_lij_y_311 = trr_01y * dot_lij_z_301 + trr_11y * dot_lij_z_311 + trr_21y * dot_lij_z_321 + trr_31y * dot_lij_z_331;
                    double dot_lij_y_312 = trr_01y * dot_lij_z_302 + trr_11y * dot_lij_z_312 + trr_21y * dot_lij_z_322 + trr_31y * dot_lij_z_332;
                    double dot_lij_y_313 = trr_01y * dot_lij_z_303 + trr_11y * dot_lij_z_313 + trr_21y * dot_lij_z_323 + trr_31y * dot_lij_z_333;
                    double dot_lij_y_314 = trr_01y * dot_lij_z_304 + trr_11y * dot_lij_z_314 + trr_21y * dot_lij_z_324 + trr_31y * dot_lij_z_334;
                    double dot_lij_y_315 = trr_01y * dot_lij_z_305 + trr_11y * dot_lij_z_315 + trr_21y * dot_lij_z_325 + trr_31y * dot_lij_z_335;
                    double dot_lij_y_320 = trr_02y * dot_lij_z_300 + trr_12y * dot_lij_z_310 + trr_22y * dot_lij_z_320 + trr_32y * dot_lij_z_330;
                    double dot_lij_y_321 = trr_02y * dot_lij_z_301 + trr_12y * dot_lij_z_311 + trr_22y * dot_lij_z_321 + trr_32y * dot_lij_z_331;
                    double dot_lij_y_322 = trr_02y * dot_lij_z_302 + trr_12y * dot_lij_z_312 + trr_22y * dot_lij_z_322 + trr_32y * dot_lij_z_332;
                    double dot_lij_y_323 = trr_02y * dot_lij_z_303 + trr_12y * dot_lij_z_313 + trr_22y * dot_lij_z_323 + trr_32y * dot_lij_z_333;
                    double dot_lij_y_324 = trr_02y * dot_lij_z_304 + trr_12y * dot_lij_z_314 + trr_22y * dot_lij_z_324 + trr_32y * dot_lij_z_334;
                    double dot_lij_y_330 = trr_03y * dot_lij_z_300 + trr_13y * dot_lij_z_310 + trr_23y * dot_lij_z_320 + trr_33y * dot_lij_z_330;
                    double dot_lij_y_331 = trr_03y * dot_lij_z_301 + trr_13y * dot_lij_z_311 + trr_23y * dot_lij_z_321 + trr_33y * dot_lij_z_331;
                    double dot_lij_y_332 = trr_03y * dot_lij_z_302 + trr_13y * dot_lij_z_312 + trr_23y * dot_lij_z_322 + trr_33y * dot_lij_z_332;
                    double dot_lij_y_333 = trr_03y * dot_lij_z_303 + trr_13y * dot_lij_z_313 + trr_23y * dot_lij_z_323 + trr_33y * dot_lij_z_333;
                    double dot_lij_y_340 = trr_04y * dot_lij_z_300 + trr_14y * dot_lij_z_310 + trr_24y * dot_lij_z_320 + trr_34y * dot_lij_z_330;
                    double dot_lij_y_341 = trr_04y * dot_lij_z_301 + trr_14y * dot_lij_z_311 + trr_24y * dot_lij_z_321 + trr_34y * dot_lij_z_331;
                    double dot_lij_y_342 = trr_04y * dot_lij_z_302 + trr_14y * dot_lij_z_312 + trr_24y * dot_lij_z_322 + trr_34y * dot_lij_z_332;
                    double dot_lij_y_350 = trr_05y * dot_lij_z_300 + trr_15y * dot_lij_z_310 + trr_25y * dot_lij_z_320 + trr_35y * dot_lij_z_330;
                    double dot_lij_y_351 = trr_05y * dot_lij_z_301 + trr_15y * dot_lij_z_311 + trr_25y * dot_lij_z_321 + trr_35y * dot_lij_z_331;
                    double dot_lij_y_360 = trr_06y * dot_lij_z_300 + trr_16y * dot_lij_z_310 + trr_26y * dot_lij_z_320 + trr_36y * dot_lij_z_330;
                    double dot_lij_y_400 = 1 * dot_lij_z_400 + trr_10y * dot_lij_z_410 + trr_20y * dot_lij_z_420;
                    double dot_lij_y_401 = 1 * dot_lij_z_401 + trr_10y * dot_lij_z_411 + trr_20y * dot_lij_z_421;
                    double dot_lij_y_402 = 1 * dot_lij_z_402 + trr_10y * dot_lij_z_412 + trr_20y * dot_lij_z_422;
                    double dot_lij_y_403 = 1 * dot_lij_z_403 + trr_10y * dot_lij_z_413 + trr_20y * dot_lij_z_423;
                    double dot_lij_y_404 = 1 * dot_lij_z_404 + trr_10y * dot_lij_z_414 + trr_20y * dot_lij_z_424;
                    double dot_lij_y_405 = 1 * dot_lij_z_405 + trr_10y * dot_lij_z_415 + trr_20y * dot_lij_z_425;
                    double dot_lij_y_406 = 1 * dot_lij_z_406 + trr_10y * dot_lij_z_416 + trr_20y * dot_lij_z_426;
                    double dot_lij_y_410 = trr_01y * dot_lij_z_400 + trr_11y * dot_lij_z_410 + trr_21y * dot_lij_z_420;
                    double dot_lij_y_411 = trr_01y * dot_lij_z_401 + trr_11y * dot_lij_z_411 + trr_21y * dot_lij_z_421;
                    double dot_lij_y_412 = trr_01y * dot_lij_z_402 + trr_11y * dot_lij_z_412 + trr_21y * dot_lij_z_422;
                    double dot_lij_y_413 = trr_01y * dot_lij_z_403 + trr_11y * dot_lij_z_413 + trr_21y * dot_lij_z_423;
                    double dot_lij_y_414 = trr_01y * dot_lij_z_404 + trr_11y * dot_lij_z_414 + trr_21y * dot_lij_z_424;
                    double dot_lij_y_415 = trr_01y * dot_lij_z_405 + trr_11y * dot_lij_z_415 + trr_21y * dot_lij_z_425;
                    double dot_lij_y_420 = trr_02y * dot_lij_z_400 + trr_12y * dot_lij_z_410 + trr_22y * dot_lij_z_420;
                    double dot_lij_y_421 = trr_02y * dot_lij_z_401 + trr_12y * dot_lij_z_411 + trr_22y * dot_lij_z_421;
                    double dot_lij_y_422 = trr_02y * dot_lij_z_402 + trr_12y * dot_lij_z_412 + trr_22y * dot_lij_z_422;
                    double dot_lij_y_423 = trr_02y * dot_lij_z_403 + trr_12y * dot_lij_z_413 + trr_22y * dot_lij_z_423;
                    double dot_lij_y_424 = trr_02y * dot_lij_z_404 + trr_12y * dot_lij_z_414 + trr_22y * dot_lij_z_424;
                    double dot_lij_y_430 = trr_03y * dot_lij_z_400 + trr_13y * dot_lij_z_410 + trr_23y * dot_lij_z_420;
                    double dot_lij_y_431 = trr_03y * dot_lij_z_401 + trr_13y * dot_lij_z_411 + trr_23y * dot_lij_z_421;
                    double dot_lij_y_432 = trr_03y * dot_lij_z_402 + trr_13y * dot_lij_z_412 + trr_23y * dot_lij_z_422;
                    double dot_lij_y_433 = trr_03y * dot_lij_z_403 + trr_13y * dot_lij_z_413 + trr_23y * dot_lij_z_423;
                    double dot_lij_y_440 = trr_04y * dot_lij_z_400 + trr_14y * dot_lij_z_410 + trr_24y * dot_lij_z_420;
                    double dot_lij_y_441 = trr_04y * dot_lij_z_401 + trr_14y * dot_lij_z_411 + trr_24y * dot_lij_z_421;
                    double dot_lij_y_442 = trr_04y * dot_lij_z_402 + trr_14y * dot_lij_z_412 + trr_24y * dot_lij_z_422;
                    double dot_lij_y_450 = trr_05y * dot_lij_z_400 + trr_15y * dot_lij_z_410 + trr_25y * dot_lij_z_420;
                    double dot_lij_y_451 = trr_05y * dot_lij_z_401 + trr_15y * dot_lij_z_411 + trr_25y * dot_lij_z_421;
                    double dot_lij_y_460 = trr_06y * dot_lij_z_400 + trr_16y * dot_lij_z_410 + trr_26y * dot_lij_z_420;
                    double dot_lij_y_500 = 1 * dot_lij_z_500 + trr_10y * dot_lij_z_510;
                    double dot_lij_y_501 = 1 * dot_lij_z_501 + trr_10y * dot_lij_z_511;
                    double dot_lij_y_502 = 1 * dot_lij_z_502 + trr_10y * dot_lij_z_512;
                    double dot_lij_y_503 = 1 * dot_lij_z_503 + trr_10y * dot_lij_z_513;
                    double dot_lij_y_504 = 1 * dot_lij_z_504 + trr_10y * dot_lij_z_514;
                    double dot_lij_y_505 = 1 * dot_lij_z_505 + trr_10y * dot_lij_z_515;
                    double dot_lij_y_506 = 1 * dot_lij_z_506 + trr_10y * dot_lij_z_516;
                    double dot_lij_y_510 = trr_01y * dot_lij_z_500 + trr_11y * dot_lij_z_510;
                    double dot_lij_y_511 = trr_01y * dot_lij_z_501 + trr_11y * dot_lij_z_511;
                    double dot_lij_y_512 = trr_01y * dot_lij_z_502 + trr_11y * dot_lij_z_512;
                    double dot_lij_y_513 = trr_01y * dot_lij_z_503 + trr_11y * dot_lij_z_513;
                    double dot_lij_y_514 = trr_01y * dot_lij_z_504 + trr_11y * dot_lij_z_514;
                    double dot_lij_y_515 = trr_01y * dot_lij_z_505 + trr_11y * dot_lij_z_515;
                    double dot_lij_y_520 = trr_02y * dot_lij_z_500 + trr_12y * dot_lij_z_510;
                    double dot_lij_y_521 = trr_02y * dot_lij_z_501 + trr_12y * dot_lij_z_511;
                    double dot_lij_y_522 = trr_02y * dot_lij_z_502 + trr_12y * dot_lij_z_512;
                    double dot_lij_y_523 = trr_02y * dot_lij_z_503 + trr_12y * dot_lij_z_513;
                    double dot_lij_y_524 = trr_02y * dot_lij_z_504 + trr_12y * dot_lij_z_514;
                    double dot_lij_y_530 = trr_03y * dot_lij_z_500 + trr_13y * dot_lij_z_510;
                    double dot_lij_y_531 = trr_03y * dot_lij_z_501 + trr_13y * dot_lij_z_511;
                    double dot_lij_y_532 = trr_03y * dot_lij_z_502 + trr_13y * dot_lij_z_512;
                    double dot_lij_y_533 = trr_03y * dot_lij_z_503 + trr_13y * dot_lij_z_513;
                    double dot_lij_y_540 = trr_04y * dot_lij_z_500 + trr_14y * dot_lij_z_510;
                    double dot_lij_y_541 = trr_04y * dot_lij_z_501 + trr_14y * dot_lij_z_511;
                    double dot_lij_y_542 = trr_04y * dot_lij_z_502 + trr_14y * dot_lij_z_512;
                    double dot_lij_y_550 = trr_05y * dot_lij_z_500 + trr_15y * dot_lij_z_510;
                    double dot_lij_y_551 = trr_05y * dot_lij_z_501 + trr_15y * dot_lij_z_511;
                    double dot_lij_y_560 = trr_06y * dot_lij_z_500 + trr_16y * dot_lij_z_510;
                    double dot_lij_y_600 = 1 * dot_lij_z_600;
                    double dot_lij_y_601 = 1 * dot_lij_z_601;
                    double dot_lij_y_602 = 1 * dot_lij_z_602;
                    double dot_lij_y_603 = 1 * dot_lij_z_603;
                    double dot_lij_y_604 = 1 * dot_lij_z_604;
                    double dot_lij_y_605 = 1 * dot_lij_z_605;
                    double dot_lij_y_606 = 1 * dot_lij_z_606;
                    double dot_lij_y_610 = trr_01y * dot_lij_z_600;
                    double dot_lij_y_611 = trr_01y * dot_lij_z_601;
                    double dot_lij_y_612 = trr_01y * dot_lij_z_602;
                    double dot_lij_y_613 = trr_01y * dot_lij_z_603;
                    double dot_lij_y_614 = trr_01y * dot_lij_z_604;
                    double dot_lij_y_615 = trr_01y * dot_lij_z_605;
                    double dot_lij_y_620 = trr_02y * dot_lij_z_600;
                    double dot_lij_y_621 = trr_02y * dot_lij_z_601;
                    double dot_lij_y_622 = trr_02y * dot_lij_z_602;
                    double dot_lij_y_623 = trr_02y * dot_lij_z_603;
                    double dot_lij_y_624 = trr_02y * dot_lij_z_604;
                    double dot_lij_y_630 = trr_03y * dot_lij_z_600;
                    double dot_lij_y_631 = trr_03y * dot_lij_z_601;
                    double dot_lij_y_632 = trr_03y * dot_lij_z_602;
                    double dot_lij_y_633 = trr_03y * dot_lij_z_603;
                    double dot_lij_y_640 = trr_04y * dot_lij_z_600;
                    double dot_lij_y_641 = trr_04y * dot_lij_z_601;
                    double dot_lij_y_642 = trr_04y * dot_lij_z_602;
                    double dot_lij_y_650 = trr_05y * dot_lij_z_600;
                    double dot_lij_y_651 = trr_05y * dot_lij_z_601;
                    double dot_lij_y_660 = trr_06y * dot_lij_z_600;
                    double c0x = Rpa[sh_ij+0*TILE2] - xpq*rt_aij;
                    double trr_10x = c0x * fac;
                    double trr_20x = c0x * trr_10x + 1*b10 * fac;
                    double trr_30x = c0x * trr_20x + 2*b10 * trr_10x;
                    double trr_40x = c0x * trr_30x + 3*b10 * trr_20x;
                    double trr_50x = c0x * trr_40x + 4*b10 * trr_30x;
                    double trr_60x = c0x * trr_50x + 5*b10 * trr_40x;
                    vj_kl_003 += fac * dot_lij_y_003 + trr_10x * dot_lij_y_103 + trr_20x * dot_lij_y_203 + trr_30x * dot_lij_y_303 + trr_40x * dot_lij_y_403 + trr_50x * dot_lij_y_503 + trr_60x * dot_lij_y_603;
                    vj_kl_004 += fac * dot_lij_y_004 + trr_10x * dot_lij_y_104 + trr_20x * dot_lij_y_204 + trr_30x * dot_lij_y_304 + trr_40x * dot_lij_y_404 + trr_50x * dot_lij_y_504 + trr_60x * dot_lij_y_604;
                    vj_kl_005 += fac * dot_lij_y_005 + trr_10x * dot_lij_y_105 + trr_20x * dot_lij_y_205 + trr_30x * dot_lij_y_305 + trr_40x * dot_lij_y_405 + trr_50x * dot_lij_y_505 + trr_60x * dot_lij_y_605;
                    vj_kl_006 += fac * dot_lij_y_006 + trr_10x * dot_lij_y_106 + trr_20x * dot_lij_y_206 + trr_30x * dot_lij_y_306 + trr_40x * dot_lij_y_406 + trr_50x * dot_lij_y_506 + trr_60x * dot_lij_y_606;
                    vj_kl_012 += fac * dot_lij_y_012 + trr_10x * dot_lij_y_112 + trr_20x * dot_lij_y_212 + trr_30x * dot_lij_y_312 + trr_40x * dot_lij_y_412 + trr_50x * dot_lij_y_512 + trr_60x * dot_lij_y_612;
                    vj_kl_013 += fac * dot_lij_y_013 + trr_10x * dot_lij_y_113 + trr_20x * dot_lij_y_213 + trr_30x * dot_lij_y_313 + trr_40x * dot_lij_y_413 + trr_50x * dot_lij_y_513 + trr_60x * dot_lij_y_613;
                    vj_kl_014 += fac * dot_lij_y_014 + trr_10x * dot_lij_y_114 + trr_20x * dot_lij_y_214 + trr_30x * dot_lij_y_314 + trr_40x * dot_lij_y_414 + trr_50x * dot_lij_y_514 + trr_60x * dot_lij_y_614;
                    vj_kl_015 += fac * dot_lij_y_015 + trr_10x * dot_lij_y_115 + trr_20x * dot_lij_y_215 + trr_30x * dot_lij_y_315 + trr_40x * dot_lij_y_415 + trr_50x * dot_lij_y_515 + trr_60x * dot_lij_y_615;
                    vj_kl_021 += fac * dot_lij_y_021 + trr_10x * dot_lij_y_121 + trr_20x * dot_lij_y_221 + trr_30x * dot_lij_y_321 + trr_40x * dot_lij_y_421 + trr_50x * dot_lij_y_521 + trr_60x * dot_lij_y_621;
                    vj_kl_022 += fac * dot_lij_y_022 + trr_10x * dot_lij_y_122 + trr_20x * dot_lij_y_222 + trr_30x * dot_lij_y_322 + trr_40x * dot_lij_y_422 + trr_50x * dot_lij_y_522 + trr_60x * dot_lij_y_622;
                    vj_kl_023 += fac * dot_lij_y_023 + trr_10x * dot_lij_y_123 + trr_20x * dot_lij_y_223 + trr_30x * dot_lij_y_323 + trr_40x * dot_lij_y_423 + trr_50x * dot_lij_y_523 + trr_60x * dot_lij_y_623;
                    vj_kl_024 += fac * dot_lij_y_024 + trr_10x * dot_lij_y_124 + trr_20x * dot_lij_y_224 + trr_30x * dot_lij_y_324 + trr_40x * dot_lij_y_424 + trr_50x * dot_lij_y_524 + trr_60x * dot_lij_y_624;
                    vj_kl_030 += fac * dot_lij_y_030 + trr_10x * dot_lij_y_130 + trr_20x * dot_lij_y_230 + trr_30x * dot_lij_y_330 + trr_40x * dot_lij_y_430 + trr_50x * dot_lij_y_530 + trr_60x * dot_lij_y_630;
                    vj_kl_031 += fac * dot_lij_y_031 + trr_10x * dot_lij_y_131 + trr_20x * dot_lij_y_231 + trr_30x * dot_lij_y_331 + trr_40x * dot_lij_y_431 + trr_50x * dot_lij_y_531 + trr_60x * dot_lij_y_631;
                    vj_kl_032 += fac * dot_lij_y_032 + trr_10x * dot_lij_y_132 + trr_20x * dot_lij_y_232 + trr_30x * dot_lij_y_332 + trr_40x * dot_lij_y_432 + trr_50x * dot_lij_y_532 + trr_60x * dot_lij_y_632;
                    vj_kl_033 += fac * dot_lij_y_033 + trr_10x * dot_lij_y_133 + trr_20x * dot_lij_y_233 + trr_30x * dot_lij_y_333 + trr_40x * dot_lij_y_433 + trr_50x * dot_lij_y_533 + trr_60x * dot_lij_y_633;
                    vj_kl_040 += fac * dot_lij_y_040 + trr_10x * dot_lij_y_140 + trr_20x * dot_lij_y_240 + trr_30x * dot_lij_y_340 + trr_40x * dot_lij_y_440 + trr_50x * dot_lij_y_540 + trr_60x * dot_lij_y_640;
                    vj_kl_041 += fac * dot_lij_y_041 + trr_10x * dot_lij_y_141 + trr_20x * dot_lij_y_241 + trr_30x * dot_lij_y_341 + trr_40x * dot_lij_y_441 + trr_50x * dot_lij_y_541 + trr_60x * dot_lij_y_641;
                    vj_kl_042 += fac * dot_lij_y_042 + trr_10x * dot_lij_y_142 + trr_20x * dot_lij_y_242 + trr_30x * dot_lij_y_342 + trr_40x * dot_lij_y_442 + trr_50x * dot_lij_y_542 + trr_60x * dot_lij_y_642;
                    vj_kl_050 += fac * dot_lij_y_050 + trr_10x * dot_lij_y_150 + trr_20x * dot_lij_y_250 + trr_30x * dot_lij_y_350 + trr_40x * dot_lij_y_450 + trr_50x * dot_lij_y_550 + trr_60x * dot_lij_y_650;
                    vj_kl_051 += fac * dot_lij_y_051 + trr_10x * dot_lij_y_151 + trr_20x * dot_lij_y_251 + trr_30x * dot_lij_y_351 + trr_40x * dot_lij_y_451 + trr_50x * dot_lij_y_551 + trr_60x * dot_lij_y_651;
                    vj_kl_060 += fac * dot_lij_y_060 + trr_10x * dot_lij_y_160 + trr_20x * dot_lij_y_260 + trr_30x * dot_lij_y_360 + trr_40x * dot_lij_y_460 + trr_50x * dot_lij_y_560 + trr_60x * dot_lij_y_660;
                    double cpx = xqc + xpq*rt_akl;
                    double trr_01x = cpx * fac;
                    double trr_11x = cpx * trr_10x + 1*b00 * fac;
                    double trr_21x = cpx * trr_20x + 2*b00 * trr_10x;
                    double trr_31x = cpx * trr_30x + 3*b00 * trr_20x;
                    double trr_41x = cpx * trr_40x + 4*b00 * trr_30x;
                    double trr_51x = cpx * trr_50x + 5*b00 * trr_40x;
                    double trr_61x = cpx * trr_60x + 6*b00 * trr_50x;
                    vj_kl_102 += trr_01x * dot_lij_y_002 + trr_11x * dot_lij_y_102 + trr_21x * dot_lij_y_202 + trr_31x * dot_lij_y_302 + trr_41x * dot_lij_y_402 + trr_51x * dot_lij_y_502 + trr_61x * dot_lij_y_602;
                    vj_kl_103 += trr_01x * dot_lij_y_003 + trr_11x * dot_lij_y_103 + trr_21x * dot_lij_y_203 + trr_31x * dot_lij_y_303 + trr_41x * dot_lij_y_403 + trr_51x * dot_lij_y_503 + trr_61x * dot_lij_y_603;
                    vj_kl_104 += trr_01x * dot_lij_y_004 + trr_11x * dot_lij_y_104 + trr_21x * dot_lij_y_204 + trr_31x * dot_lij_y_304 + trr_41x * dot_lij_y_404 + trr_51x * dot_lij_y_504 + trr_61x * dot_lij_y_604;
                    vj_kl_105 += trr_01x * dot_lij_y_005 + trr_11x * dot_lij_y_105 + trr_21x * dot_lij_y_205 + trr_31x * dot_lij_y_305 + trr_41x * dot_lij_y_405 + trr_51x * dot_lij_y_505 + trr_61x * dot_lij_y_605;
                    vj_kl_111 += trr_01x * dot_lij_y_011 + trr_11x * dot_lij_y_111 + trr_21x * dot_lij_y_211 + trr_31x * dot_lij_y_311 + trr_41x * dot_lij_y_411 + trr_51x * dot_lij_y_511 + trr_61x * dot_lij_y_611;
                    vj_kl_112 += trr_01x * dot_lij_y_012 + trr_11x * dot_lij_y_112 + trr_21x * dot_lij_y_212 + trr_31x * dot_lij_y_312 + trr_41x * dot_lij_y_412 + trr_51x * dot_lij_y_512 + trr_61x * dot_lij_y_612;
                    vj_kl_113 += trr_01x * dot_lij_y_013 + trr_11x * dot_lij_y_113 + trr_21x * dot_lij_y_213 + trr_31x * dot_lij_y_313 + trr_41x * dot_lij_y_413 + trr_51x * dot_lij_y_513 + trr_61x * dot_lij_y_613;
                    vj_kl_114 += trr_01x * dot_lij_y_014 + trr_11x * dot_lij_y_114 + trr_21x * dot_lij_y_214 + trr_31x * dot_lij_y_314 + trr_41x * dot_lij_y_414 + trr_51x * dot_lij_y_514 + trr_61x * dot_lij_y_614;
                    vj_kl_120 += trr_01x * dot_lij_y_020 + trr_11x * dot_lij_y_120 + trr_21x * dot_lij_y_220 + trr_31x * dot_lij_y_320 + trr_41x * dot_lij_y_420 + trr_51x * dot_lij_y_520 + trr_61x * dot_lij_y_620;
                    vj_kl_121 += trr_01x * dot_lij_y_021 + trr_11x * dot_lij_y_121 + trr_21x * dot_lij_y_221 + trr_31x * dot_lij_y_321 + trr_41x * dot_lij_y_421 + trr_51x * dot_lij_y_521 + trr_61x * dot_lij_y_621;
                    vj_kl_122 += trr_01x * dot_lij_y_022 + trr_11x * dot_lij_y_122 + trr_21x * dot_lij_y_222 + trr_31x * dot_lij_y_322 + trr_41x * dot_lij_y_422 + trr_51x * dot_lij_y_522 + trr_61x * dot_lij_y_622;
                    vj_kl_123 += trr_01x * dot_lij_y_023 + trr_11x * dot_lij_y_123 + trr_21x * dot_lij_y_223 + trr_31x * dot_lij_y_323 + trr_41x * dot_lij_y_423 + trr_51x * dot_lij_y_523 + trr_61x * dot_lij_y_623;
                    vj_kl_130 += trr_01x * dot_lij_y_030 + trr_11x * dot_lij_y_130 + trr_21x * dot_lij_y_230 + trr_31x * dot_lij_y_330 + trr_41x * dot_lij_y_430 + trr_51x * dot_lij_y_530 + trr_61x * dot_lij_y_630;
                    vj_kl_131 += trr_01x * dot_lij_y_031 + trr_11x * dot_lij_y_131 + trr_21x * dot_lij_y_231 + trr_31x * dot_lij_y_331 + trr_41x * dot_lij_y_431 + trr_51x * dot_lij_y_531 + trr_61x * dot_lij_y_631;
                    vj_kl_132 += trr_01x * dot_lij_y_032 + trr_11x * dot_lij_y_132 + trr_21x * dot_lij_y_232 + trr_31x * dot_lij_y_332 + trr_41x * dot_lij_y_432 + trr_51x * dot_lij_y_532 + trr_61x * dot_lij_y_632;
                    vj_kl_140 += trr_01x * dot_lij_y_040 + trr_11x * dot_lij_y_140 + trr_21x * dot_lij_y_240 + trr_31x * dot_lij_y_340 + trr_41x * dot_lij_y_440 + trr_51x * dot_lij_y_540 + trr_61x * dot_lij_y_640;
                    vj_kl_141 += trr_01x * dot_lij_y_041 + trr_11x * dot_lij_y_141 + trr_21x * dot_lij_y_241 + trr_31x * dot_lij_y_341 + trr_41x * dot_lij_y_441 + trr_51x * dot_lij_y_541 + trr_61x * dot_lij_y_641;
                    vj_kl_150 += trr_01x * dot_lij_y_050 + trr_11x * dot_lij_y_150 + trr_21x * dot_lij_y_250 + trr_31x * dot_lij_y_350 + trr_41x * dot_lij_y_450 + trr_51x * dot_lij_y_550 + trr_61x * dot_lij_y_650;
                    double trr_02x = cpx * trr_01x + 1*b01 * fac;
                    double trr_12x = cpx * trr_11x + 1*b01 * trr_10x + 1*b00 * trr_01x;
                    double trr_22x = cpx * trr_21x + 1*b01 * trr_20x + 2*b00 * trr_11x;
                    double trr_32x = cpx * trr_31x + 1*b01 * trr_30x + 3*b00 * trr_21x;
                    double trr_42x = cpx * trr_41x + 1*b01 * trr_40x + 4*b00 * trr_31x;
                    double trr_52x = cpx * trr_51x + 1*b01 * trr_50x + 5*b00 * trr_41x;
                    double trr_62x = cpx * trr_61x + 1*b01 * trr_60x + 6*b00 * trr_51x;
                    vj_kl_201 += trr_02x * dot_lij_y_001 + trr_12x * dot_lij_y_101 + trr_22x * dot_lij_y_201 + trr_32x * dot_lij_y_301 + trr_42x * dot_lij_y_401 + trr_52x * dot_lij_y_501 + trr_62x * dot_lij_y_601;
                    vj_kl_202 += trr_02x * dot_lij_y_002 + trr_12x * dot_lij_y_102 + trr_22x * dot_lij_y_202 + trr_32x * dot_lij_y_302 + trr_42x * dot_lij_y_402 + trr_52x * dot_lij_y_502 + trr_62x * dot_lij_y_602;
                    vj_kl_203 += trr_02x * dot_lij_y_003 + trr_12x * dot_lij_y_103 + trr_22x * dot_lij_y_203 + trr_32x * dot_lij_y_303 + trr_42x * dot_lij_y_403 + trr_52x * dot_lij_y_503 + trr_62x * dot_lij_y_603;
                    vj_kl_204 += trr_02x * dot_lij_y_004 + trr_12x * dot_lij_y_104 + trr_22x * dot_lij_y_204 + trr_32x * dot_lij_y_304 + trr_42x * dot_lij_y_404 + trr_52x * dot_lij_y_504 + trr_62x * dot_lij_y_604;
                    vj_kl_210 += trr_02x * dot_lij_y_010 + trr_12x * dot_lij_y_110 + trr_22x * dot_lij_y_210 + trr_32x * dot_lij_y_310 + trr_42x * dot_lij_y_410 + trr_52x * dot_lij_y_510 + trr_62x * dot_lij_y_610;
                    vj_kl_211 += trr_02x * dot_lij_y_011 + trr_12x * dot_lij_y_111 + trr_22x * dot_lij_y_211 + trr_32x * dot_lij_y_311 + trr_42x * dot_lij_y_411 + trr_52x * dot_lij_y_511 + trr_62x * dot_lij_y_611;
                    vj_kl_212 += trr_02x * dot_lij_y_012 + trr_12x * dot_lij_y_112 + trr_22x * dot_lij_y_212 + trr_32x * dot_lij_y_312 + trr_42x * dot_lij_y_412 + trr_52x * dot_lij_y_512 + trr_62x * dot_lij_y_612;
                    vj_kl_213 += trr_02x * dot_lij_y_013 + trr_12x * dot_lij_y_113 + trr_22x * dot_lij_y_213 + trr_32x * dot_lij_y_313 + trr_42x * dot_lij_y_413 + trr_52x * dot_lij_y_513 + trr_62x * dot_lij_y_613;
                    vj_kl_220 += trr_02x * dot_lij_y_020 + trr_12x * dot_lij_y_120 + trr_22x * dot_lij_y_220 + trr_32x * dot_lij_y_320 + trr_42x * dot_lij_y_420 + trr_52x * dot_lij_y_520 + trr_62x * dot_lij_y_620;
                    vj_kl_221 += trr_02x * dot_lij_y_021 + trr_12x * dot_lij_y_121 + trr_22x * dot_lij_y_221 + trr_32x * dot_lij_y_321 + trr_42x * dot_lij_y_421 + trr_52x * dot_lij_y_521 + trr_62x * dot_lij_y_621;
                    vj_kl_222 += trr_02x * dot_lij_y_022 + trr_12x * dot_lij_y_122 + trr_22x * dot_lij_y_222 + trr_32x * dot_lij_y_322 + trr_42x * dot_lij_y_422 + trr_52x * dot_lij_y_522 + trr_62x * dot_lij_y_622;
                    vj_kl_230 += trr_02x * dot_lij_y_030 + trr_12x * dot_lij_y_130 + trr_22x * dot_lij_y_230 + trr_32x * dot_lij_y_330 + trr_42x * dot_lij_y_430 + trr_52x * dot_lij_y_530 + trr_62x * dot_lij_y_630;
                    vj_kl_231 += trr_02x * dot_lij_y_031 + trr_12x * dot_lij_y_131 + trr_22x * dot_lij_y_231 + trr_32x * dot_lij_y_331 + trr_42x * dot_lij_y_431 + trr_52x * dot_lij_y_531 + trr_62x * dot_lij_y_631;
                    vj_kl_240 += trr_02x * dot_lij_y_040 + trr_12x * dot_lij_y_140 + trr_22x * dot_lij_y_240 + trr_32x * dot_lij_y_340 + trr_42x * dot_lij_y_440 + trr_52x * dot_lij_y_540 + trr_62x * dot_lij_y_640;
                    double trr_03x = cpx * trr_02x + 2*b01 * trr_01x;
                    double trr_13x = cpx * trr_12x + 2*b01 * trr_11x + 1*b00 * trr_02x;
                    double trr_23x = cpx * trr_22x + 2*b01 * trr_21x + 2*b00 * trr_12x;
                    double trr_33x = cpx * trr_32x + 2*b01 * trr_31x + 3*b00 * trr_22x;
                    double trr_43x = cpx * trr_42x + 2*b01 * trr_41x + 4*b00 * trr_32x;
                    double trr_53x = cpx * trr_52x + 2*b01 * trr_51x + 5*b00 * trr_42x;
                    double trr_63x = cpx * trr_62x + 2*b01 * trr_61x + 6*b00 * trr_52x;
                    vj_kl_300 += trr_03x * dot_lij_y_000 + trr_13x * dot_lij_y_100 + trr_23x * dot_lij_y_200 + trr_33x * dot_lij_y_300 + trr_43x * dot_lij_y_400 + trr_53x * dot_lij_y_500 + trr_63x * dot_lij_y_600;
                    vj_kl_301 += trr_03x * dot_lij_y_001 + trr_13x * dot_lij_y_101 + trr_23x * dot_lij_y_201 + trr_33x * dot_lij_y_301 + trr_43x * dot_lij_y_401 + trr_53x * dot_lij_y_501 + trr_63x * dot_lij_y_601;
                    vj_kl_302 += trr_03x * dot_lij_y_002 + trr_13x * dot_lij_y_102 + trr_23x * dot_lij_y_202 + trr_33x * dot_lij_y_302 + trr_43x * dot_lij_y_402 + trr_53x * dot_lij_y_502 + trr_63x * dot_lij_y_602;
                    vj_kl_303 += trr_03x * dot_lij_y_003 + trr_13x * dot_lij_y_103 + trr_23x * dot_lij_y_203 + trr_33x * dot_lij_y_303 + trr_43x * dot_lij_y_403 + trr_53x * dot_lij_y_503 + trr_63x * dot_lij_y_603;
                    vj_kl_310 += trr_03x * dot_lij_y_010 + trr_13x * dot_lij_y_110 + trr_23x * dot_lij_y_210 + trr_33x * dot_lij_y_310 + trr_43x * dot_lij_y_410 + trr_53x * dot_lij_y_510 + trr_63x * dot_lij_y_610;
                    vj_kl_311 += trr_03x * dot_lij_y_011 + trr_13x * dot_lij_y_111 + trr_23x * dot_lij_y_211 + trr_33x * dot_lij_y_311 + trr_43x * dot_lij_y_411 + trr_53x * dot_lij_y_511 + trr_63x * dot_lij_y_611;
                    vj_kl_312 += trr_03x * dot_lij_y_012 + trr_13x * dot_lij_y_112 + trr_23x * dot_lij_y_212 + trr_33x * dot_lij_y_312 + trr_43x * dot_lij_y_412 + trr_53x * dot_lij_y_512 + trr_63x * dot_lij_y_612;
                    vj_kl_320 += trr_03x * dot_lij_y_020 + trr_13x * dot_lij_y_120 + trr_23x * dot_lij_y_220 + trr_33x * dot_lij_y_320 + trr_43x * dot_lij_y_420 + trr_53x * dot_lij_y_520 + trr_63x * dot_lij_y_620;
                    vj_kl_321 += trr_03x * dot_lij_y_021 + trr_13x * dot_lij_y_121 + trr_23x * dot_lij_y_221 + trr_33x * dot_lij_y_321 + trr_43x * dot_lij_y_421 + trr_53x * dot_lij_y_521 + trr_63x * dot_lij_y_621;
                    vj_kl_330 += trr_03x * dot_lij_y_030 + trr_13x * dot_lij_y_130 + trr_23x * dot_lij_y_230 + trr_33x * dot_lij_y_330 + trr_43x * dot_lij_y_430 + trr_53x * dot_lij_y_530 + trr_63x * dot_lij_y_630;
                    double trr_04x = cpx * trr_03x + 3*b01 * trr_02x;
                    double trr_14x = cpx * trr_13x + 3*b01 * trr_12x + 1*b00 * trr_03x;
                    double trr_24x = cpx * trr_23x + 3*b01 * trr_22x + 2*b00 * trr_13x;
                    double trr_34x = cpx * trr_33x + 3*b01 * trr_32x + 3*b00 * trr_23x;
                    double trr_44x = cpx * trr_43x + 3*b01 * trr_42x + 4*b00 * trr_33x;
                    double trr_54x = cpx * trr_53x + 3*b01 * trr_52x + 5*b00 * trr_43x;
                    double trr_64x = cpx * trr_63x + 3*b01 * trr_62x + 6*b00 * trr_53x;
                    vj_kl_400 += trr_04x * dot_lij_y_000 + trr_14x * dot_lij_y_100 + trr_24x * dot_lij_y_200 + trr_34x * dot_lij_y_300 + trr_44x * dot_lij_y_400 + trr_54x * dot_lij_y_500 + trr_64x * dot_lij_y_600;
                    vj_kl_401 += trr_04x * dot_lij_y_001 + trr_14x * dot_lij_y_101 + trr_24x * dot_lij_y_201 + trr_34x * dot_lij_y_301 + trr_44x * dot_lij_y_401 + trr_54x * dot_lij_y_501 + trr_64x * dot_lij_y_601;
                    vj_kl_402 += trr_04x * dot_lij_y_002 + trr_14x * dot_lij_y_102 + trr_24x * dot_lij_y_202 + trr_34x * dot_lij_y_302 + trr_44x * dot_lij_y_402 + trr_54x * dot_lij_y_502 + trr_64x * dot_lij_y_602;
                    vj_kl_410 += trr_04x * dot_lij_y_010 + trr_14x * dot_lij_y_110 + trr_24x * dot_lij_y_210 + trr_34x * dot_lij_y_310 + trr_44x * dot_lij_y_410 + trr_54x * dot_lij_y_510 + trr_64x * dot_lij_y_610;
                    vj_kl_411 += trr_04x * dot_lij_y_011 + trr_14x * dot_lij_y_111 + trr_24x * dot_lij_y_211 + trr_34x * dot_lij_y_311 + trr_44x * dot_lij_y_411 + trr_54x * dot_lij_y_511 + trr_64x * dot_lij_y_611;
                    vj_kl_420 += trr_04x * dot_lij_y_020 + trr_14x * dot_lij_y_120 + trr_24x * dot_lij_y_220 + trr_34x * dot_lij_y_320 + trr_44x * dot_lij_y_420 + trr_54x * dot_lij_y_520 + trr_64x * dot_lij_y_620;
                    double trr_05x = cpx * trr_04x + 4*b01 * trr_03x;
                    double trr_15x = cpx * trr_14x + 4*b01 * trr_13x + 1*b00 * trr_04x;
                    double trr_25x = cpx * trr_24x + 4*b01 * trr_23x + 2*b00 * trr_14x;
                    double trr_35x = cpx * trr_34x + 4*b01 * trr_33x + 3*b00 * trr_24x;
                    double trr_45x = cpx * trr_44x + 4*b01 * trr_43x + 4*b00 * trr_34x;
                    double trr_55x = cpx * trr_54x + 4*b01 * trr_53x + 5*b00 * trr_44x;
                    double trr_65x = cpx * trr_64x + 4*b01 * trr_63x + 6*b00 * trr_54x;
                    vj_kl_500 += trr_05x * dot_lij_y_000 + trr_15x * dot_lij_y_100 + trr_25x * dot_lij_y_200 + trr_35x * dot_lij_y_300 + trr_45x * dot_lij_y_400 + trr_55x * dot_lij_y_500 + trr_65x * dot_lij_y_600;
                    vj_kl_501 += trr_05x * dot_lij_y_001 + trr_15x * dot_lij_y_101 + trr_25x * dot_lij_y_201 + trr_35x * dot_lij_y_301 + trr_45x * dot_lij_y_401 + trr_55x * dot_lij_y_501 + trr_65x * dot_lij_y_601;
                    vj_kl_510 += trr_05x * dot_lij_y_010 + trr_15x * dot_lij_y_110 + trr_25x * dot_lij_y_210 + trr_35x * dot_lij_y_310 + trr_45x * dot_lij_y_410 + trr_55x * dot_lij_y_510 + trr_65x * dot_lij_y_610;
                    double trr_06x = cpx * trr_05x + 5*b01 * trr_04x;
                    double trr_16x = cpx * trr_15x + 5*b01 * trr_14x + 1*b00 * trr_05x;
                    double trr_26x = cpx * trr_25x + 5*b01 * trr_24x + 2*b00 * trr_15x;
                    double trr_36x = cpx * trr_35x + 5*b01 * trr_34x + 3*b00 * trr_25x;
                    double trr_46x = cpx * trr_45x + 5*b01 * trr_44x + 4*b00 * trr_35x;
                    double trr_56x = cpx * trr_55x + 5*b01 * trr_54x + 5*b00 * trr_45x;
                    double trr_66x = cpx * trr_65x + 5*b01 * trr_64x + 6*b00 * trr_55x;
                    vj_kl_600 += trr_06x * dot_lij_y_000 + trr_16x * dot_lij_y_100 + trr_26x * dot_lij_y_200 + trr_36x * dot_lij_y_300 + trr_46x * dot_lij_y_400 + trr_56x * dot_lij_y_500 + trr_66x * dot_lij_y_600;
                    double dot_lkl_z_000 = trr_03z * dm_kl_003 + trr_04z * dm_kl_004 + trr_05z * dm_kl_005 + trr_06z * dm_kl_006;
                    double dot_lkl_z_001 = trr_13z * dm_kl_003 + trr_14z * dm_kl_004 + trr_15z * dm_kl_005 + trr_16z * dm_kl_006;
                    double dot_lkl_z_002 = trr_23z * dm_kl_003 + trr_24z * dm_kl_004 + trr_25z * dm_kl_005 + trr_26z * dm_kl_006;
                    double dot_lkl_z_003 = trr_33z * dm_kl_003 + trr_34z * dm_kl_004 + trr_35z * dm_kl_005 + trr_36z * dm_kl_006;
                    double dot_lkl_z_004 = trr_43z * dm_kl_003 + trr_44z * dm_kl_004 + trr_45z * dm_kl_005 + trr_46z * dm_kl_006;
                    double dot_lkl_z_005 = trr_53z * dm_kl_003 + trr_54z * dm_kl_004 + trr_55z * dm_kl_005 + trr_56z * dm_kl_006;
                    double dot_lkl_z_006 = trr_63z * dm_kl_003 + trr_64z * dm_kl_004 + trr_65z * dm_kl_005 + trr_66z * dm_kl_006;
                    double dot_lkl_z_010 = trr_02z * dm_kl_012 + trr_03z * dm_kl_013 + trr_04z * dm_kl_014 + trr_05z * dm_kl_015;
                    double dot_lkl_z_011 = trr_12z * dm_kl_012 + trr_13z * dm_kl_013 + trr_14z * dm_kl_014 + trr_15z * dm_kl_015;
                    double dot_lkl_z_012 = trr_22z * dm_kl_012 + trr_23z * dm_kl_013 + trr_24z * dm_kl_014 + trr_25z * dm_kl_015;
                    double dot_lkl_z_013 = trr_32z * dm_kl_012 + trr_33z * dm_kl_013 + trr_34z * dm_kl_014 + trr_35z * dm_kl_015;
                    double dot_lkl_z_014 = trr_42z * dm_kl_012 + trr_43z * dm_kl_013 + trr_44z * dm_kl_014 + trr_45z * dm_kl_015;
                    double dot_lkl_z_015 = trr_52z * dm_kl_012 + trr_53z * dm_kl_013 + trr_54z * dm_kl_014 + trr_55z * dm_kl_015;
                    double dot_lkl_z_016 = trr_62z * dm_kl_012 + trr_63z * dm_kl_013 + trr_64z * dm_kl_014 + trr_65z * dm_kl_015;
                    double dot_lkl_z_020 = trr_01z * dm_kl_021 + trr_02z * dm_kl_022 + trr_03z * dm_kl_023 + trr_04z * dm_kl_024;
                    double dot_lkl_z_021 = trr_11z * dm_kl_021 + trr_12z * dm_kl_022 + trr_13z * dm_kl_023 + trr_14z * dm_kl_024;
                    double dot_lkl_z_022 = trr_21z * dm_kl_021 + trr_22z * dm_kl_022 + trr_23z * dm_kl_023 + trr_24z * dm_kl_024;
                    double dot_lkl_z_023 = trr_31z * dm_kl_021 + trr_32z * dm_kl_022 + trr_33z * dm_kl_023 + trr_34z * dm_kl_024;
                    double dot_lkl_z_024 = trr_41z * dm_kl_021 + trr_42z * dm_kl_022 + trr_43z * dm_kl_023 + trr_44z * dm_kl_024;
                    double dot_lkl_z_025 = trr_51z * dm_kl_021 + trr_52z * dm_kl_022 + trr_53z * dm_kl_023 + trr_54z * dm_kl_024;
                    double dot_lkl_z_026 = trr_61z * dm_kl_021 + trr_62z * dm_kl_022 + trr_63z * dm_kl_023 + trr_64z * dm_kl_024;
                    double dot_lkl_z_030 = wt * dm_kl_030 + trr_01z * dm_kl_031 + trr_02z * dm_kl_032 + trr_03z * dm_kl_033;
                    double dot_lkl_z_031 = trr_10z * dm_kl_030 + trr_11z * dm_kl_031 + trr_12z * dm_kl_032 + trr_13z * dm_kl_033;
                    double dot_lkl_z_032 = trr_20z * dm_kl_030 + trr_21z * dm_kl_031 + trr_22z * dm_kl_032 + trr_23z * dm_kl_033;
                    double dot_lkl_z_033 = trr_30z * dm_kl_030 + trr_31z * dm_kl_031 + trr_32z * dm_kl_032 + trr_33z * dm_kl_033;
                    double dot_lkl_z_034 = trr_40z * dm_kl_030 + trr_41z * dm_kl_031 + trr_42z * dm_kl_032 + trr_43z * dm_kl_033;
                    double dot_lkl_z_035 = trr_50z * dm_kl_030 + trr_51z * dm_kl_031 + trr_52z * dm_kl_032 + trr_53z * dm_kl_033;
                    double dot_lkl_z_036 = trr_60z * dm_kl_030 + trr_61z * dm_kl_031 + trr_62z * dm_kl_032 + trr_63z * dm_kl_033;
                    double dot_lkl_z_040 = wt * dm_kl_040 + trr_01z * dm_kl_041 + trr_02z * dm_kl_042;
                    double dot_lkl_z_041 = trr_10z * dm_kl_040 + trr_11z * dm_kl_041 + trr_12z * dm_kl_042;
                    double dot_lkl_z_042 = trr_20z * dm_kl_040 + trr_21z * dm_kl_041 + trr_22z * dm_kl_042;
                    double dot_lkl_z_043 = trr_30z * dm_kl_040 + trr_31z * dm_kl_041 + trr_32z * dm_kl_042;
                    double dot_lkl_z_044 = trr_40z * dm_kl_040 + trr_41z * dm_kl_041 + trr_42z * dm_kl_042;
                    double dot_lkl_z_045 = trr_50z * dm_kl_040 + trr_51z * dm_kl_041 + trr_52z * dm_kl_042;
                    double dot_lkl_z_046 = trr_60z * dm_kl_040 + trr_61z * dm_kl_041 + trr_62z * dm_kl_042;
                    double dot_lkl_z_050 = wt * dm_kl_050 + trr_01z * dm_kl_051;
                    double dot_lkl_z_051 = trr_10z * dm_kl_050 + trr_11z * dm_kl_051;
                    double dot_lkl_z_052 = trr_20z * dm_kl_050 + trr_21z * dm_kl_051;
                    double dot_lkl_z_053 = trr_30z * dm_kl_050 + trr_31z * dm_kl_051;
                    double dot_lkl_z_054 = trr_40z * dm_kl_050 + trr_41z * dm_kl_051;
                    double dot_lkl_z_055 = trr_50z * dm_kl_050 + trr_51z * dm_kl_051;
                    double dot_lkl_z_056 = trr_60z * dm_kl_050 + trr_61z * dm_kl_051;
                    double dot_lkl_z_060 = wt * dm_kl_060;
                    double dot_lkl_z_061 = trr_10z * dm_kl_060;
                    double dot_lkl_z_062 = trr_20z * dm_kl_060;
                    double dot_lkl_z_063 = trr_30z * dm_kl_060;
                    double dot_lkl_z_064 = trr_40z * dm_kl_060;
                    double dot_lkl_z_065 = trr_50z * dm_kl_060;
                    double dot_lkl_z_066 = trr_60z * dm_kl_060;
                    double dot_lkl_z_100 = trr_02z * dm_kl_102 + trr_03z * dm_kl_103 + trr_04z * dm_kl_104 + trr_05z * dm_kl_105;
                    double dot_lkl_z_101 = trr_12z * dm_kl_102 + trr_13z * dm_kl_103 + trr_14z * dm_kl_104 + trr_15z * dm_kl_105;
                    double dot_lkl_z_102 = trr_22z * dm_kl_102 + trr_23z * dm_kl_103 + trr_24z * dm_kl_104 + trr_25z * dm_kl_105;
                    double dot_lkl_z_103 = trr_32z * dm_kl_102 + trr_33z * dm_kl_103 + trr_34z * dm_kl_104 + trr_35z * dm_kl_105;
                    double dot_lkl_z_104 = trr_42z * dm_kl_102 + trr_43z * dm_kl_103 + trr_44z * dm_kl_104 + trr_45z * dm_kl_105;
                    double dot_lkl_z_105 = trr_52z * dm_kl_102 + trr_53z * dm_kl_103 + trr_54z * dm_kl_104 + trr_55z * dm_kl_105;
                    double dot_lkl_z_106 = trr_62z * dm_kl_102 + trr_63z * dm_kl_103 + trr_64z * dm_kl_104 + trr_65z * dm_kl_105;
                    double dot_lkl_z_110 = trr_01z * dm_kl_111 + trr_02z * dm_kl_112 + trr_03z * dm_kl_113 + trr_04z * dm_kl_114;
                    double dot_lkl_z_111 = trr_11z * dm_kl_111 + trr_12z * dm_kl_112 + trr_13z * dm_kl_113 + trr_14z * dm_kl_114;
                    double dot_lkl_z_112 = trr_21z * dm_kl_111 + trr_22z * dm_kl_112 + trr_23z * dm_kl_113 + trr_24z * dm_kl_114;
                    double dot_lkl_z_113 = trr_31z * dm_kl_111 + trr_32z * dm_kl_112 + trr_33z * dm_kl_113 + trr_34z * dm_kl_114;
                    double dot_lkl_z_114 = trr_41z * dm_kl_111 + trr_42z * dm_kl_112 + trr_43z * dm_kl_113 + trr_44z * dm_kl_114;
                    double dot_lkl_z_115 = trr_51z * dm_kl_111 + trr_52z * dm_kl_112 + trr_53z * dm_kl_113 + trr_54z * dm_kl_114;
                    double dot_lkl_z_116 = trr_61z * dm_kl_111 + trr_62z * dm_kl_112 + trr_63z * dm_kl_113 + trr_64z * dm_kl_114;
                    double dot_lkl_z_120 = wt * dm_kl_120 + trr_01z * dm_kl_121 + trr_02z * dm_kl_122 + trr_03z * dm_kl_123;
                    double dot_lkl_z_121 = trr_10z * dm_kl_120 + trr_11z * dm_kl_121 + trr_12z * dm_kl_122 + trr_13z * dm_kl_123;
                    double dot_lkl_z_122 = trr_20z * dm_kl_120 + trr_21z * dm_kl_121 + trr_22z * dm_kl_122 + trr_23z * dm_kl_123;
                    double dot_lkl_z_123 = trr_30z * dm_kl_120 + trr_31z * dm_kl_121 + trr_32z * dm_kl_122 + trr_33z * dm_kl_123;
                    double dot_lkl_z_124 = trr_40z * dm_kl_120 + trr_41z * dm_kl_121 + trr_42z * dm_kl_122 + trr_43z * dm_kl_123;
                    double dot_lkl_z_125 = trr_50z * dm_kl_120 + trr_51z * dm_kl_121 + trr_52z * dm_kl_122 + trr_53z * dm_kl_123;
                    double dot_lkl_z_126 = trr_60z * dm_kl_120 + trr_61z * dm_kl_121 + trr_62z * dm_kl_122 + trr_63z * dm_kl_123;
                    double dot_lkl_z_130 = wt * dm_kl_130 + trr_01z * dm_kl_131 + trr_02z * dm_kl_132;
                    double dot_lkl_z_131 = trr_10z * dm_kl_130 + trr_11z * dm_kl_131 + trr_12z * dm_kl_132;
                    double dot_lkl_z_132 = trr_20z * dm_kl_130 + trr_21z * dm_kl_131 + trr_22z * dm_kl_132;
                    double dot_lkl_z_133 = trr_30z * dm_kl_130 + trr_31z * dm_kl_131 + trr_32z * dm_kl_132;
                    double dot_lkl_z_134 = trr_40z * dm_kl_130 + trr_41z * dm_kl_131 + trr_42z * dm_kl_132;
                    double dot_lkl_z_135 = trr_50z * dm_kl_130 + trr_51z * dm_kl_131 + trr_52z * dm_kl_132;
                    double dot_lkl_z_136 = trr_60z * dm_kl_130 + trr_61z * dm_kl_131 + trr_62z * dm_kl_132;
                    double dot_lkl_z_140 = wt * dm_kl_140 + trr_01z * dm_kl_141;
                    double dot_lkl_z_141 = trr_10z * dm_kl_140 + trr_11z * dm_kl_141;
                    double dot_lkl_z_142 = trr_20z * dm_kl_140 + trr_21z * dm_kl_141;
                    double dot_lkl_z_143 = trr_30z * dm_kl_140 + trr_31z * dm_kl_141;
                    double dot_lkl_z_144 = trr_40z * dm_kl_140 + trr_41z * dm_kl_141;
                    double dot_lkl_z_145 = trr_50z * dm_kl_140 + trr_51z * dm_kl_141;
                    double dot_lkl_z_146 = trr_60z * dm_kl_140 + trr_61z * dm_kl_141;
                    double dot_lkl_z_150 = wt * dm_kl_150;
                    double dot_lkl_z_151 = trr_10z * dm_kl_150;
                    double dot_lkl_z_152 = trr_20z * dm_kl_150;
                    double dot_lkl_z_153 = trr_30z * dm_kl_150;
                    double dot_lkl_z_154 = trr_40z * dm_kl_150;
                    double dot_lkl_z_155 = trr_50z * dm_kl_150;
                    double dot_lkl_z_156 = trr_60z * dm_kl_150;
                    double dot_lkl_z_200 = trr_01z * dm_kl_201 + trr_02z * dm_kl_202 + trr_03z * dm_kl_203 + trr_04z * dm_kl_204;
                    double dot_lkl_z_201 = trr_11z * dm_kl_201 + trr_12z * dm_kl_202 + trr_13z * dm_kl_203 + trr_14z * dm_kl_204;
                    double dot_lkl_z_202 = trr_21z * dm_kl_201 + trr_22z * dm_kl_202 + trr_23z * dm_kl_203 + trr_24z * dm_kl_204;
                    double dot_lkl_z_203 = trr_31z * dm_kl_201 + trr_32z * dm_kl_202 + trr_33z * dm_kl_203 + trr_34z * dm_kl_204;
                    double dot_lkl_z_204 = trr_41z * dm_kl_201 + trr_42z * dm_kl_202 + trr_43z * dm_kl_203 + trr_44z * dm_kl_204;
                    double dot_lkl_z_205 = trr_51z * dm_kl_201 + trr_52z * dm_kl_202 + trr_53z * dm_kl_203 + trr_54z * dm_kl_204;
                    double dot_lkl_z_206 = trr_61z * dm_kl_201 + trr_62z * dm_kl_202 + trr_63z * dm_kl_203 + trr_64z * dm_kl_204;
                    double dot_lkl_z_210 = wt * dm_kl_210 + trr_01z * dm_kl_211 + trr_02z * dm_kl_212 + trr_03z * dm_kl_213;
                    double dot_lkl_z_211 = trr_10z * dm_kl_210 + trr_11z * dm_kl_211 + trr_12z * dm_kl_212 + trr_13z * dm_kl_213;
                    double dot_lkl_z_212 = trr_20z * dm_kl_210 + trr_21z * dm_kl_211 + trr_22z * dm_kl_212 + trr_23z * dm_kl_213;
                    double dot_lkl_z_213 = trr_30z * dm_kl_210 + trr_31z * dm_kl_211 + trr_32z * dm_kl_212 + trr_33z * dm_kl_213;
                    double dot_lkl_z_214 = trr_40z * dm_kl_210 + trr_41z * dm_kl_211 + trr_42z * dm_kl_212 + trr_43z * dm_kl_213;
                    double dot_lkl_z_215 = trr_50z * dm_kl_210 + trr_51z * dm_kl_211 + trr_52z * dm_kl_212 + trr_53z * dm_kl_213;
                    double dot_lkl_z_216 = trr_60z * dm_kl_210 + trr_61z * dm_kl_211 + trr_62z * dm_kl_212 + trr_63z * dm_kl_213;
                    double dot_lkl_z_220 = wt * dm_kl_220 + trr_01z * dm_kl_221 + trr_02z * dm_kl_222;
                    double dot_lkl_z_221 = trr_10z * dm_kl_220 + trr_11z * dm_kl_221 + trr_12z * dm_kl_222;
                    double dot_lkl_z_222 = trr_20z * dm_kl_220 + trr_21z * dm_kl_221 + trr_22z * dm_kl_222;
                    double dot_lkl_z_223 = trr_30z * dm_kl_220 + trr_31z * dm_kl_221 + trr_32z * dm_kl_222;
                    double dot_lkl_z_224 = trr_40z * dm_kl_220 + trr_41z * dm_kl_221 + trr_42z * dm_kl_222;
                    double dot_lkl_z_225 = trr_50z * dm_kl_220 + trr_51z * dm_kl_221 + trr_52z * dm_kl_222;
                    double dot_lkl_z_226 = trr_60z * dm_kl_220 + trr_61z * dm_kl_221 + trr_62z * dm_kl_222;
                    double dot_lkl_z_230 = wt * dm_kl_230 + trr_01z * dm_kl_231;
                    double dot_lkl_z_231 = trr_10z * dm_kl_230 + trr_11z * dm_kl_231;
                    double dot_lkl_z_232 = trr_20z * dm_kl_230 + trr_21z * dm_kl_231;
                    double dot_lkl_z_233 = trr_30z * dm_kl_230 + trr_31z * dm_kl_231;
                    double dot_lkl_z_234 = trr_40z * dm_kl_230 + trr_41z * dm_kl_231;
                    double dot_lkl_z_235 = trr_50z * dm_kl_230 + trr_51z * dm_kl_231;
                    double dot_lkl_z_236 = trr_60z * dm_kl_230 + trr_61z * dm_kl_231;
                    double dot_lkl_z_240 = wt * dm_kl_240;
                    double dot_lkl_z_241 = trr_10z * dm_kl_240;
                    double dot_lkl_z_242 = trr_20z * dm_kl_240;
                    double dot_lkl_z_243 = trr_30z * dm_kl_240;
                    double dot_lkl_z_244 = trr_40z * dm_kl_240;
                    double dot_lkl_z_245 = trr_50z * dm_kl_240;
                    double dot_lkl_z_246 = trr_60z * dm_kl_240;
                    double dot_lkl_z_300 = wt * dm_kl_300 + trr_01z * dm_kl_301 + trr_02z * dm_kl_302 + trr_03z * dm_kl_303;
                    double dot_lkl_z_301 = trr_10z * dm_kl_300 + trr_11z * dm_kl_301 + trr_12z * dm_kl_302 + trr_13z * dm_kl_303;
                    double dot_lkl_z_302 = trr_20z * dm_kl_300 + trr_21z * dm_kl_301 + trr_22z * dm_kl_302 + trr_23z * dm_kl_303;
                    double dot_lkl_z_303 = trr_30z * dm_kl_300 + trr_31z * dm_kl_301 + trr_32z * dm_kl_302 + trr_33z * dm_kl_303;
                    double dot_lkl_z_304 = trr_40z * dm_kl_300 + trr_41z * dm_kl_301 + trr_42z * dm_kl_302 + trr_43z * dm_kl_303;
                    double dot_lkl_z_305 = trr_50z * dm_kl_300 + trr_51z * dm_kl_301 + trr_52z * dm_kl_302 + trr_53z * dm_kl_303;
                    double dot_lkl_z_306 = trr_60z * dm_kl_300 + trr_61z * dm_kl_301 + trr_62z * dm_kl_302 + trr_63z * dm_kl_303;
                    double dot_lkl_z_310 = wt * dm_kl_310 + trr_01z * dm_kl_311 + trr_02z * dm_kl_312;
                    double dot_lkl_z_311 = trr_10z * dm_kl_310 + trr_11z * dm_kl_311 + trr_12z * dm_kl_312;
                    double dot_lkl_z_312 = trr_20z * dm_kl_310 + trr_21z * dm_kl_311 + trr_22z * dm_kl_312;
                    double dot_lkl_z_313 = trr_30z * dm_kl_310 + trr_31z * dm_kl_311 + trr_32z * dm_kl_312;
                    double dot_lkl_z_314 = trr_40z * dm_kl_310 + trr_41z * dm_kl_311 + trr_42z * dm_kl_312;
                    double dot_lkl_z_315 = trr_50z * dm_kl_310 + trr_51z * dm_kl_311 + trr_52z * dm_kl_312;
                    double dot_lkl_z_316 = trr_60z * dm_kl_310 + trr_61z * dm_kl_311 + trr_62z * dm_kl_312;
                    double dot_lkl_z_320 = wt * dm_kl_320 + trr_01z * dm_kl_321;
                    double dot_lkl_z_321 = trr_10z * dm_kl_320 + trr_11z * dm_kl_321;
                    double dot_lkl_z_322 = trr_20z * dm_kl_320 + trr_21z * dm_kl_321;
                    double dot_lkl_z_323 = trr_30z * dm_kl_320 + trr_31z * dm_kl_321;
                    double dot_lkl_z_324 = trr_40z * dm_kl_320 + trr_41z * dm_kl_321;
                    double dot_lkl_z_325 = trr_50z * dm_kl_320 + trr_51z * dm_kl_321;
                    double dot_lkl_z_326 = trr_60z * dm_kl_320 + trr_61z * dm_kl_321;
                    double dot_lkl_z_330 = wt * dm_kl_330;
                    double dot_lkl_z_331 = trr_10z * dm_kl_330;
                    double dot_lkl_z_332 = trr_20z * dm_kl_330;
                    double dot_lkl_z_333 = trr_30z * dm_kl_330;
                    double dot_lkl_z_334 = trr_40z * dm_kl_330;
                    double dot_lkl_z_335 = trr_50z * dm_kl_330;
                    double dot_lkl_z_336 = trr_60z * dm_kl_330;
                    double dot_lkl_z_400 = wt * dm_kl_400 + trr_01z * dm_kl_401 + trr_02z * dm_kl_402;
                    double dot_lkl_z_401 = trr_10z * dm_kl_400 + trr_11z * dm_kl_401 + trr_12z * dm_kl_402;
                    double dot_lkl_z_402 = trr_20z * dm_kl_400 + trr_21z * dm_kl_401 + trr_22z * dm_kl_402;
                    double dot_lkl_z_403 = trr_30z * dm_kl_400 + trr_31z * dm_kl_401 + trr_32z * dm_kl_402;
                    double dot_lkl_z_404 = trr_40z * dm_kl_400 + trr_41z * dm_kl_401 + trr_42z * dm_kl_402;
                    double dot_lkl_z_405 = trr_50z * dm_kl_400 + trr_51z * dm_kl_401 + trr_52z * dm_kl_402;
                    double dot_lkl_z_406 = trr_60z * dm_kl_400 + trr_61z * dm_kl_401 + trr_62z * dm_kl_402;
                    double dot_lkl_z_410 = wt * dm_kl_410 + trr_01z * dm_kl_411;
                    double dot_lkl_z_411 = trr_10z * dm_kl_410 + trr_11z * dm_kl_411;
                    double dot_lkl_z_412 = trr_20z * dm_kl_410 + trr_21z * dm_kl_411;
                    double dot_lkl_z_413 = trr_30z * dm_kl_410 + trr_31z * dm_kl_411;
                    double dot_lkl_z_414 = trr_40z * dm_kl_410 + trr_41z * dm_kl_411;
                    double dot_lkl_z_415 = trr_50z * dm_kl_410 + trr_51z * dm_kl_411;
                    double dot_lkl_z_416 = trr_60z * dm_kl_410 + trr_61z * dm_kl_411;
                    double dot_lkl_z_420 = wt * dm_kl_420;
                    double dot_lkl_z_421 = trr_10z * dm_kl_420;
                    double dot_lkl_z_422 = trr_20z * dm_kl_420;
                    double dot_lkl_z_423 = trr_30z * dm_kl_420;
                    double dot_lkl_z_424 = trr_40z * dm_kl_420;
                    double dot_lkl_z_425 = trr_50z * dm_kl_420;
                    double dot_lkl_z_426 = trr_60z * dm_kl_420;
                    double dot_lkl_z_500 = wt * dm_kl_500 + trr_01z * dm_kl_501;
                    double dot_lkl_z_501 = trr_10z * dm_kl_500 + trr_11z * dm_kl_501;
                    double dot_lkl_z_502 = trr_20z * dm_kl_500 + trr_21z * dm_kl_501;
                    double dot_lkl_z_503 = trr_30z * dm_kl_500 + trr_31z * dm_kl_501;
                    double dot_lkl_z_504 = trr_40z * dm_kl_500 + trr_41z * dm_kl_501;
                    double dot_lkl_z_505 = trr_50z * dm_kl_500 + trr_51z * dm_kl_501;
                    double dot_lkl_z_506 = trr_60z * dm_kl_500 + trr_61z * dm_kl_501;
                    double dot_lkl_z_510 = wt * dm_kl_510;
                    double dot_lkl_z_511 = trr_10z * dm_kl_510;
                    double dot_lkl_z_512 = trr_20z * dm_kl_510;
                    double dot_lkl_z_513 = trr_30z * dm_kl_510;
                    double dot_lkl_z_514 = trr_40z * dm_kl_510;
                    double dot_lkl_z_515 = trr_50z * dm_kl_510;
                    double dot_lkl_z_516 = trr_60z * dm_kl_510;
                    double dot_lkl_z_600 = wt * dm_kl_600;
                    double dot_lkl_z_601 = trr_10z * dm_kl_600;
                    double dot_lkl_z_602 = trr_20z * dm_kl_600;
                    double dot_lkl_z_603 = trr_30z * dm_kl_600;
                    double dot_lkl_z_604 = trr_40z * dm_kl_600;
                    double dot_lkl_z_605 = trr_50z * dm_kl_600;
                    double dot_lkl_z_606 = trr_60z * dm_kl_600;
                    double dot_lkl_y_000 = 1 * dot_lkl_z_000 + trr_01y * dot_lkl_z_010 + trr_02y * dot_lkl_z_020 + trr_03y * dot_lkl_z_030 + trr_04y * dot_lkl_z_040 + trr_05y * dot_lkl_z_050 + trr_06y * dot_lkl_z_060;
                    double dot_lkl_y_001 = 1 * dot_lkl_z_001 + trr_01y * dot_lkl_z_011 + trr_02y * dot_lkl_z_021 + trr_03y * dot_lkl_z_031 + trr_04y * dot_lkl_z_041 + trr_05y * dot_lkl_z_051 + trr_06y * dot_lkl_z_061;
                    double dot_lkl_y_002 = 1 * dot_lkl_z_002 + trr_01y * dot_lkl_z_012 + trr_02y * dot_lkl_z_022 + trr_03y * dot_lkl_z_032 + trr_04y * dot_lkl_z_042 + trr_05y * dot_lkl_z_052 + trr_06y * dot_lkl_z_062;
                    double dot_lkl_y_003 = 1 * dot_lkl_z_003 + trr_01y * dot_lkl_z_013 + trr_02y * dot_lkl_z_023 + trr_03y * dot_lkl_z_033 + trr_04y * dot_lkl_z_043 + trr_05y * dot_lkl_z_053 + trr_06y * dot_lkl_z_063;
                    double dot_lkl_y_004 = 1 * dot_lkl_z_004 + trr_01y * dot_lkl_z_014 + trr_02y * dot_lkl_z_024 + trr_03y * dot_lkl_z_034 + trr_04y * dot_lkl_z_044 + trr_05y * dot_lkl_z_054 + trr_06y * dot_lkl_z_064;
                    double dot_lkl_y_005 = 1 * dot_lkl_z_005 + trr_01y * dot_lkl_z_015 + trr_02y * dot_lkl_z_025 + trr_03y * dot_lkl_z_035 + trr_04y * dot_lkl_z_045 + trr_05y * dot_lkl_z_055 + trr_06y * dot_lkl_z_065;
                    double dot_lkl_y_006 = 1 * dot_lkl_z_006 + trr_01y * dot_lkl_z_016 + trr_02y * dot_lkl_z_026 + trr_03y * dot_lkl_z_036 + trr_04y * dot_lkl_z_046 + trr_05y * dot_lkl_z_056 + trr_06y * dot_lkl_z_066;
                    double dot_lkl_y_010 = trr_10y * dot_lkl_z_000 + trr_11y * dot_lkl_z_010 + trr_12y * dot_lkl_z_020 + trr_13y * dot_lkl_z_030 + trr_14y * dot_lkl_z_040 + trr_15y * dot_lkl_z_050 + trr_16y * dot_lkl_z_060;
                    double dot_lkl_y_011 = trr_10y * dot_lkl_z_001 + trr_11y * dot_lkl_z_011 + trr_12y * dot_lkl_z_021 + trr_13y * dot_lkl_z_031 + trr_14y * dot_lkl_z_041 + trr_15y * dot_lkl_z_051 + trr_16y * dot_lkl_z_061;
                    double dot_lkl_y_012 = trr_10y * dot_lkl_z_002 + trr_11y * dot_lkl_z_012 + trr_12y * dot_lkl_z_022 + trr_13y * dot_lkl_z_032 + trr_14y * dot_lkl_z_042 + trr_15y * dot_lkl_z_052 + trr_16y * dot_lkl_z_062;
                    double dot_lkl_y_013 = trr_10y * dot_lkl_z_003 + trr_11y * dot_lkl_z_013 + trr_12y * dot_lkl_z_023 + trr_13y * dot_lkl_z_033 + trr_14y * dot_lkl_z_043 + trr_15y * dot_lkl_z_053 + trr_16y * dot_lkl_z_063;
                    double dot_lkl_y_014 = trr_10y * dot_lkl_z_004 + trr_11y * dot_lkl_z_014 + trr_12y * dot_lkl_z_024 + trr_13y * dot_lkl_z_034 + trr_14y * dot_lkl_z_044 + trr_15y * dot_lkl_z_054 + trr_16y * dot_lkl_z_064;
                    double dot_lkl_y_015 = trr_10y * dot_lkl_z_005 + trr_11y * dot_lkl_z_015 + trr_12y * dot_lkl_z_025 + trr_13y * dot_lkl_z_035 + trr_14y * dot_lkl_z_045 + trr_15y * dot_lkl_z_055 + trr_16y * dot_lkl_z_065;
                    double dot_lkl_y_020 = trr_20y * dot_lkl_z_000 + trr_21y * dot_lkl_z_010 + trr_22y * dot_lkl_z_020 + trr_23y * dot_lkl_z_030 + trr_24y * dot_lkl_z_040 + trr_25y * dot_lkl_z_050 + trr_26y * dot_lkl_z_060;
                    double dot_lkl_y_021 = trr_20y * dot_lkl_z_001 + trr_21y * dot_lkl_z_011 + trr_22y * dot_lkl_z_021 + trr_23y * dot_lkl_z_031 + trr_24y * dot_lkl_z_041 + trr_25y * dot_lkl_z_051 + trr_26y * dot_lkl_z_061;
                    double dot_lkl_y_022 = trr_20y * dot_lkl_z_002 + trr_21y * dot_lkl_z_012 + trr_22y * dot_lkl_z_022 + trr_23y * dot_lkl_z_032 + trr_24y * dot_lkl_z_042 + trr_25y * dot_lkl_z_052 + trr_26y * dot_lkl_z_062;
                    double dot_lkl_y_023 = trr_20y * dot_lkl_z_003 + trr_21y * dot_lkl_z_013 + trr_22y * dot_lkl_z_023 + trr_23y * dot_lkl_z_033 + trr_24y * dot_lkl_z_043 + trr_25y * dot_lkl_z_053 + trr_26y * dot_lkl_z_063;
                    double dot_lkl_y_024 = trr_20y * dot_lkl_z_004 + trr_21y * dot_lkl_z_014 + trr_22y * dot_lkl_z_024 + trr_23y * dot_lkl_z_034 + trr_24y * dot_lkl_z_044 + trr_25y * dot_lkl_z_054 + trr_26y * dot_lkl_z_064;
                    double dot_lkl_y_030 = trr_30y * dot_lkl_z_000 + trr_31y * dot_lkl_z_010 + trr_32y * dot_lkl_z_020 + trr_33y * dot_lkl_z_030 + trr_34y * dot_lkl_z_040 + trr_35y * dot_lkl_z_050 + trr_36y * dot_lkl_z_060;
                    double dot_lkl_y_031 = trr_30y * dot_lkl_z_001 + trr_31y * dot_lkl_z_011 + trr_32y * dot_lkl_z_021 + trr_33y * dot_lkl_z_031 + trr_34y * dot_lkl_z_041 + trr_35y * dot_lkl_z_051 + trr_36y * dot_lkl_z_061;
                    double dot_lkl_y_032 = trr_30y * dot_lkl_z_002 + trr_31y * dot_lkl_z_012 + trr_32y * dot_lkl_z_022 + trr_33y * dot_lkl_z_032 + trr_34y * dot_lkl_z_042 + trr_35y * dot_lkl_z_052 + trr_36y * dot_lkl_z_062;
                    double dot_lkl_y_033 = trr_30y * dot_lkl_z_003 + trr_31y * dot_lkl_z_013 + trr_32y * dot_lkl_z_023 + trr_33y * dot_lkl_z_033 + trr_34y * dot_lkl_z_043 + trr_35y * dot_lkl_z_053 + trr_36y * dot_lkl_z_063;
                    double dot_lkl_y_040 = trr_40y * dot_lkl_z_000 + trr_41y * dot_lkl_z_010 + trr_42y * dot_lkl_z_020 + trr_43y * dot_lkl_z_030 + trr_44y * dot_lkl_z_040 + trr_45y * dot_lkl_z_050 + trr_46y * dot_lkl_z_060;
                    double dot_lkl_y_041 = trr_40y * dot_lkl_z_001 + trr_41y * dot_lkl_z_011 + trr_42y * dot_lkl_z_021 + trr_43y * dot_lkl_z_031 + trr_44y * dot_lkl_z_041 + trr_45y * dot_lkl_z_051 + trr_46y * dot_lkl_z_061;
                    double dot_lkl_y_042 = trr_40y * dot_lkl_z_002 + trr_41y * dot_lkl_z_012 + trr_42y * dot_lkl_z_022 + trr_43y * dot_lkl_z_032 + trr_44y * dot_lkl_z_042 + trr_45y * dot_lkl_z_052 + trr_46y * dot_lkl_z_062;
                    double dot_lkl_y_050 = trr_50y * dot_lkl_z_000 + trr_51y * dot_lkl_z_010 + trr_52y * dot_lkl_z_020 + trr_53y * dot_lkl_z_030 + trr_54y * dot_lkl_z_040 + trr_55y * dot_lkl_z_050 + trr_56y * dot_lkl_z_060;
                    double dot_lkl_y_051 = trr_50y * dot_lkl_z_001 + trr_51y * dot_lkl_z_011 + trr_52y * dot_lkl_z_021 + trr_53y * dot_lkl_z_031 + trr_54y * dot_lkl_z_041 + trr_55y * dot_lkl_z_051 + trr_56y * dot_lkl_z_061;
                    double dot_lkl_y_060 = trr_60y * dot_lkl_z_000 + trr_61y * dot_lkl_z_010 + trr_62y * dot_lkl_z_020 + trr_63y * dot_lkl_z_030 + trr_64y * dot_lkl_z_040 + trr_65y * dot_lkl_z_050 + trr_66y * dot_lkl_z_060;
                    double dot_lkl_y_100 = 1 * dot_lkl_z_100 + trr_01y * dot_lkl_z_110 + trr_02y * dot_lkl_z_120 + trr_03y * dot_lkl_z_130 + trr_04y * dot_lkl_z_140 + trr_05y * dot_lkl_z_150;
                    double dot_lkl_y_101 = 1 * dot_lkl_z_101 + trr_01y * dot_lkl_z_111 + trr_02y * dot_lkl_z_121 + trr_03y * dot_lkl_z_131 + trr_04y * dot_lkl_z_141 + trr_05y * dot_lkl_z_151;
                    double dot_lkl_y_102 = 1 * dot_lkl_z_102 + trr_01y * dot_lkl_z_112 + trr_02y * dot_lkl_z_122 + trr_03y * dot_lkl_z_132 + trr_04y * dot_lkl_z_142 + trr_05y * dot_lkl_z_152;
                    double dot_lkl_y_103 = 1 * dot_lkl_z_103 + trr_01y * dot_lkl_z_113 + trr_02y * dot_lkl_z_123 + trr_03y * dot_lkl_z_133 + trr_04y * dot_lkl_z_143 + trr_05y * dot_lkl_z_153;
                    double dot_lkl_y_104 = 1 * dot_lkl_z_104 + trr_01y * dot_lkl_z_114 + trr_02y * dot_lkl_z_124 + trr_03y * dot_lkl_z_134 + trr_04y * dot_lkl_z_144 + trr_05y * dot_lkl_z_154;
                    double dot_lkl_y_105 = 1 * dot_lkl_z_105 + trr_01y * dot_lkl_z_115 + trr_02y * dot_lkl_z_125 + trr_03y * dot_lkl_z_135 + trr_04y * dot_lkl_z_145 + trr_05y * dot_lkl_z_155;
                    double dot_lkl_y_106 = 1 * dot_lkl_z_106 + trr_01y * dot_lkl_z_116 + trr_02y * dot_lkl_z_126 + trr_03y * dot_lkl_z_136 + trr_04y * dot_lkl_z_146 + trr_05y * dot_lkl_z_156;
                    double dot_lkl_y_110 = trr_10y * dot_lkl_z_100 + trr_11y * dot_lkl_z_110 + trr_12y * dot_lkl_z_120 + trr_13y * dot_lkl_z_130 + trr_14y * dot_lkl_z_140 + trr_15y * dot_lkl_z_150;
                    double dot_lkl_y_111 = trr_10y * dot_lkl_z_101 + trr_11y * dot_lkl_z_111 + trr_12y * dot_lkl_z_121 + trr_13y * dot_lkl_z_131 + trr_14y * dot_lkl_z_141 + trr_15y * dot_lkl_z_151;
                    double dot_lkl_y_112 = trr_10y * dot_lkl_z_102 + trr_11y * dot_lkl_z_112 + trr_12y * dot_lkl_z_122 + trr_13y * dot_lkl_z_132 + trr_14y * dot_lkl_z_142 + trr_15y * dot_lkl_z_152;
                    double dot_lkl_y_113 = trr_10y * dot_lkl_z_103 + trr_11y * dot_lkl_z_113 + trr_12y * dot_lkl_z_123 + trr_13y * dot_lkl_z_133 + trr_14y * dot_lkl_z_143 + trr_15y * dot_lkl_z_153;
                    double dot_lkl_y_114 = trr_10y * dot_lkl_z_104 + trr_11y * dot_lkl_z_114 + trr_12y * dot_lkl_z_124 + trr_13y * dot_lkl_z_134 + trr_14y * dot_lkl_z_144 + trr_15y * dot_lkl_z_154;
                    double dot_lkl_y_115 = trr_10y * dot_lkl_z_105 + trr_11y * dot_lkl_z_115 + trr_12y * dot_lkl_z_125 + trr_13y * dot_lkl_z_135 + trr_14y * dot_lkl_z_145 + trr_15y * dot_lkl_z_155;
                    double dot_lkl_y_120 = trr_20y * dot_lkl_z_100 + trr_21y * dot_lkl_z_110 + trr_22y * dot_lkl_z_120 + trr_23y * dot_lkl_z_130 + trr_24y * dot_lkl_z_140 + trr_25y * dot_lkl_z_150;
                    double dot_lkl_y_121 = trr_20y * dot_lkl_z_101 + trr_21y * dot_lkl_z_111 + trr_22y * dot_lkl_z_121 + trr_23y * dot_lkl_z_131 + trr_24y * dot_lkl_z_141 + trr_25y * dot_lkl_z_151;
                    double dot_lkl_y_122 = trr_20y * dot_lkl_z_102 + trr_21y * dot_lkl_z_112 + trr_22y * dot_lkl_z_122 + trr_23y * dot_lkl_z_132 + trr_24y * dot_lkl_z_142 + trr_25y * dot_lkl_z_152;
                    double dot_lkl_y_123 = trr_20y * dot_lkl_z_103 + trr_21y * dot_lkl_z_113 + trr_22y * dot_lkl_z_123 + trr_23y * dot_lkl_z_133 + trr_24y * dot_lkl_z_143 + trr_25y * dot_lkl_z_153;
                    double dot_lkl_y_124 = trr_20y * dot_lkl_z_104 + trr_21y * dot_lkl_z_114 + trr_22y * dot_lkl_z_124 + trr_23y * dot_lkl_z_134 + trr_24y * dot_lkl_z_144 + trr_25y * dot_lkl_z_154;
                    double dot_lkl_y_130 = trr_30y * dot_lkl_z_100 + trr_31y * dot_lkl_z_110 + trr_32y * dot_lkl_z_120 + trr_33y * dot_lkl_z_130 + trr_34y * dot_lkl_z_140 + trr_35y * dot_lkl_z_150;
                    double dot_lkl_y_131 = trr_30y * dot_lkl_z_101 + trr_31y * dot_lkl_z_111 + trr_32y * dot_lkl_z_121 + trr_33y * dot_lkl_z_131 + trr_34y * dot_lkl_z_141 + trr_35y * dot_lkl_z_151;
                    double dot_lkl_y_132 = trr_30y * dot_lkl_z_102 + trr_31y * dot_lkl_z_112 + trr_32y * dot_lkl_z_122 + trr_33y * dot_lkl_z_132 + trr_34y * dot_lkl_z_142 + trr_35y * dot_lkl_z_152;
                    double dot_lkl_y_133 = trr_30y * dot_lkl_z_103 + trr_31y * dot_lkl_z_113 + trr_32y * dot_lkl_z_123 + trr_33y * dot_lkl_z_133 + trr_34y * dot_lkl_z_143 + trr_35y * dot_lkl_z_153;
                    double dot_lkl_y_140 = trr_40y * dot_lkl_z_100 + trr_41y * dot_lkl_z_110 + trr_42y * dot_lkl_z_120 + trr_43y * dot_lkl_z_130 + trr_44y * dot_lkl_z_140 + trr_45y * dot_lkl_z_150;
                    double dot_lkl_y_141 = trr_40y * dot_lkl_z_101 + trr_41y * dot_lkl_z_111 + trr_42y * dot_lkl_z_121 + trr_43y * dot_lkl_z_131 + trr_44y * dot_lkl_z_141 + trr_45y * dot_lkl_z_151;
                    double dot_lkl_y_142 = trr_40y * dot_lkl_z_102 + trr_41y * dot_lkl_z_112 + trr_42y * dot_lkl_z_122 + trr_43y * dot_lkl_z_132 + trr_44y * dot_lkl_z_142 + trr_45y * dot_lkl_z_152;
                    double dot_lkl_y_150 = trr_50y * dot_lkl_z_100 + trr_51y * dot_lkl_z_110 + trr_52y * dot_lkl_z_120 + trr_53y * dot_lkl_z_130 + trr_54y * dot_lkl_z_140 + trr_55y * dot_lkl_z_150;
                    double dot_lkl_y_151 = trr_50y * dot_lkl_z_101 + trr_51y * dot_lkl_z_111 + trr_52y * dot_lkl_z_121 + trr_53y * dot_lkl_z_131 + trr_54y * dot_lkl_z_141 + trr_55y * dot_lkl_z_151;
                    double dot_lkl_y_160 = trr_60y * dot_lkl_z_100 + trr_61y * dot_lkl_z_110 + trr_62y * dot_lkl_z_120 + trr_63y * dot_lkl_z_130 + trr_64y * dot_lkl_z_140 + trr_65y * dot_lkl_z_150;
                    double dot_lkl_y_200 = 1 * dot_lkl_z_200 + trr_01y * dot_lkl_z_210 + trr_02y * dot_lkl_z_220 + trr_03y * dot_lkl_z_230 + trr_04y * dot_lkl_z_240;
                    double dot_lkl_y_201 = 1 * dot_lkl_z_201 + trr_01y * dot_lkl_z_211 + trr_02y * dot_lkl_z_221 + trr_03y * dot_lkl_z_231 + trr_04y * dot_lkl_z_241;
                    double dot_lkl_y_202 = 1 * dot_lkl_z_202 + trr_01y * dot_lkl_z_212 + trr_02y * dot_lkl_z_222 + trr_03y * dot_lkl_z_232 + trr_04y * dot_lkl_z_242;
                    double dot_lkl_y_203 = 1 * dot_lkl_z_203 + trr_01y * dot_lkl_z_213 + trr_02y * dot_lkl_z_223 + trr_03y * dot_lkl_z_233 + trr_04y * dot_lkl_z_243;
                    double dot_lkl_y_204 = 1 * dot_lkl_z_204 + trr_01y * dot_lkl_z_214 + trr_02y * dot_lkl_z_224 + trr_03y * dot_lkl_z_234 + trr_04y * dot_lkl_z_244;
                    double dot_lkl_y_205 = 1 * dot_lkl_z_205 + trr_01y * dot_lkl_z_215 + trr_02y * dot_lkl_z_225 + trr_03y * dot_lkl_z_235 + trr_04y * dot_lkl_z_245;
                    double dot_lkl_y_206 = 1 * dot_lkl_z_206 + trr_01y * dot_lkl_z_216 + trr_02y * dot_lkl_z_226 + trr_03y * dot_lkl_z_236 + trr_04y * dot_lkl_z_246;
                    double dot_lkl_y_210 = trr_10y * dot_lkl_z_200 + trr_11y * dot_lkl_z_210 + trr_12y * dot_lkl_z_220 + trr_13y * dot_lkl_z_230 + trr_14y * dot_lkl_z_240;
                    double dot_lkl_y_211 = trr_10y * dot_lkl_z_201 + trr_11y * dot_lkl_z_211 + trr_12y * dot_lkl_z_221 + trr_13y * dot_lkl_z_231 + trr_14y * dot_lkl_z_241;
                    double dot_lkl_y_212 = trr_10y * dot_lkl_z_202 + trr_11y * dot_lkl_z_212 + trr_12y * dot_lkl_z_222 + trr_13y * dot_lkl_z_232 + trr_14y * dot_lkl_z_242;
                    double dot_lkl_y_213 = trr_10y * dot_lkl_z_203 + trr_11y * dot_lkl_z_213 + trr_12y * dot_lkl_z_223 + trr_13y * dot_lkl_z_233 + trr_14y * dot_lkl_z_243;
                    double dot_lkl_y_214 = trr_10y * dot_lkl_z_204 + trr_11y * dot_lkl_z_214 + trr_12y * dot_lkl_z_224 + trr_13y * dot_lkl_z_234 + trr_14y * dot_lkl_z_244;
                    double dot_lkl_y_215 = trr_10y * dot_lkl_z_205 + trr_11y * dot_lkl_z_215 + trr_12y * dot_lkl_z_225 + trr_13y * dot_lkl_z_235 + trr_14y * dot_lkl_z_245;
                    double dot_lkl_y_220 = trr_20y * dot_lkl_z_200 + trr_21y * dot_lkl_z_210 + trr_22y * dot_lkl_z_220 + trr_23y * dot_lkl_z_230 + trr_24y * dot_lkl_z_240;
                    double dot_lkl_y_221 = trr_20y * dot_lkl_z_201 + trr_21y * dot_lkl_z_211 + trr_22y * dot_lkl_z_221 + trr_23y * dot_lkl_z_231 + trr_24y * dot_lkl_z_241;
                    double dot_lkl_y_222 = trr_20y * dot_lkl_z_202 + trr_21y * dot_lkl_z_212 + trr_22y * dot_lkl_z_222 + trr_23y * dot_lkl_z_232 + trr_24y * dot_lkl_z_242;
                    double dot_lkl_y_223 = trr_20y * dot_lkl_z_203 + trr_21y * dot_lkl_z_213 + trr_22y * dot_lkl_z_223 + trr_23y * dot_lkl_z_233 + trr_24y * dot_lkl_z_243;
                    double dot_lkl_y_224 = trr_20y * dot_lkl_z_204 + trr_21y * dot_lkl_z_214 + trr_22y * dot_lkl_z_224 + trr_23y * dot_lkl_z_234 + trr_24y * dot_lkl_z_244;
                    double dot_lkl_y_230 = trr_30y * dot_lkl_z_200 + trr_31y * dot_lkl_z_210 + trr_32y * dot_lkl_z_220 + trr_33y * dot_lkl_z_230 + trr_34y * dot_lkl_z_240;
                    double dot_lkl_y_231 = trr_30y * dot_lkl_z_201 + trr_31y * dot_lkl_z_211 + trr_32y * dot_lkl_z_221 + trr_33y * dot_lkl_z_231 + trr_34y * dot_lkl_z_241;
                    double dot_lkl_y_232 = trr_30y * dot_lkl_z_202 + trr_31y * dot_lkl_z_212 + trr_32y * dot_lkl_z_222 + trr_33y * dot_lkl_z_232 + trr_34y * dot_lkl_z_242;
                    double dot_lkl_y_233 = trr_30y * dot_lkl_z_203 + trr_31y * dot_lkl_z_213 + trr_32y * dot_lkl_z_223 + trr_33y * dot_lkl_z_233 + trr_34y * dot_lkl_z_243;
                    double dot_lkl_y_240 = trr_40y * dot_lkl_z_200 + trr_41y * dot_lkl_z_210 + trr_42y * dot_lkl_z_220 + trr_43y * dot_lkl_z_230 + trr_44y * dot_lkl_z_240;
                    double dot_lkl_y_241 = trr_40y * dot_lkl_z_201 + trr_41y * dot_lkl_z_211 + trr_42y * dot_lkl_z_221 + trr_43y * dot_lkl_z_231 + trr_44y * dot_lkl_z_241;
                    double dot_lkl_y_242 = trr_40y * dot_lkl_z_202 + trr_41y * dot_lkl_z_212 + trr_42y * dot_lkl_z_222 + trr_43y * dot_lkl_z_232 + trr_44y * dot_lkl_z_242;
                    double dot_lkl_y_250 = trr_50y * dot_lkl_z_200 + trr_51y * dot_lkl_z_210 + trr_52y * dot_lkl_z_220 + trr_53y * dot_lkl_z_230 + trr_54y * dot_lkl_z_240;
                    double dot_lkl_y_251 = trr_50y * dot_lkl_z_201 + trr_51y * dot_lkl_z_211 + trr_52y * dot_lkl_z_221 + trr_53y * dot_lkl_z_231 + trr_54y * dot_lkl_z_241;
                    double dot_lkl_y_260 = trr_60y * dot_lkl_z_200 + trr_61y * dot_lkl_z_210 + trr_62y * dot_lkl_z_220 + trr_63y * dot_lkl_z_230 + trr_64y * dot_lkl_z_240;
                    double dot_lkl_y_300 = 1 * dot_lkl_z_300 + trr_01y * dot_lkl_z_310 + trr_02y * dot_lkl_z_320 + trr_03y * dot_lkl_z_330;
                    double dot_lkl_y_301 = 1 * dot_lkl_z_301 + trr_01y * dot_lkl_z_311 + trr_02y * dot_lkl_z_321 + trr_03y * dot_lkl_z_331;
                    double dot_lkl_y_302 = 1 * dot_lkl_z_302 + trr_01y * dot_lkl_z_312 + trr_02y * dot_lkl_z_322 + trr_03y * dot_lkl_z_332;
                    double dot_lkl_y_303 = 1 * dot_lkl_z_303 + trr_01y * dot_lkl_z_313 + trr_02y * dot_lkl_z_323 + trr_03y * dot_lkl_z_333;
                    double dot_lkl_y_304 = 1 * dot_lkl_z_304 + trr_01y * dot_lkl_z_314 + trr_02y * dot_lkl_z_324 + trr_03y * dot_lkl_z_334;
                    double dot_lkl_y_305 = 1 * dot_lkl_z_305 + trr_01y * dot_lkl_z_315 + trr_02y * dot_lkl_z_325 + trr_03y * dot_lkl_z_335;
                    double dot_lkl_y_306 = 1 * dot_lkl_z_306 + trr_01y * dot_lkl_z_316 + trr_02y * dot_lkl_z_326 + trr_03y * dot_lkl_z_336;
                    double dot_lkl_y_310 = trr_10y * dot_lkl_z_300 + trr_11y * dot_lkl_z_310 + trr_12y * dot_lkl_z_320 + trr_13y * dot_lkl_z_330;
                    double dot_lkl_y_311 = trr_10y * dot_lkl_z_301 + trr_11y * dot_lkl_z_311 + trr_12y * dot_lkl_z_321 + trr_13y * dot_lkl_z_331;
                    double dot_lkl_y_312 = trr_10y * dot_lkl_z_302 + trr_11y * dot_lkl_z_312 + trr_12y * dot_lkl_z_322 + trr_13y * dot_lkl_z_332;
                    double dot_lkl_y_313 = trr_10y * dot_lkl_z_303 + trr_11y * dot_lkl_z_313 + trr_12y * dot_lkl_z_323 + trr_13y * dot_lkl_z_333;
                    double dot_lkl_y_314 = trr_10y * dot_lkl_z_304 + trr_11y * dot_lkl_z_314 + trr_12y * dot_lkl_z_324 + trr_13y * dot_lkl_z_334;
                    double dot_lkl_y_315 = trr_10y * dot_lkl_z_305 + trr_11y * dot_lkl_z_315 + trr_12y * dot_lkl_z_325 + trr_13y * dot_lkl_z_335;
                    double dot_lkl_y_320 = trr_20y * dot_lkl_z_300 + trr_21y * dot_lkl_z_310 + trr_22y * dot_lkl_z_320 + trr_23y * dot_lkl_z_330;
                    double dot_lkl_y_321 = trr_20y * dot_lkl_z_301 + trr_21y * dot_lkl_z_311 + trr_22y * dot_lkl_z_321 + trr_23y * dot_lkl_z_331;
                    double dot_lkl_y_322 = trr_20y * dot_lkl_z_302 + trr_21y * dot_lkl_z_312 + trr_22y * dot_lkl_z_322 + trr_23y * dot_lkl_z_332;
                    double dot_lkl_y_323 = trr_20y * dot_lkl_z_303 + trr_21y * dot_lkl_z_313 + trr_22y * dot_lkl_z_323 + trr_23y * dot_lkl_z_333;
                    double dot_lkl_y_324 = trr_20y * dot_lkl_z_304 + trr_21y * dot_lkl_z_314 + trr_22y * dot_lkl_z_324 + trr_23y * dot_lkl_z_334;
                    double dot_lkl_y_330 = trr_30y * dot_lkl_z_300 + trr_31y * dot_lkl_z_310 + trr_32y * dot_lkl_z_320 + trr_33y * dot_lkl_z_330;
                    double dot_lkl_y_331 = trr_30y * dot_lkl_z_301 + trr_31y * dot_lkl_z_311 + trr_32y * dot_lkl_z_321 + trr_33y * dot_lkl_z_331;
                    double dot_lkl_y_332 = trr_30y * dot_lkl_z_302 + trr_31y * dot_lkl_z_312 + trr_32y * dot_lkl_z_322 + trr_33y * dot_lkl_z_332;
                    double dot_lkl_y_333 = trr_30y * dot_lkl_z_303 + trr_31y * dot_lkl_z_313 + trr_32y * dot_lkl_z_323 + trr_33y * dot_lkl_z_333;
                    double dot_lkl_y_340 = trr_40y * dot_lkl_z_300 + trr_41y * dot_lkl_z_310 + trr_42y * dot_lkl_z_320 + trr_43y * dot_lkl_z_330;
                    double dot_lkl_y_341 = trr_40y * dot_lkl_z_301 + trr_41y * dot_lkl_z_311 + trr_42y * dot_lkl_z_321 + trr_43y * dot_lkl_z_331;
                    double dot_lkl_y_342 = trr_40y * dot_lkl_z_302 + trr_41y * dot_lkl_z_312 + trr_42y * dot_lkl_z_322 + trr_43y * dot_lkl_z_332;
                    double dot_lkl_y_350 = trr_50y * dot_lkl_z_300 + trr_51y * dot_lkl_z_310 + trr_52y * dot_lkl_z_320 + trr_53y * dot_lkl_z_330;
                    double dot_lkl_y_351 = trr_50y * dot_lkl_z_301 + trr_51y * dot_lkl_z_311 + trr_52y * dot_lkl_z_321 + trr_53y * dot_lkl_z_331;
                    double dot_lkl_y_360 = trr_60y * dot_lkl_z_300 + trr_61y * dot_lkl_z_310 + trr_62y * dot_lkl_z_320 + trr_63y * dot_lkl_z_330;
                    double dot_lkl_y_400 = 1 * dot_lkl_z_400 + trr_01y * dot_lkl_z_410 + trr_02y * dot_lkl_z_420;
                    double dot_lkl_y_401 = 1 * dot_lkl_z_401 + trr_01y * dot_lkl_z_411 + trr_02y * dot_lkl_z_421;
                    double dot_lkl_y_402 = 1 * dot_lkl_z_402 + trr_01y * dot_lkl_z_412 + trr_02y * dot_lkl_z_422;
                    double dot_lkl_y_403 = 1 * dot_lkl_z_403 + trr_01y * dot_lkl_z_413 + trr_02y * dot_lkl_z_423;
                    double dot_lkl_y_404 = 1 * dot_lkl_z_404 + trr_01y * dot_lkl_z_414 + trr_02y * dot_lkl_z_424;
                    double dot_lkl_y_405 = 1 * dot_lkl_z_405 + trr_01y * dot_lkl_z_415 + trr_02y * dot_lkl_z_425;
                    double dot_lkl_y_406 = 1 * dot_lkl_z_406 + trr_01y * dot_lkl_z_416 + trr_02y * dot_lkl_z_426;
                    double dot_lkl_y_410 = trr_10y * dot_lkl_z_400 + trr_11y * dot_lkl_z_410 + trr_12y * dot_lkl_z_420;
                    double dot_lkl_y_411 = trr_10y * dot_lkl_z_401 + trr_11y * dot_lkl_z_411 + trr_12y * dot_lkl_z_421;
                    double dot_lkl_y_412 = trr_10y * dot_lkl_z_402 + trr_11y * dot_lkl_z_412 + trr_12y * dot_lkl_z_422;
                    double dot_lkl_y_413 = trr_10y * dot_lkl_z_403 + trr_11y * dot_lkl_z_413 + trr_12y * dot_lkl_z_423;
                    double dot_lkl_y_414 = trr_10y * dot_lkl_z_404 + trr_11y * dot_lkl_z_414 + trr_12y * dot_lkl_z_424;
                    double dot_lkl_y_415 = trr_10y * dot_lkl_z_405 + trr_11y * dot_lkl_z_415 + trr_12y * dot_lkl_z_425;
                    double dot_lkl_y_420 = trr_20y * dot_lkl_z_400 + trr_21y * dot_lkl_z_410 + trr_22y * dot_lkl_z_420;
                    double dot_lkl_y_421 = trr_20y * dot_lkl_z_401 + trr_21y * dot_lkl_z_411 + trr_22y * dot_lkl_z_421;
                    double dot_lkl_y_422 = trr_20y * dot_lkl_z_402 + trr_21y * dot_lkl_z_412 + trr_22y * dot_lkl_z_422;
                    double dot_lkl_y_423 = trr_20y * dot_lkl_z_403 + trr_21y * dot_lkl_z_413 + trr_22y * dot_lkl_z_423;
                    double dot_lkl_y_424 = trr_20y * dot_lkl_z_404 + trr_21y * dot_lkl_z_414 + trr_22y * dot_lkl_z_424;
                    double dot_lkl_y_430 = trr_30y * dot_lkl_z_400 + trr_31y * dot_lkl_z_410 + trr_32y * dot_lkl_z_420;
                    double dot_lkl_y_431 = trr_30y * dot_lkl_z_401 + trr_31y * dot_lkl_z_411 + trr_32y * dot_lkl_z_421;
                    double dot_lkl_y_432 = trr_30y * dot_lkl_z_402 + trr_31y * dot_lkl_z_412 + trr_32y * dot_lkl_z_422;
                    double dot_lkl_y_433 = trr_30y * dot_lkl_z_403 + trr_31y * dot_lkl_z_413 + trr_32y * dot_lkl_z_423;
                    double dot_lkl_y_440 = trr_40y * dot_lkl_z_400 + trr_41y * dot_lkl_z_410 + trr_42y * dot_lkl_z_420;
                    double dot_lkl_y_441 = trr_40y * dot_lkl_z_401 + trr_41y * dot_lkl_z_411 + trr_42y * dot_lkl_z_421;
                    double dot_lkl_y_442 = trr_40y * dot_lkl_z_402 + trr_41y * dot_lkl_z_412 + trr_42y * dot_lkl_z_422;
                    double dot_lkl_y_450 = trr_50y * dot_lkl_z_400 + trr_51y * dot_lkl_z_410 + trr_52y * dot_lkl_z_420;
                    double dot_lkl_y_451 = trr_50y * dot_lkl_z_401 + trr_51y * dot_lkl_z_411 + trr_52y * dot_lkl_z_421;
                    double dot_lkl_y_460 = trr_60y * dot_lkl_z_400 + trr_61y * dot_lkl_z_410 + trr_62y * dot_lkl_z_420;
                    double dot_lkl_y_500 = 1 * dot_lkl_z_500 + trr_01y * dot_lkl_z_510;
                    double dot_lkl_y_501 = 1 * dot_lkl_z_501 + trr_01y * dot_lkl_z_511;
                    double dot_lkl_y_502 = 1 * dot_lkl_z_502 + trr_01y * dot_lkl_z_512;
                    double dot_lkl_y_503 = 1 * dot_lkl_z_503 + trr_01y * dot_lkl_z_513;
                    double dot_lkl_y_504 = 1 * dot_lkl_z_504 + trr_01y * dot_lkl_z_514;
                    double dot_lkl_y_505 = 1 * dot_lkl_z_505 + trr_01y * dot_lkl_z_515;
                    double dot_lkl_y_506 = 1 * dot_lkl_z_506 + trr_01y * dot_lkl_z_516;
                    double dot_lkl_y_510 = trr_10y * dot_lkl_z_500 + trr_11y * dot_lkl_z_510;
                    double dot_lkl_y_511 = trr_10y * dot_lkl_z_501 + trr_11y * dot_lkl_z_511;
                    double dot_lkl_y_512 = trr_10y * dot_lkl_z_502 + trr_11y * dot_lkl_z_512;
                    double dot_lkl_y_513 = trr_10y * dot_lkl_z_503 + trr_11y * dot_lkl_z_513;
                    double dot_lkl_y_514 = trr_10y * dot_lkl_z_504 + trr_11y * dot_lkl_z_514;
                    double dot_lkl_y_515 = trr_10y * dot_lkl_z_505 + trr_11y * dot_lkl_z_515;
                    double dot_lkl_y_520 = trr_20y * dot_lkl_z_500 + trr_21y * dot_lkl_z_510;
                    double dot_lkl_y_521 = trr_20y * dot_lkl_z_501 + trr_21y * dot_lkl_z_511;
                    double dot_lkl_y_522 = trr_20y * dot_lkl_z_502 + trr_21y * dot_lkl_z_512;
                    double dot_lkl_y_523 = trr_20y * dot_lkl_z_503 + trr_21y * dot_lkl_z_513;
                    double dot_lkl_y_524 = trr_20y * dot_lkl_z_504 + trr_21y * dot_lkl_z_514;
                    double dot_lkl_y_530 = trr_30y * dot_lkl_z_500 + trr_31y * dot_lkl_z_510;
                    double dot_lkl_y_531 = trr_30y * dot_lkl_z_501 + trr_31y * dot_lkl_z_511;
                    double dot_lkl_y_532 = trr_30y * dot_lkl_z_502 + trr_31y * dot_lkl_z_512;
                    double dot_lkl_y_533 = trr_30y * dot_lkl_z_503 + trr_31y * dot_lkl_z_513;
                    double dot_lkl_y_540 = trr_40y * dot_lkl_z_500 + trr_41y * dot_lkl_z_510;
                    double dot_lkl_y_541 = trr_40y * dot_lkl_z_501 + trr_41y * dot_lkl_z_511;
                    double dot_lkl_y_542 = trr_40y * dot_lkl_z_502 + trr_41y * dot_lkl_z_512;
                    double dot_lkl_y_550 = trr_50y * dot_lkl_z_500 + trr_51y * dot_lkl_z_510;
                    double dot_lkl_y_551 = trr_50y * dot_lkl_z_501 + trr_51y * dot_lkl_z_511;
                    double dot_lkl_y_560 = trr_60y * dot_lkl_z_500 + trr_61y * dot_lkl_z_510;
                    double dot_lkl_y_600 = 1 * dot_lkl_z_600;
                    double dot_lkl_y_601 = 1 * dot_lkl_z_601;
                    double dot_lkl_y_602 = 1 * dot_lkl_z_602;
                    double dot_lkl_y_603 = 1 * dot_lkl_z_603;
                    double dot_lkl_y_604 = 1 * dot_lkl_z_604;
                    double dot_lkl_y_605 = 1 * dot_lkl_z_605;
                    double dot_lkl_y_606 = 1 * dot_lkl_z_606;
                    double dot_lkl_y_610 = trr_10y * dot_lkl_z_600;
                    double dot_lkl_y_611 = trr_10y * dot_lkl_z_601;
                    double dot_lkl_y_612 = trr_10y * dot_lkl_z_602;
                    double dot_lkl_y_613 = trr_10y * dot_lkl_z_603;
                    double dot_lkl_y_614 = trr_10y * dot_lkl_z_604;
                    double dot_lkl_y_615 = trr_10y * dot_lkl_z_605;
                    double dot_lkl_y_620 = trr_20y * dot_lkl_z_600;
                    double dot_lkl_y_621 = trr_20y * dot_lkl_z_601;
                    double dot_lkl_y_622 = trr_20y * dot_lkl_z_602;
                    double dot_lkl_y_623 = trr_20y * dot_lkl_z_603;
                    double dot_lkl_y_624 = trr_20y * dot_lkl_z_604;
                    double dot_lkl_y_630 = trr_30y * dot_lkl_z_600;
                    double dot_lkl_y_631 = trr_30y * dot_lkl_z_601;
                    double dot_lkl_y_632 = trr_30y * dot_lkl_z_602;
                    double dot_lkl_y_633 = trr_30y * dot_lkl_z_603;
                    double dot_lkl_y_640 = trr_40y * dot_lkl_z_600;
                    double dot_lkl_y_641 = trr_40y * dot_lkl_z_601;
                    double dot_lkl_y_642 = trr_40y * dot_lkl_z_602;
                    double dot_lkl_y_650 = trr_50y * dot_lkl_z_600;
                    double dot_lkl_y_651 = trr_50y * dot_lkl_z_601;
                    double dot_lkl_y_660 = trr_60y * dot_lkl_z_600;
                    vj_ij_003 += fac * dot_lkl_y_003 + trr_01x * dot_lkl_y_103 + trr_02x * dot_lkl_y_203 + trr_03x * dot_lkl_y_303 + trr_04x * dot_lkl_y_403 + trr_05x * dot_lkl_y_503 + trr_06x * dot_lkl_y_603;
                    vj_ij_004 += fac * dot_lkl_y_004 + trr_01x * dot_lkl_y_104 + trr_02x * dot_lkl_y_204 + trr_03x * dot_lkl_y_304 + trr_04x * dot_lkl_y_404 + trr_05x * dot_lkl_y_504 + trr_06x * dot_lkl_y_604;
                    vj_ij_005 += fac * dot_lkl_y_005 + trr_01x * dot_lkl_y_105 + trr_02x * dot_lkl_y_205 + trr_03x * dot_lkl_y_305 + trr_04x * dot_lkl_y_405 + trr_05x * dot_lkl_y_505 + trr_06x * dot_lkl_y_605;
                    vj_ij_006 += fac * dot_lkl_y_006 + trr_01x * dot_lkl_y_106 + trr_02x * dot_lkl_y_206 + trr_03x * dot_lkl_y_306 + trr_04x * dot_lkl_y_406 + trr_05x * dot_lkl_y_506 + trr_06x * dot_lkl_y_606;
                    vj_ij_012 += fac * dot_lkl_y_012 + trr_01x * dot_lkl_y_112 + trr_02x * dot_lkl_y_212 + trr_03x * dot_lkl_y_312 + trr_04x * dot_lkl_y_412 + trr_05x * dot_lkl_y_512 + trr_06x * dot_lkl_y_612;
                    vj_ij_013 += fac * dot_lkl_y_013 + trr_01x * dot_lkl_y_113 + trr_02x * dot_lkl_y_213 + trr_03x * dot_lkl_y_313 + trr_04x * dot_lkl_y_413 + trr_05x * dot_lkl_y_513 + trr_06x * dot_lkl_y_613;
                    vj_ij_014 += fac * dot_lkl_y_014 + trr_01x * dot_lkl_y_114 + trr_02x * dot_lkl_y_214 + trr_03x * dot_lkl_y_314 + trr_04x * dot_lkl_y_414 + trr_05x * dot_lkl_y_514 + trr_06x * dot_lkl_y_614;
                    vj_ij_015 += fac * dot_lkl_y_015 + trr_01x * dot_lkl_y_115 + trr_02x * dot_lkl_y_215 + trr_03x * dot_lkl_y_315 + trr_04x * dot_lkl_y_415 + trr_05x * dot_lkl_y_515 + trr_06x * dot_lkl_y_615;
                    vj_ij_021 += fac * dot_lkl_y_021 + trr_01x * dot_lkl_y_121 + trr_02x * dot_lkl_y_221 + trr_03x * dot_lkl_y_321 + trr_04x * dot_lkl_y_421 + trr_05x * dot_lkl_y_521 + trr_06x * dot_lkl_y_621;
                    vj_ij_022 += fac * dot_lkl_y_022 + trr_01x * dot_lkl_y_122 + trr_02x * dot_lkl_y_222 + trr_03x * dot_lkl_y_322 + trr_04x * dot_lkl_y_422 + trr_05x * dot_lkl_y_522 + trr_06x * dot_lkl_y_622;
                    vj_ij_023 += fac * dot_lkl_y_023 + trr_01x * dot_lkl_y_123 + trr_02x * dot_lkl_y_223 + trr_03x * dot_lkl_y_323 + trr_04x * dot_lkl_y_423 + trr_05x * dot_lkl_y_523 + trr_06x * dot_lkl_y_623;
                    vj_ij_024 += fac * dot_lkl_y_024 + trr_01x * dot_lkl_y_124 + trr_02x * dot_lkl_y_224 + trr_03x * dot_lkl_y_324 + trr_04x * dot_lkl_y_424 + trr_05x * dot_lkl_y_524 + trr_06x * dot_lkl_y_624;
                    vj_ij_030 += fac * dot_lkl_y_030 + trr_01x * dot_lkl_y_130 + trr_02x * dot_lkl_y_230 + trr_03x * dot_lkl_y_330 + trr_04x * dot_lkl_y_430 + trr_05x * dot_lkl_y_530 + trr_06x * dot_lkl_y_630;
                    vj_ij_031 += fac * dot_lkl_y_031 + trr_01x * dot_lkl_y_131 + trr_02x * dot_lkl_y_231 + trr_03x * dot_lkl_y_331 + trr_04x * dot_lkl_y_431 + trr_05x * dot_lkl_y_531 + trr_06x * dot_lkl_y_631;
                    vj_ij_032 += fac * dot_lkl_y_032 + trr_01x * dot_lkl_y_132 + trr_02x * dot_lkl_y_232 + trr_03x * dot_lkl_y_332 + trr_04x * dot_lkl_y_432 + trr_05x * dot_lkl_y_532 + trr_06x * dot_lkl_y_632;
                    vj_ij_033 += fac * dot_lkl_y_033 + trr_01x * dot_lkl_y_133 + trr_02x * dot_lkl_y_233 + trr_03x * dot_lkl_y_333 + trr_04x * dot_lkl_y_433 + trr_05x * dot_lkl_y_533 + trr_06x * dot_lkl_y_633;
                    vj_ij_040 += fac * dot_lkl_y_040 + trr_01x * dot_lkl_y_140 + trr_02x * dot_lkl_y_240 + trr_03x * dot_lkl_y_340 + trr_04x * dot_lkl_y_440 + trr_05x * dot_lkl_y_540 + trr_06x * dot_lkl_y_640;
                    vj_ij_041 += fac * dot_lkl_y_041 + trr_01x * dot_lkl_y_141 + trr_02x * dot_lkl_y_241 + trr_03x * dot_lkl_y_341 + trr_04x * dot_lkl_y_441 + trr_05x * dot_lkl_y_541 + trr_06x * dot_lkl_y_641;
                    vj_ij_042 += fac * dot_lkl_y_042 + trr_01x * dot_lkl_y_142 + trr_02x * dot_lkl_y_242 + trr_03x * dot_lkl_y_342 + trr_04x * dot_lkl_y_442 + trr_05x * dot_lkl_y_542 + trr_06x * dot_lkl_y_642;
                    vj_ij_050 += fac * dot_lkl_y_050 + trr_01x * dot_lkl_y_150 + trr_02x * dot_lkl_y_250 + trr_03x * dot_lkl_y_350 + trr_04x * dot_lkl_y_450 + trr_05x * dot_lkl_y_550 + trr_06x * dot_lkl_y_650;
                    vj_ij_051 += fac * dot_lkl_y_051 + trr_01x * dot_lkl_y_151 + trr_02x * dot_lkl_y_251 + trr_03x * dot_lkl_y_351 + trr_04x * dot_lkl_y_451 + trr_05x * dot_lkl_y_551 + trr_06x * dot_lkl_y_651;
                    vj_ij_060 += fac * dot_lkl_y_060 + trr_01x * dot_lkl_y_160 + trr_02x * dot_lkl_y_260 + trr_03x * dot_lkl_y_360 + trr_04x * dot_lkl_y_460 + trr_05x * dot_lkl_y_560 + trr_06x * dot_lkl_y_660;
                    vj_ij_102 += trr_10x * dot_lkl_y_002 + trr_11x * dot_lkl_y_102 + trr_12x * dot_lkl_y_202 + trr_13x * dot_lkl_y_302 + trr_14x * dot_lkl_y_402 + trr_15x * dot_lkl_y_502 + trr_16x * dot_lkl_y_602;
                    vj_ij_103 += trr_10x * dot_lkl_y_003 + trr_11x * dot_lkl_y_103 + trr_12x * dot_lkl_y_203 + trr_13x * dot_lkl_y_303 + trr_14x * dot_lkl_y_403 + trr_15x * dot_lkl_y_503 + trr_16x * dot_lkl_y_603;
                    vj_ij_104 += trr_10x * dot_lkl_y_004 + trr_11x * dot_lkl_y_104 + trr_12x * dot_lkl_y_204 + trr_13x * dot_lkl_y_304 + trr_14x * dot_lkl_y_404 + trr_15x * dot_lkl_y_504 + trr_16x * dot_lkl_y_604;
                    vj_ij_105 += trr_10x * dot_lkl_y_005 + trr_11x * dot_lkl_y_105 + trr_12x * dot_lkl_y_205 + trr_13x * dot_lkl_y_305 + trr_14x * dot_lkl_y_405 + trr_15x * dot_lkl_y_505 + trr_16x * dot_lkl_y_605;
                    vj_ij_111 += trr_10x * dot_lkl_y_011 + trr_11x * dot_lkl_y_111 + trr_12x * dot_lkl_y_211 + trr_13x * dot_lkl_y_311 + trr_14x * dot_lkl_y_411 + trr_15x * dot_lkl_y_511 + trr_16x * dot_lkl_y_611;
                    vj_ij_112 += trr_10x * dot_lkl_y_012 + trr_11x * dot_lkl_y_112 + trr_12x * dot_lkl_y_212 + trr_13x * dot_lkl_y_312 + trr_14x * dot_lkl_y_412 + trr_15x * dot_lkl_y_512 + trr_16x * dot_lkl_y_612;
                    vj_ij_113 += trr_10x * dot_lkl_y_013 + trr_11x * dot_lkl_y_113 + trr_12x * dot_lkl_y_213 + trr_13x * dot_lkl_y_313 + trr_14x * dot_lkl_y_413 + trr_15x * dot_lkl_y_513 + trr_16x * dot_lkl_y_613;
                    vj_ij_114 += trr_10x * dot_lkl_y_014 + trr_11x * dot_lkl_y_114 + trr_12x * dot_lkl_y_214 + trr_13x * dot_lkl_y_314 + trr_14x * dot_lkl_y_414 + trr_15x * dot_lkl_y_514 + trr_16x * dot_lkl_y_614;
                    vj_ij_120 += trr_10x * dot_lkl_y_020 + trr_11x * dot_lkl_y_120 + trr_12x * dot_lkl_y_220 + trr_13x * dot_lkl_y_320 + trr_14x * dot_lkl_y_420 + trr_15x * dot_lkl_y_520 + trr_16x * dot_lkl_y_620;
                    vj_ij_121 += trr_10x * dot_lkl_y_021 + trr_11x * dot_lkl_y_121 + trr_12x * dot_lkl_y_221 + trr_13x * dot_lkl_y_321 + trr_14x * dot_lkl_y_421 + trr_15x * dot_lkl_y_521 + trr_16x * dot_lkl_y_621;
                    vj_ij_122 += trr_10x * dot_lkl_y_022 + trr_11x * dot_lkl_y_122 + trr_12x * dot_lkl_y_222 + trr_13x * dot_lkl_y_322 + trr_14x * dot_lkl_y_422 + trr_15x * dot_lkl_y_522 + trr_16x * dot_lkl_y_622;
                    vj_ij_123 += trr_10x * dot_lkl_y_023 + trr_11x * dot_lkl_y_123 + trr_12x * dot_lkl_y_223 + trr_13x * dot_lkl_y_323 + trr_14x * dot_lkl_y_423 + trr_15x * dot_lkl_y_523 + trr_16x * dot_lkl_y_623;
                    vj_ij_130 += trr_10x * dot_lkl_y_030 + trr_11x * dot_lkl_y_130 + trr_12x * dot_lkl_y_230 + trr_13x * dot_lkl_y_330 + trr_14x * dot_lkl_y_430 + trr_15x * dot_lkl_y_530 + trr_16x * dot_lkl_y_630;
                    vj_ij_131 += trr_10x * dot_lkl_y_031 + trr_11x * dot_lkl_y_131 + trr_12x * dot_lkl_y_231 + trr_13x * dot_lkl_y_331 + trr_14x * dot_lkl_y_431 + trr_15x * dot_lkl_y_531 + trr_16x * dot_lkl_y_631;
                    vj_ij_132 += trr_10x * dot_lkl_y_032 + trr_11x * dot_lkl_y_132 + trr_12x * dot_lkl_y_232 + trr_13x * dot_lkl_y_332 + trr_14x * dot_lkl_y_432 + trr_15x * dot_lkl_y_532 + trr_16x * dot_lkl_y_632;
                    vj_ij_140 += trr_10x * dot_lkl_y_040 + trr_11x * dot_lkl_y_140 + trr_12x * dot_lkl_y_240 + trr_13x * dot_lkl_y_340 + trr_14x * dot_lkl_y_440 + trr_15x * dot_lkl_y_540 + trr_16x * dot_lkl_y_640;
                    vj_ij_141 += trr_10x * dot_lkl_y_041 + trr_11x * dot_lkl_y_141 + trr_12x * dot_lkl_y_241 + trr_13x * dot_lkl_y_341 + trr_14x * dot_lkl_y_441 + trr_15x * dot_lkl_y_541 + trr_16x * dot_lkl_y_641;
                    vj_ij_150 += trr_10x * dot_lkl_y_050 + trr_11x * dot_lkl_y_150 + trr_12x * dot_lkl_y_250 + trr_13x * dot_lkl_y_350 + trr_14x * dot_lkl_y_450 + trr_15x * dot_lkl_y_550 + trr_16x * dot_lkl_y_650;
                    vj_ij_201 += trr_20x * dot_lkl_y_001 + trr_21x * dot_lkl_y_101 + trr_22x * dot_lkl_y_201 + trr_23x * dot_lkl_y_301 + trr_24x * dot_lkl_y_401 + trr_25x * dot_lkl_y_501 + trr_26x * dot_lkl_y_601;
                    vj_ij_202 += trr_20x * dot_lkl_y_002 + trr_21x * dot_lkl_y_102 + trr_22x * dot_lkl_y_202 + trr_23x * dot_lkl_y_302 + trr_24x * dot_lkl_y_402 + trr_25x * dot_lkl_y_502 + trr_26x * dot_lkl_y_602;
                    vj_ij_203 += trr_20x * dot_lkl_y_003 + trr_21x * dot_lkl_y_103 + trr_22x * dot_lkl_y_203 + trr_23x * dot_lkl_y_303 + trr_24x * dot_lkl_y_403 + trr_25x * dot_lkl_y_503 + trr_26x * dot_lkl_y_603;
                    vj_ij_204 += trr_20x * dot_lkl_y_004 + trr_21x * dot_lkl_y_104 + trr_22x * dot_lkl_y_204 + trr_23x * dot_lkl_y_304 + trr_24x * dot_lkl_y_404 + trr_25x * dot_lkl_y_504 + trr_26x * dot_lkl_y_604;
                    vj_ij_210 += trr_20x * dot_lkl_y_010 + trr_21x * dot_lkl_y_110 + trr_22x * dot_lkl_y_210 + trr_23x * dot_lkl_y_310 + trr_24x * dot_lkl_y_410 + trr_25x * dot_lkl_y_510 + trr_26x * dot_lkl_y_610;
                    vj_ij_211 += trr_20x * dot_lkl_y_011 + trr_21x * dot_lkl_y_111 + trr_22x * dot_lkl_y_211 + trr_23x * dot_lkl_y_311 + trr_24x * dot_lkl_y_411 + trr_25x * dot_lkl_y_511 + trr_26x * dot_lkl_y_611;
                    vj_ij_212 += trr_20x * dot_lkl_y_012 + trr_21x * dot_lkl_y_112 + trr_22x * dot_lkl_y_212 + trr_23x * dot_lkl_y_312 + trr_24x * dot_lkl_y_412 + trr_25x * dot_lkl_y_512 + trr_26x * dot_lkl_y_612;
                    vj_ij_213 += trr_20x * dot_lkl_y_013 + trr_21x * dot_lkl_y_113 + trr_22x * dot_lkl_y_213 + trr_23x * dot_lkl_y_313 + trr_24x * dot_lkl_y_413 + trr_25x * dot_lkl_y_513 + trr_26x * dot_lkl_y_613;
                    vj_ij_220 += trr_20x * dot_lkl_y_020 + trr_21x * dot_lkl_y_120 + trr_22x * dot_lkl_y_220 + trr_23x * dot_lkl_y_320 + trr_24x * dot_lkl_y_420 + trr_25x * dot_lkl_y_520 + trr_26x * dot_lkl_y_620;
                    vj_ij_221 += trr_20x * dot_lkl_y_021 + trr_21x * dot_lkl_y_121 + trr_22x * dot_lkl_y_221 + trr_23x * dot_lkl_y_321 + trr_24x * dot_lkl_y_421 + trr_25x * dot_lkl_y_521 + trr_26x * dot_lkl_y_621;
                    vj_ij_222 += trr_20x * dot_lkl_y_022 + trr_21x * dot_lkl_y_122 + trr_22x * dot_lkl_y_222 + trr_23x * dot_lkl_y_322 + trr_24x * dot_lkl_y_422 + trr_25x * dot_lkl_y_522 + trr_26x * dot_lkl_y_622;
                    vj_ij_230 += trr_20x * dot_lkl_y_030 + trr_21x * dot_lkl_y_130 + trr_22x * dot_lkl_y_230 + trr_23x * dot_lkl_y_330 + trr_24x * dot_lkl_y_430 + trr_25x * dot_lkl_y_530 + trr_26x * dot_lkl_y_630;
                    vj_ij_231 += trr_20x * dot_lkl_y_031 + trr_21x * dot_lkl_y_131 + trr_22x * dot_lkl_y_231 + trr_23x * dot_lkl_y_331 + trr_24x * dot_lkl_y_431 + trr_25x * dot_lkl_y_531 + trr_26x * dot_lkl_y_631;
                    vj_ij_240 += trr_20x * dot_lkl_y_040 + trr_21x * dot_lkl_y_140 + trr_22x * dot_lkl_y_240 + trr_23x * dot_lkl_y_340 + trr_24x * dot_lkl_y_440 + trr_25x * dot_lkl_y_540 + trr_26x * dot_lkl_y_640;
                    vj_ij_300 += trr_30x * dot_lkl_y_000 + trr_31x * dot_lkl_y_100 + trr_32x * dot_lkl_y_200 + trr_33x * dot_lkl_y_300 + trr_34x * dot_lkl_y_400 + trr_35x * dot_lkl_y_500 + trr_36x * dot_lkl_y_600;
                    vj_ij_301 += trr_30x * dot_lkl_y_001 + trr_31x * dot_lkl_y_101 + trr_32x * dot_lkl_y_201 + trr_33x * dot_lkl_y_301 + trr_34x * dot_lkl_y_401 + trr_35x * dot_lkl_y_501 + trr_36x * dot_lkl_y_601;
                    vj_ij_302 += trr_30x * dot_lkl_y_002 + trr_31x * dot_lkl_y_102 + trr_32x * dot_lkl_y_202 + trr_33x * dot_lkl_y_302 + trr_34x * dot_lkl_y_402 + trr_35x * dot_lkl_y_502 + trr_36x * dot_lkl_y_602;
                    vj_ij_303 += trr_30x * dot_lkl_y_003 + trr_31x * dot_lkl_y_103 + trr_32x * dot_lkl_y_203 + trr_33x * dot_lkl_y_303 + trr_34x * dot_lkl_y_403 + trr_35x * dot_lkl_y_503 + trr_36x * dot_lkl_y_603;
                    vj_ij_310 += trr_30x * dot_lkl_y_010 + trr_31x * dot_lkl_y_110 + trr_32x * dot_lkl_y_210 + trr_33x * dot_lkl_y_310 + trr_34x * dot_lkl_y_410 + trr_35x * dot_lkl_y_510 + trr_36x * dot_lkl_y_610;
                    vj_ij_311 += trr_30x * dot_lkl_y_011 + trr_31x * dot_lkl_y_111 + trr_32x * dot_lkl_y_211 + trr_33x * dot_lkl_y_311 + trr_34x * dot_lkl_y_411 + trr_35x * dot_lkl_y_511 + trr_36x * dot_lkl_y_611;
                    vj_ij_312 += trr_30x * dot_lkl_y_012 + trr_31x * dot_lkl_y_112 + trr_32x * dot_lkl_y_212 + trr_33x * dot_lkl_y_312 + trr_34x * dot_lkl_y_412 + trr_35x * dot_lkl_y_512 + trr_36x * dot_lkl_y_612;
                    vj_ij_320 += trr_30x * dot_lkl_y_020 + trr_31x * dot_lkl_y_120 + trr_32x * dot_lkl_y_220 + trr_33x * dot_lkl_y_320 + trr_34x * dot_lkl_y_420 + trr_35x * dot_lkl_y_520 + trr_36x * dot_lkl_y_620;
                    vj_ij_321 += trr_30x * dot_lkl_y_021 + trr_31x * dot_lkl_y_121 + trr_32x * dot_lkl_y_221 + trr_33x * dot_lkl_y_321 + trr_34x * dot_lkl_y_421 + trr_35x * dot_lkl_y_521 + trr_36x * dot_lkl_y_621;
                    vj_ij_330 += trr_30x * dot_lkl_y_030 + trr_31x * dot_lkl_y_130 + trr_32x * dot_lkl_y_230 + trr_33x * dot_lkl_y_330 + trr_34x * dot_lkl_y_430 + trr_35x * dot_lkl_y_530 + trr_36x * dot_lkl_y_630;
                    vj_ij_400 += trr_40x * dot_lkl_y_000 + trr_41x * dot_lkl_y_100 + trr_42x * dot_lkl_y_200 + trr_43x * dot_lkl_y_300 + trr_44x * dot_lkl_y_400 + trr_45x * dot_lkl_y_500 + trr_46x * dot_lkl_y_600;
                    vj_ij_401 += trr_40x * dot_lkl_y_001 + trr_41x * dot_lkl_y_101 + trr_42x * dot_lkl_y_201 + trr_43x * dot_lkl_y_301 + trr_44x * dot_lkl_y_401 + trr_45x * dot_lkl_y_501 + trr_46x * dot_lkl_y_601;
                    vj_ij_402 += trr_40x * dot_lkl_y_002 + trr_41x * dot_lkl_y_102 + trr_42x * dot_lkl_y_202 + trr_43x * dot_lkl_y_302 + trr_44x * dot_lkl_y_402 + trr_45x * dot_lkl_y_502 + trr_46x * dot_lkl_y_602;
                    vj_ij_410 += trr_40x * dot_lkl_y_010 + trr_41x * dot_lkl_y_110 + trr_42x * dot_lkl_y_210 + trr_43x * dot_lkl_y_310 + trr_44x * dot_lkl_y_410 + trr_45x * dot_lkl_y_510 + trr_46x * dot_lkl_y_610;
                    vj_ij_411 += trr_40x * dot_lkl_y_011 + trr_41x * dot_lkl_y_111 + trr_42x * dot_lkl_y_211 + trr_43x * dot_lkl_y_311 + trr_44x * dot_lkl_y_411 + trr_45x * dot_lkl_y_511 + trr_46x * dot_lkl_y_611;
                    vj_ij_420 += trr_40x * dot_lkl_y_020 + trr_41x * dot_lkl_y_120 + trr_42x * dot_lkl_y_220 + trr_43x * dot_lkl_y_320 + trr_44x * dot_lkl_y_420 + trr_45x * dot_lkl_y_520 + trr_46x * dot_lkl_y_620;
                    vj_ij_500 += trr_50x * dot_lkl_y_000 + trr_51x * dot_lkl_y_100 + trr_52x * dot_lkl_y_200 + trr_53x * dot_lkl_y_300 + trr_54x * dot_lkl_y_400 + trr_55x * dot_lkl_y_500 + trr_56x * dot_lkl_y_600;
                    vj_ij_501 += trr_50x * dot_lkl_y_001 + trr_51x * dot_lkl_y_101 + trr_52x * dot_lkl_y_201 + trr_53x * dot_lkl_y_301 + trr_54x * dot_lkl_y_401 + trr_55x * dot_lkl_y_501 + trr_56x * dot_lkl_y_601;
                    vj_ij_510 += trr_50x * dot_lkl_y_010 + trr_51x * dot_lkl_y_110 + trr_52x * dot_lkl_y_210 + trr_53x * dot_lkl_y_310 + trr_54x * dot_lkl_y_410 + trr_55x * dot_lkl_y_510 + trr_56x * dot_lkl_y_610;
                    vj_ij_600 += trr_60x * dot_lkl_y_000 + trr_61x * dot_lkl_y_100 + trr_62x * dot_lkl_y_200 + trr_63x * dot_lkl_y_300 + trr_64x * dot_lkl_y_400 + trr_65x * dot_lkl_y_500 + trr_66x * dot_lkl_y_600;
                }
            }
        }
        if (task_id >= ntasks) {
            continue;
        }
        double *vj1 = j.vj1;
        double *vj2 = j.vj2;
        atomicAdd(vj1+ij_pair0+3, vj_ij_003);
        atomicAdd(vj1+ij_pair0+4, vj_ij_004);
        atomicAdd(vj1+ij_pair0+5, vj_ij_005);
        atomicAdd(vj1+ij_pair0+6, vj_ij_006);
        atomicAdd(vj1+ij_pair0+9, vj_ij_012);
        atomicAdd(vj1+ij_pair0+10, vj_ij_013);
        atomicAdd(vj1+ij_pair0+11, vj_ij_014);
        atomicAdd(vj1+ij_pair0+12, vj_ij_015);
        atomicAdd(vj1+ij_pair0+14, vj_ij_021);
        atomicAdd(vj1+ij_pair0+15, vj_ij_022);
        atomicAdd(vj1+ij_pair0+16, vj_ij_023);
        atomicAdd(vj1+ij_pair0+17, vj_ij_024);
        atomicAdd(vj1+ij_pair0+18, vj_ij_030);
        atomicAdd(vj1+ij_pair0+19, vj_ij_031);
        atomicAdd(vj1+ij_pair0+20, vj_ij_032);
        atomicAdd(vj1+ij_pair0+21, vj_ij_033);
        atomicAdd(vj1+ij_pair0+22, vj_ij_040);
        atomicAdd(vj1+ij_pair0+23, vj_ij_041);
        atomicAdd(vj1+ij_pair0+24, vj_ij_042);
        atomicAdd(vj1+ij_pair0+25, vj_ij_050);
        atomicAdd(vj1+ij_pair0+26, vj_ij_051);
        atomicAdd(vj1+ij_pair0+27, vj_ij_060);
        atomicAdd(vj1+ij_pair0+30, vj_ij_102);
        atomicAdd(vj1+ij_pair0+31, vj_ij_103);
        atomicAdd(vj1+ij_pair0+32, vj_ij_104);
        atomicAdd(vj1+ij_pair0+33, vj_ij_105);
        atomicAdd(vj1+ij_pair0+35, vj_ij_111);
        atomicAdd(vj1+ij_pair0+36, vj_ij_112);
        atomicAdd(vj1+ij_pair0+37, vj_ij_113);
        atomicAdd(vj1+ij_pair0+38, vj_ij_114);
        atomicAdd(vj1+ij_pair0+39, vj_ij_120);
        atomicAdd(vj1+ij_pair0+40, vj_ij_121);
        atomicAdd(vj1+ij_pair0+41, vj_ij_122);
        atomicAdd(vj1+ij_pair0+42, vj_ij_123);
        atomicAdd(vj1+ij_pair0+43, vj_ij_130);
        atomicAdd(vj1+ij_pair0+44, vj_ij_131);
        atomicAdd(vj1+ij_pair0+45, vj_ij_132);
        atomicAdd(vj1+ij_pair0+46, vj_ij_140);
        atomicAdd(vj1+ij_pair0+47, vj_ij_141);
        atomicAdd(vj1+ij_pair0+48, vj_ij_150);
        atomicAdd(vj1+ij_pair0+50, vj_ij_201);
        atomicAdd(vj1+ij_pair0+51, vj_ij_202);
        atomicAdd(vj1+ij_pair0+52, vj_ij_203);
        atomicAdd(vj1+ij_pair0+53, vj_ij_204);
        atomicAdd(vj1+ij_pair0+54, vj_ij_210);
        atomicAdd(vj1+ij_pair0+55, vj_ij_211);
        atomicAdd(vj1+ij_pair0+56, vj_ij_212);
        atomicAdd(vj1+ij_pair0+57, vj_ij_213);
        atomicAdd(vj1+ij_pair0+58, vj_ij_220);
        atomicAdd(vj1+ij_pair0+59, vj_ij_221);
        atomicAdd(vj1+ij_pair0+60, vj_ij_222);
        atomicAdd(vj1+ij_pair0+61, vj_ij_230);
        atomicAdd(vj1+ij_pair0+62, vj_ij_231);
        atomicAdd(vj1+ij_pair0+63, vj_ij_240);
        atomicAdd(vj1+ij_pair0+64, vj_ij_300);
        atomicAdd(vj1+ij_pair0+65, vj_ij_301);
        atomicAdd(vj1+ij_pair0+66, vj_ij_302);
        atomicAdd(vj1+ij_pair0+67, vj_ij_303);
        atomicAdd(vj1+ij_pair0+68, vj_ij_310);
        atomicAdd(vj1+ij_pair0+69, vj_ij_311);
        atomicAdd(vj1+ij_pair0+70, vj_ij_312);
        atomicAdd(vj1+ij_pair0+71, vj_ij_320);
        atomicAdd(vj1+ij_pair0+72, vj_ij_321);
        atomicAdd(vj1+ij_pair0+73, vj_ij_330);
        atomicAdd(vj1+ij_pair0+74, vj_ij_400);
        atomicAdd(vj1+ij_pair0+75, vj_ij_401);
        atomicAdd(vj1+ij_pair0+76, vj_ij_402);
        atomicAdd(vj1+ij_pair0+77, vj_ij_410);
        atomicAdd(vj1+ij_pair0+78, vj_ij_411);
        atomicAdd(vj1+ij_pair0+79, vj_ij_420);
        atomicAdd(vj1+ij_pair0+80, vj_ij_500);
        atomicAdd(vj1+ij_pair0+81, vj_ij_501);
        atomicAdd(vj1+ij_pair0+82, vj_ij_510);
        atomicAdd(vj1+ij_pair0+83, vj_ij_600);
        atomicAdd(vj2+kl_pair0+3, vj_kl_003);
        atomicAdd(vj2+kl_pair0+4, vj_kl_004);
        atomicAdd(vj2+kl_pair0+5, vj_kl_005);
        atomicAdd(vj2+kl_pair0+6, vj_kl_006);
        atomicAdd(vj2+kl_pair0+9, vj_kl_012);
        atomicAdd(vj2+kl_pair0+10, vj_kl_013);
        atomicAdd(vj2+kl_pair0+11, vj_kl_014);
        atomicAdd(vj2+kl_pair0+12, vj_kl_015);
        atomicAdd(vj2+kl_pair0+14, vj_kl_021);
        atomicAdd(vj2+kl_pair0+15, vj_kl_022);
        atomicAdd(vj2+kl_pair0+16, vj_kl_023);
        atomicAdd(vj2+kl_pair0+17, vj_kl_024);
        atomicAdd(vj2+kl_pair0+18, vj_kl_030);
        atomicAdd(vj2+kl_pair0+19, vj_kl_031);
        atomicAdd(vj2+kl_pair0+20, vj_kl_032);
        atomicAdd(vj2+kl_pair0+21, vj_kl_033);
        atomicAdd(vj2+kl_pair0+22, vj_kl_040);
        atomicAdd(vj2+kl_pair0+23, vj_kl_041);
        atomicAdd(vj2+kl_pair0+24, vj_kl_042);
        atomicAdd(vj2+kl_pair0+25, vj_kl_050);
        atomicAdd(vj2+kl_pair0+26, vj_kl_051);
        atomicAdd(vj2+kl_pair0+27, vj_kl_060);
        atomicAdd(vj2+kl_pair0+30, vj_kl_102);
        atomicAdd(vj2+kl_pair0+31, vj_kl_103);
        atomicAdd(vj2+kl_pair0+32, vj_kl_104);
        atomicAdd(vj2+kl_pair0+33, vj_kl_105);
        atomicAdd(vj2+kl_pair0+35, vj_kl_111);
        atomicAdd(vj2+kl_pair0+36, vj_kl_112);
        atomicAdd(vj2+kl_pair0+37, vj_kl_113);
        atomicAdd(vj2+kl_pair0+38, vj_kl_114);
        atomicAdd(vj2+kl_pair0+39, vj_kl_120);
        atomicAdd(vj2+kl_pair0+40, vj_kl_121);
        atomicAdd(vj2+kl_pair0+41, vj_kl_122);
        atomicAdd(vj2+kl_pair0+42, vj_kl_123);
        atomicAdd(vj2+kl_pair0+43, vj_kl_130);
        atomicAdd(vj2+kl_pair0+44, vj_kl_131);
        atomicAdd(vj2+kl_pair0+45, vj_kl_132);
        atomicAdd(vj2+kl_pair0+46, vj_kl_140);
        atomicAdd(vj2+kl_pair0+47, vj_kl_141);
        atomicAdd(vj2+kl_pair0+48, vj_kl_150);
        atomicAdd(vj2+kl_pair0+50, vj_kl_201);
        atomicAdd(vj2+kl_pair0+51, vj_kl_202);
        atomicAdd(vj2+kl_pair0+52, vj_kl_203);
        atomicAdd(vj2+kl_pair0+53, vj_kl_204);
        atomicAdd(vj2+kl_pair0+54, vj_kl_210);
        atomicAdd(vj2+kl_pair0+55, vj_kl_211);
        atomicAdd(vj2+kl_pair0+56, vj_kl_212);
        atomicAdd(vj2+kl_pair0+57, vj_kl_213);
        atomicAdd(vj2+kl_pair0+58, vj_kl_220);
        atomicAdd(vj2+kl_pair0+59, vj_kl_221);
        atomicAdd(vj2+kl_pair0+60, vj_kl_222);
        atomicAdd(vj2+kl_pair0+61, vj_kl_230);
        atomicAdd(vj2+kl_pair0+62, vj_kl_231);
        atomicAdd(vj2+kl_pair0+63, vj_kl_240);
        atomicAdd(vj2+kl_pair0+64, vj_kl_300);
        atomicAdd(vj2+kl_pair0+65, vj_kl_301);
        atomicAdd(vj2+kl_pair0+66, vj_kl_302);
        atomicAdd(vj2+kl_pair0+67, vj_kl_303);
        atomicAdd(vj2+kl_pair0+68, vj_kl_310);
        atomicAdd(vj2+kl_pair0+69, vj_kl_311);
        atomicAdd(vj2+kl_pair0+70, vj_kl_312);
        atomicAdd(vj2+kl_pair0+71, vj_kl_320);
        atomicAdd(vj2+kl_pair0+72, vj_kl_321);
        atomicAdd(vj2+kl_pair0+73, vj_kl_330);
        atomicAdd(vj2+kl_pair0+74, vj_kl_400);
        atomicAdd(vj2+kl_pair0+75, vj_kl_401);
        atomicAdd(vj2+kl_pair0+76, vj_kl_402);
        atomicAdd(vj2+kl_pair0+77, vj_kl_410);
        atomicAdd(vj2+kl_pair0+78, vj_kl_411);
        atomicAdd(vj2+kl_pair0+79, vj_kl_420);
        atomicAdd(vj2+kl_pair0+80, vj_kl_500);
        atomicAdd(vj2+kl_pair0+81, vj_kl_501);
        atomicAdd(vj2+kl_pair0+82, vj_kl_510);
        atomicAdd(vj2+kl_pair0+83, vj_kl_600);
    }
}
__global__
void rys_j_6_6_4fold(RysIntEnvVars envs1, RysIntEnvVars envs2, JMatrix4Fold j, BoundsInfo4Fold bounds,
                     ShellQuartet *pool, uint32_t *batch_head)
{
    int b_id = blockIdx.x;
    int t_id = threadIdx.x + blockDim.x * threadIdx.y;
    ShellQuartet *shl_quartet_idx = pool + b_id * QUEUE_DEPTH;
    __shared__ int batch_id;
    if (t_id == 0) {
        batch_id = atomicAdd(batch_head, 1);
    }
    __syncthreads();
    int nbatches_kl = (bounds.ntile_kl_pairs + TILES_IN_BATCH - 1) / TILES_IN_BATCH;
    int nbatches = bounds.ntile_ij_pairs * nbatches_kl;
    while (batch_id < nbatches) {
        int batch_ij = batch_id / nbatches_kl;
        int batch_kl = batch_id % nbatches_kl;
        int ntasks = _fill_jk_tasks_4fold(shl_quartet_idx, envs1, envs2, j, bounds,
                                          batch_ij, batch_kl);
        if (ntasks > 0) {
            int tile_ij = bounds.tile_ij_mapping[batch_ij];
            int nbas1 = envs1.nbas;
            int nbas_tiles1 = nbas1 / TILE;
            int tile_i = tile_ij / nbas_tiles1;
            int tile_j = tile_ij % nbas_tiles1;
            int ish0 = tile_i * TILE;
            int jsh0 = tile_j * TILE;
            _rys_j_6_6_4fold(envs1, envs2, j, bounds, shl_quartet_idx, ntasks, ish0, jsh0);
        }
        if (t_id == 0) {
            batch_id = atomicAdd(batch_head, 1);
            atomicAdd(batch_head+1, ntasks);
        }
        __syncthreads();
    }
}

int rys_j_unrolled_4fold(RysIntEnvVars *envs1, RysIntEnvVars *envs2, JMatrix4Fold *j, BoundsInfo4Fold *bounds,
                         ShellQuartet *pool, uint32_t *batch_head,
                         int *scheme, int workers)
{
    int li = bounds->li;
    int lj = bounds->lj;
    int lk = bounds->lk;
    int ll = bounds->ll;
    int lij = li + lj;
    int lkl = lk + ll;
    int threads = scheme[0] * scheme[1];
    int nroots = (lij + lkl) / 2 + 1;
    int nf3_ij = (lij+1)*(lij+2)*(lij+3)/6;
    int iprim = bounds->iprim;
    int jprim = bounds->jprim;
    int buflen = (nroots*2) * threads + iprim*jprim*TILE2*4 + nf3_ij*TILE2;
    int ijkl = lij*9 + lkl;
    switch (ijkl) {
    case 0: rys_j_0_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 1: rys_j_0_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 2: rys_j_0_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 3: rys_j_0_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 4: rys_j_0_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 5: rys_j_0_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 6: rys_j_0_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 9: rys_j_1_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 10: rys_j_1_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 11: rys_j_1_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 12: rys_j_1_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 13: rys_j_1_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 14: rys_j_1_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 15: rys_j_1_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 18: rys_j_2_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 19: rys_j_2_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 20: rys_j_2_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 21: rys_j_2_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 22: rys_j_2_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 23: rys_j_2_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 24: rys_j_2_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 27: rys_j_3_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 28: rys_j_3_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 29: rys_j_3_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 30: rys_j_3_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 31: rys_j_3_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 32: rys_j_3_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 33: rys_j_3_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 36: rys_j_4_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 37: rys_j_4_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 38: rys_j_4_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 39: rys_j_4_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 40: rys_j_4_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 41: rys_j_4_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 42: rys_j_4_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 45: rys_j_5_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 46: rys_j_5_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 47: rys_j_5_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 48: rys_j_5_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 49: rys_j_5_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 50: rys_j_5_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 51: rys_j_5_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 54: rys_j_6_0_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 55: rys_j_6_1_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 56: rys_j_6_2_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 57: rys_j_6_3_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 58: rys_j_6_4_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 59: rys_j_6_5_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    case 60: rys_j_6_6_4fold<<<workers, threads, buflen*sizeof(double)>>>(*envs1, *envs2, *j, *bounds, pool, batch_head); break;
    default: return 0;
    }
    return 1;
}
